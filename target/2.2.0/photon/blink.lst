
/Users/scottperkins/Documents/WeatherStation/blink/target/2.2.0/photon/blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005180  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a51a0  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  20000000  080a51a4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000006b4  20000074  20000074  00040074  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a5218  080a5218  00035218  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a5240  080a5240  00035240  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0012b591  00000000  00000000  00035244  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00015b36  00000000  00000000  001607d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00020b08  00000000  00000000  0017630b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000023d8  00000000  00000000  00196e13  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000059f8  00000000  00000000  001991eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002738f  00000000  00000000  0019ebe3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00030f68  00000000  00000000  001c5f72  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b884f  00000000  00000000  001f6eda  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006354  00000000  00000000  002af72c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f004 fbf7 	bl	80a4824 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f004 fc19 	bl	80a4874 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a51a4 	.word	0x080a51a4
 80a0050:	20000074 	.word	0x20000074
 80a0054:	20000074 	.word	0x20000074
 80a0058:	20000725 	.word	0x20000725
 80a005c:	20000725 	.word	0x20000725

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f003 fbc5 	bl	80a37f0 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0066:	2500      	movs	r5, #0
 80a0068:	4e05      	ldr	r6, [pc, #20]	; (80a0080 <module_user_init+0x20>)
 80a006a:	4c06      	ldr	r4, [pc, #24]	; (80a0084 <module_user_init+0x24>)
 80a006c:	1ba4      	subs	r4, r4, r6
 80a006e:	08a4      	lsrs	r4, r4, #2
 80a0070:	42a5      	cmp	r5, r4
 80a0072:	d100      	bne.n	80a0076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0076:	f856 3b04 	ldr.w	r3, [r6], #4
 80a007a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f7      	b.n	80a0070 <module_user_init+0x10>
 80a0080:	080a5174 	.word	0x080a5174
 80a0084:	080a5194 	.word	0x080a5194

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b8fa 	b.w	80a0280 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f933 	bl	80a02f8 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0096:	f003 bb63 	b.w	80a3760 <_post_loop>

080a009a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a009a:	f001 b9e1 	b.w	80a1460 <malloc>

080a009e <_Znaj>:
 80a009e:	f001 b9df 	b.w	80a1460 <malloc>

080a00a2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a00a2:	f001 b9e5 	b.w	80a1470 <free>

080a00a6 <_ZdaPv>:
 80a00a6:	f001 b9e3 	b.w	80a1470 <free>
	...

080a00ac <__cxa_pure_virtual>:
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00ac:	2100      	movs	r1, #0
 80a00ae:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 80a00b0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00b2:	4a02      	ldr	r2, [pc, #8]	; (80a00bc <__cxa_pure_virtual+0x10>)
 80a00b4:	f001 f918 	bl	80a12e8 <panic_>
  while (1);
 80a00b8:	e7fe      	b.n	80a00b8 <__cxa_pure_virtual+0xc>
 80a00ba:	bf00      	nop
 80a00bc:	080a1071 	.word	0x080a1071

080a00c0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00c0:	7800      	ldrb	r0, [r0, #0]
 80a00c2:	fab0 f080 	clz	r0, r0
 80a00c6:	0940      	lsrs	r0, r0, #5
 80a00c8:	4770      	bx	lr

080a00ca <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ca:	2301      	movs	r3, #1
 80a00cc:	7003      	strb	r3, [r0, #0]
 80a00ce:	4770      	bx	lr

080a00d0 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 80a00d0:	4770      	bx	lr

080a00d2 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
 80a00d2:	6a00      	ldr	r0, [r0, #32]
 80a00d4:	6803      	ldr	r3, [r0, #0]
 80a00d6:	68db      	ldr	r3, [r3, #12]
 80a00d8:	4718      	bx	r3
	...

080a00dc <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 80a00dc:	b510      	push	{r4, lr}
 80a00de:	4604      	mov	r4, r0
 80a00e0:	4b09      	ldr	r3, [pc, #36]	; (80a0108 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 80a00e2:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 80a00e4:	f001 fe78 	bl	80a1dd8 <_ZN5spark10LogManager8instanceEv>
 80a00e8:	4621      	mov	r1, r4
 80a00ea:	f002 f885 	bl	80a21f8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 80a00ee:	f003 fa43 	bl	80a3578 <_Z16_fetch_usbserialv>
 80a00f2:	f003 fa27 	bl	80a3544 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 80a00f6:	4620      	mov	r0, r4
 80a00f8:	4b04      	ldr	r3, [pc, #16]	; (80a010c <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 80a00fa:	f840 3b04 	str.w	r3, [r0], #4
 80a00fe:	f001 ff69 	bl	80a1fd4 <_ZN5spark6detail9LogFilterD1Ev>
    }
 80a0102:	4620      	mov	r0, r4
 80a0104:	bd10      	pop	{r4, pc}
 80a0106:	bf00      	nop
 80a0108:	080a4c14 	.word	0x080a4c14
 80a010c:	080a4bfc 	.word	0x080a4bfc

080a0110 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 80a0110:	b510      	push	{r4, lr}
 80a0112:	4604      	mov	r4, r0
    }
 80a0114:	f7ff ffe2 	bl	80a00dc <_ZN5spark16SerialLogHandlerD1Ev>
 80a0118:	4620      	mov	r0, r4
 80a011a:	2124      	movs	r1, #36	; 0x24
 80a011c:	f003 fbe6 	bl	80a38ec <_ZdlPvj>
 80a0120:	4620      	mov	r0, r4
 80a0122:	bd10      	pop	{r4, pc}

080a0124 <_ZN5spark10JSONWriter4nameEPKc>:
// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
}

inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
 80a0124:	b538      	push	{r3, r4, r5, lr}
 80a0126:	4605      	mov	r5, r0
    return this->name(name, strlen(name));
 80a0128:	4608      	mov	r0, r1
inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
 80a012a:	460c      	mov	r4, r1
    return this->name(name, strlen(name));
 80a012c:	f004 fbf7 	bl	80a491e <strlen>
 80a0130:	4621      	mov	r1, r4
 80a0132:	4602      	mov	r2, r0
 80a0134:	4628      	mov	r0, r5
}
 80a0136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return this->name(name, strlen(name));
 80a013a:	f001 bce3 	b.w	80a1b04 <_ZN5spark10JSONWriter4nameEPKcj>

080a013e <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 80a013e:	b40e      	push	{r1, r2, r3}
 80a0140:	b510      	push	{r4, lr}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 80a0142:	2300      	movs	r3, #0
    log(LOG_LEVEL_INFO, fmt, args);
 80a0144:	6801      	ldr	r1, [r0, #0]
    attr.flags = 0;
 80a0146:	2020      	movs	r0, #32
inline void spark::Logger::info(const char *fmt, ...) const {
 80a0148:	b08d      	sub	sp, #52	; 0x34
 80a014a:	aa0f      	add	r2, sp, #60	; 0x3c
 80a014c:	f852 4b04 	ldr.w	r4, [r2], #4
    attr.flags = 0;
 80a0150:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a0154:	e9cd 4200 	strd	r4, r2, [sp]
    va_start(args, fmt);
 80a0158:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a015a:	201e      	movs	r0, #30
 80a015c:	aa04      	add	r2, sp, #16
 80a015e:	f001 f8d3 	bl	80a1308 <log_message_v>
}
 80a0162:	b00d      	add	sp, #52	; 0x34
 80a0164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0168:	b003      	add	sp, #12
 80a016a:	4770      	bx	lr

080a016c <_Z8callbackPcPhj>:
void callback(char *topic, byte *payload, unsigned int length);
MQTT client("home-automation.perkylab.com", 1883, callback);
WeatherData weatherData;

void callback(char *topic, byte *payload, unsigned int length)
{
 80a016c:	b508      	push	{r3, lr}
  char p[length + 1];
  memcpy(p, payload, length);
  p[length] = 0;

  Log.info("Message Received");
 80a016e:	4902      	ldr	r1, [pc, #8]	; (80a0178 <_Z8callbackPcPhj+0xc>)
 80a0170:	4802      	ldr	r0, [pc, #8]	; (80a017c <_Z8callbackPcPhj+0x10>)
 80a0172:	f7ff ffe4 	bl	80a013e <_ZNK5spark6Logger4infoEPKcz>
}
 80a0176:	bd08      	pop	{r3, pc}
 80a0178:	080a4b68 	.word	0x080a4b68
 80a017c:	2000019c 	.word	0x2000019c

080a0180 <_Z13updateWeatherv.part.0>:
  // if (client.isConnected())
  //   client.loop();
  delay(1000);
}
//---------------------------------------------------------------
void updateWeather()
 80a0180:	b530      	push	{r4, r5, lr}
 80a0182:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
  {
    // Create a buffer for the JSON string
    Log.info("Buffer full");
    char buffer[1024];
    // Create a JSON object
    memset(buffer, 0, sizeof(buffer));
 80a0186:	ac06      	add	r4, sp, #24
    Log.info("Buffer full");
 80a0188:	4931      	ldr	r1, [pc, #196]	; (80a0250 <_Z13updateWeatherv.part.0+0xd0>)
 80a018a:	4832      	ldr	r0, [pc, #200]	; (80a0254 <_Z13updateWeatherv.part.0+0xd4>)
 80a018c:	f7ff ffd7 	bl	80a013e <_ZNK5spark6Logger4infoEPKcz>
    memset(buffer, 0, sizeof(buffer));
 80a0190:	2100      	movs	r1, #0
 80a0192:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80a0196:	4620      	mov	r0, r4
 80a0198:	f004 fb6c 	bl	80a4874 <memset>

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
 80a019c:	4a2e      	ldr	r2, [pc, #184]	; (80a0258 <_Z13updateWeatherv.part.0+0xd8>)
        state_(BEGIN) {
 80a019e:	2300      	movs	r3, #0
        n_(0) {
 80a01a0:	9201      	str	r2, [sp, #4]
 80a01a2:	f240 32ff 	movw	r2, #1023	; 0x3ff
    JSONBufferWriter writer(buffer, sizeof(buffer) - 1);

    writer.beginObject();
 80a01a6:	a801      	add	r0, sp, #4
 80a01a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
        state_(BEGIN) {
 80a01ac:	f88d 3008 	strb.w	r3, [sp, #8]
        n_(0) {
 80a01b0:	9403      	str	r4, [sp, #12]
 80a01b2:	f001 fc0a 	bl	80a19ca <_ZN5spark10JSONWriter11beginObjectEv>
    writer.name("temperature").value(weatherData.getTemperature());
 80a01b6:	4929      	ldr	r1, [pc, #164]	; (80a025c <_Z13updateWeatherv.part.0+0xdc>)
 80a01b8:	a801      	add	r0, sp, #4
 80a01ba:	f7ff ffb3 	bl	80a0124 <_ZN5spark10JSONWriter4nameEPKc>
 80a01be:	4605      	mov	r5, r0
 80a01c0:	4827      	ldr	r0, [pc, #156]	; (80a0260 <_Z13updateWeatherv.part.0+0xe0>)
 80a01c2:	f000 fec5 	bl	80a0f50 <_ZN11WeatherData14getTemperatureEv>
 80a01c6:	f003 fe0f 	bl	80a3de8 <__aeabi_f2d>
 80a01ca:	4602      	mov	r2, r0
 80a01cc:	460b      	mov	r3, r1
 80a01ce:	4628      	mov	r0, r5
 80a01d0:	f001 fc2c 	bl	80a1a2c <_ZN5spark10JSONWriter5valueEd>
    writer.name("humidity").value(weatherData.getHumidity());
 80a01d4:	4923      	ldr	r1, [pc, #140]	; (80a0264 <_Z13updateWeatherv.part.0+0xe4>)
 80a01d6:	a801      	add	r0, sp, #4
 80a01d8:	f7ff ffa4 	bl	80a0124 <_ZN5spark10JSONWriter4nameEPKc>
 80a01dc:	4605      	mov	r5, r0
 80a01de:	4820      	ldr	r0, [pc, #128]	; (80a0260 <_Z13updateWeatherv.part.0+0xe0>)
 80a01e0:	f000 feb9 	bl	80a0f56 <_ZN11WeatherData11getHumidityEv>
 80a01e4:	f003 fe00 	bl	80a3de8 <__aeabi_f2d>
 80a01e8:	4602      	mov	r2, r0
 80a01ea:	460b      	mov	r3, r1
 80a01ec:	4628      	mov	r0, r5
 80a01ee:	f001 fc1d 	bl	80a1a2c <_ZN5spark10JSONWriter5valueEd>
    writer.name("pressure").value(weatherData.getPressure());
 80a01f2:	491d      	ldr	r1, [pc, #116]	; (80a0268 <_Z13updateWeatherv.part.0+0xe8>)
 80a01f4:	a801      	add	r0, sp, #4
 80a01f6:	f7ff ff95 	bl	80a0124 <_ZN5spark10JSONWriter4nameEPKc>
 80a01fa:	4605      	mov	r5, r0
 80a01fc:	4818      	ldr	r0, [pc, #96]	; (80a0260 <_Z13updateWeatherv.part.0+0xe0>)
 80a01fe:	f000 fead 	bl	80a0f5c <_ZN11WeatherData11getPressureEv>
 80a0202:	f003 fdf1 	bl	80a3de8 <__aeabi_f2d>
 80a0206:	4602      	mov	r2, r0
 80a0208:	460b      	mov	r3, r1
 80a020a:	4628      	mov	r0, r5
 80a020c:	f001 fc0e 	bl	80a1a2c <_ZN5spark10JSONWriter5valueEd>
    writer.endObject();
 80a0210:	a801      	add	r0, sp, #4
 80a0212:	f001 fbc4 	bl	80a199e <_ZN5spark10JSONWriter9endObjectEv>
    Serial.println(buffer);
 80a0216:	f003 f9af 	bl	80a3578 <_Z16_fetch_usbserialv>
 80a021a:	4621      	mov	r1, r4
 80a021c:	f002 fd11 	bl	80a2c42 <_ZN5Print7printlnEPKc>
    if (!client.isConnected())
 80a0220:	4812      	ldr	r0, [pc, #72]	; (80a026c <_Z13updateWeatherv.part.0+0xec>)
 80a0222:	f000 fa76 	bl	80a0712 <_ZN4MQTT11isConnectedEv>
 80a0226:	b918      	cbnz	r0, 80a0230 <_Z13updateWeatherv.part.0+0xb0>
    {
      client.connect("weather-station");
 80a0228:	4911      	ldr	r1, [pc, #68]	; (80a0270 <_Z13updateWeatherv.part.0+0xf0>)
 80a022a:	4810      	ldr	r0, [pc, #64]	; (80a026c <_Z13updateWeatherv.part.0+0xec>)
 80a022c:	f000 fb62 	bl	80a08f4 <_ZN4MQTT7connectEPKc>
    }

    bool published = client.publish("environment/weather-station", buffer);
 80a0230:	4622      	mov	r2, r4
 80a0232:	4910      	ldr	r1, [pc, #64]	; (80a0274 <_Z13updateWeatherv.part.0+0xf4>)
 80a0234:	480d      	ldr	r0, [pc, #52]	; (80a026c <_Z13updateWeatherv.part.0+0xec>)
 80a0236:	f000 fbe8 	bl	80a0a0a <_ZN4MQTT7publishEPKcS1_>
    if (published)
 80a023a:	b130      	cbz	r0, 80a024a <_Z13updateWeatherv.part.0+0xca>
    {
      Log.info("Published");
 80a023c:	490e      	ldr	r1, [pc, #56]	; (80a0278 <_Z13updateWeatherv.part.0+0xf8>)
    }
    else
    {
      Log.info("Not published");
 80a023e:	4805      	ldr	r0, [pc, #20]	; (80a0254 <_Z13updateWeatherv.part.0+0xd4>)
 80a0240:	f7ff ff7d 	bl	80a013e <_ZNK5spark6Logger4infoEPKcz>
  }

  //If in altitude mode, you can get a reading in feet with this line:
  // altf = sensor.readAltitudeFt();
  // Log.info("Reading Sensors");
}
 80a0244:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
 80a0248:	bd30      	pop	{r4, r5, pc}
      Log.info("Not published");
 80a024a:	490c      	ldr	r1, [pc, #48]	; (80a027c <_Z13updateWeatherv.part.0+0xfc>)
 80a024c:	e7f7      	b.n	80a023e <_Z13updateWeatherv.part.0+0xbe>
 80a024e:	bf00      	nop
 80a0250:	080a4b79 	.word	0x080a4b79
 80a0254:	2000019c 	.word	0x2000019c
 80a0258:	080a4cfc 	.word	0x080a4cfc
 80a025c:	080a4b85 	.word	0x080a4b85
 80a0260:	200000fc 	.word	0x200000fc
 80a0264:	080a4b91 	.word	0x080a4b91
 80a0268:	080a4b9a 	.word	0x080a4b9a
 80a026c:	20000074 	.word	0x20000074
 80a0270:	080a4baf 	.word	0x080a4baf
 80a0274:	080a4ba3 	.word	0x080a4ba3
 80a0278:	080a4bbf 	.word	0x080a4bbf
 80a027c:	080a4bc9 	.word	0x080a4bc9

080a0280 <setup>:
{
 80a0280:	b510      	push	{r4, lr}
  sensor.begin();
 80a0282:	4c0a      	ldr	r4, [pc, #40]	; (80a02ac <setup+0x2c>)
 80a0284:	4620      	mov	r0, r4
 80a0286:	f000 fcb1 	bl	80a0bec <_ZN7Weather5beginEv>
  sensor.setModeBarometer(); //Set to Barometer Mode
 80a028a:	4620      	mov	r0, r4
 80a028c:	f000 fd17 	bl	80a0cbe <_ZN7Weather16setModeBarometerEv>
  sensor.setOversampleRate(7); // Set Oversample rate
 80a0290:	2107      	movs	r1, #7
 80a0292:	4620      	mov	r0, r4
 80a0294:	f000 fd20 	bl	80a0cd8 <_ZN7Weather17setOversampleRateEh>
  sensor.enableEventFlags(); //Necessary register calls to enble temp, baro and alt
 80a0298:	4620      	mov	r0, r4
 80a029a:	f000 fd31 	bl	80a0d00 <_ZN7Weather16enableEventFlagsEv>
}
 80a029e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  client.connect("weather-station"); // connect to the server
 80a02a2:	4903      	ldr	r1, [pc, #12]	; (80a02b0 <setup+0x30>)
 80a02a4:	4803      	ldr	r0, [pc, #12]	; (80a02b4 <setup+0x34>)
 80a02a6:	f000 bb25 	b.w	80a08f4 <_ZN4MQTT7connectEPKc>
 80a02aa:	bf00      	nop
 80a02ac:	200000f8 	.word	0x200000f8
 80a02b0:	080a4baf 	.word	0x080a4baf
 80a02b4:	20000074 	.word	0x20000074

080a02b8 <_Z13updateWeatherv>:
{
 80a02b8:	b538      	push	{r3, r4, r5, lr}
  float humidity = sensor.getRH();
 80a02ba:	480d      	ldr	r0, [pc, #52]	; (80a02f0 <_Z13updateWeatherv+0x38>)
 80a02bc:	f000 fc1c 	bl	80a0af8 <_ZN7Weather5getRHEv>
 80a02c0:	4605      	mov	r5, r0
  float tempf = sensor.getTempF();
 80a02c2:	480b      	ldr	r0, [pc, #44]	; (80a02f0 <_Z13updateWeatherv+0x38>)
 80a02c4:	f000 fc58 	bl	80a0b78 <_ZN7Weather8getTempFEv>
 80a02c8:	4604      	mov	r4, r0
  float baroTemp = sensor.readBaroTempF();
 80a02ca:	4809      	ldr	r0, [pc, #36]	; (80a02f0 <_Z13updateWeatherv+0x38>)
 80a02cc:	f000 fdee 	bl	80a0eac <_ZN7Weather13readBaroTempFEv>
  float pascals = sensor.readPressure();
 80a02d0:	4807      	ldr	r0, [pc, #28]	; (80a02f0 <_Z13updateWeatherv+0x38>)
 80a02d2:	f000 fd31 	bl	80a0d38 <_ZN7Weather12readPressureEv>
  bool bufferFull = weatherData.addSample(tempf, humidity, pascals);
 80a02d6:	462a      	mov	r2, r5
  float pascals = sensor.readPressure();
 80a02d8:	4603      	mov	r3, r0
  bool bufferFull = weatherData.addSample(tempf, humidity, pascals);
 80a02da:	4621      	mov	r1, r4
 80a02dc:	4805      	ldr	r0, [pc, #20]	; (80a02f4 <_Z13updateWeatherv+0x3c>)
 80a02de:	f000 fe23 	bl	80a0f28 <_ZN11WeatherData9addSampleEfff>
  if (bufferFull)
 80a02e2:	b118      	cbz	r0, 80a02ec <_Z13updateWeatherv+0x34>
}
 80a02e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a02e8:	f7ff bf4a 	b.w	80a0180 <_Z13updateWeatherv.part.0>
 80a02ec:	bd38      	pop	{r3, r4, r5, pc}
 80a02ee:	bf00      	nop
 80a02f0:	200000f8 	.word	0x200000f8
 80a02f4:	200000fc 	.word	0x200000fc

080a02f8 <loop>:
{
 80a02f8:	b508      	push	{r3, lr}
  updateWeather();
 80a02fa:	f7ff ffdd 	bl	80a02b8 <_Z13updateWeatherv>
}
 80a02fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(1000);
 80a0302:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0306:	f001 b8d3 	b.w	80a14b0 <delay>

080a030a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a030a:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 80a030c:	2614      	movs	r6, #20
 80a030e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a0312:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 80a0314:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80a0318:	42ae      	cmp	r6, r5
 80a031a:	d004      	beq.n	80a0326 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 80a031c:	4628      	mov	r0, r5
 80a031e:	f002 fcef 	bl	80a2d00 <_ZN6StringD1Ev>
 80a0322:	3514      	adds	r5, #20
 80a0324:	e7f8      	b.n	80a0318 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 80a0326:	6820      	ldr	r0, [r4, #0]
 80a0328:	f001 f8a2 	bl	80a1470 <free>
    AllocatorT::free(data_);
}
 80a032c:	4620      	mov	r0, r4
 80a032e:	bd70      	pop	{r4, r5, r6, pc}

080a0330 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 80a0330:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 80a0332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0334:	4604      	mov	r4, r0
 80a0336:	460d      	mov	r5, r1
 80a0338:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 80a033a:	d916      	bls.n	80a036a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 80a033c:	4290      	cmp	r0, r2
 80a033e:	d215      	bcs.n	80a036c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 80a0340:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 80a0344:	1a75      	subs	r5, r6, r1
 80a0346:	f1a1 0714 	sub.w	r7, r1, #20
 80a034a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 80a034c:	42b7      	cmp	r7, r6
 80a034e:	d01c      	beq.n	80a038a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 80a0350:	b12c      	cbz	r4, 80a035e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 80a0352:	4631      	mov	r1, r6
 80a0354:	4620      	mov	r0, r4
 80a0356:	f002 fd4d 	bl	80a2df4 <_ZN6StringC1EOS_>
 80a035a:	7c33      	ldrb	r3, [r6, #16]
 80a035c:	7423      	strb	r3, [r4, #16]
 80a035e:	4630      	mov	r0, r6
 80a0360:	f002 fcce 	bl	80a2d00 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 80a0364:	3e14      	subs	r6, #20
 80a0366:	3c14      	subs	r4, #20
 80a0368:	e7f0      	b.n	80a034c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 80a036a:	d00e      	beq.n	80a038a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 80a036c:	42b5      	cmp	r5, r6
 80a036e:	d00c      	beq.n	80a038a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 80a0370:	b12c      	cbz	r4, 80a037e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 80a0372:	4629      	mov	r1, r5
 80a0374:	4620      	mov	r0, r4
 80a0376:	f002 fd3d 	bl	80a2df4 <_ZN6StringC1EOS_>
 80a037a:	7c2b      	ldrb	r3, [r5, #16]
 80a037c:	7423      	strb	r3, [r4, #16]
 80a037e:	4628      	mov	r0, r5
 80a0380:	f002 fcbe 	bl	80a2d00 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 80a0384:	3514      	adds	r5, #20
 80a0386:	3414      	adds	r4, #20
 80a0388:	e7f0      	b.n	80a036c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 80a038a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a038c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 80a038c:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a038e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 80a0392:	e9c0 3300 	strd	r3, r3, [r0]
 80a0396:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a0398:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a039a:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a039c:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a039e:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a03a0:	dd24      	ble.n	80a03ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 80a03a2:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 80a03a6:	fb08 f007 	mul.w	r0, r8, r7
 80a03aa:	f001 f859 	bl	80a1460 <malloc>
            if (!d) {
 80a03ae:	4605      	mov	r5, r0
 80a03b0:	b1e0      	cbz	r0, 80a03ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 80a03b2:	e9d4 1200 	ldrd	r1, r2, [r4]
 80a03b6:	fb08 1202 	mla	r2, r8, r2, r1
 80a03ba:	f7ff ffb9 	bl	80a0330 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 80a03be:	6820      	ldr	r0, [r4, #0]
 80a03c0:	f001 f856 	bl	80a1470 <free>
        data_ = d;
 80a03c4:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 80a03c6:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 80a03c8:	e9d6 7300 	ldrd	r7, r3, [r6]
 80a03cc:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 80a03d0:	45b8      	cmp	r8, r7
 80a03d2:	d009      	beq.n	80a03e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 80a03d4:	4639      	mov	r1, r7
 80a03d6:	4628      	mov	r0, r5
 80a03d8:	f002 fd26 	bl	80a2e28 <_ZN6StringC1ERKS_>
 80a03dc:	7c3b      	ldrb	r3, [r7, #16]
 80a03de:	3514      	adds	r5, #20
 80a03e0:	f805 3c04 	strb.w	r3, [r5, #-4]
 80a03e4:	3714      	adds	r7, #20
 80a03e6:	e7f3      	b.n	80a03d0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 80a03e8:	6873      	ldr	r3, [r6, #4]
 80a03ea:	6063      	str	r3, [r4, #4]
}
 80a03ec:	4620      	mov	r0, r4
 80a03ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a03f4 <_GLOBAL__sub_I_sensor>:
}
 80a03f4:	b5f0      	push	{r4, r5, r6, r7, lr}
        capacity_(0) {
 80a03f6:	2400      	movs	r4, #0
 80a03f8:	b08f      	sub	sp, #60	; 0x3c
Weather sensor;
 80a03fa:	4826      	ldr	r0, [pc, #152]	; (80a0494 <_GLOBAL__sub_I_sensor+0xa0>)
 80a03fc:	f000 fb1c 	bl	80a0a38 <_ZN7WeatherC1Ev>
 80a0400:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80a0404:	9404      	str	r4, [sp, #16]
            StreamLogHandler(Serial, level, filters) {
 80a0406:	f003 f8b7 	bl	80a3578 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 80a040a:	4d23      	ldr	r5, [pc, #140]	; (80a0498 <_GLOBAL__sub_I_sensor+0xa4>)
 80a040c:	4606      	mov	r6, r0
 80a040e:	462f      	mov	r7, r5
 80a0410:	a902      	add	r1, sp, #8
 80a0412:	a805      	add	r0, sp, #20
 80a0414:	f7ff ffba 	bl	80a038c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
 80a0418:	a905      	add	r1, sp, #20
 80a041a:	a808      	add	r0, sp, #32
 80a041c:	f7ff ffb6 	bl	80a038c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 80a0420:	4b1e      	ldr	r3, [pc, #120]	; (80a049c <_GLOBAL__sub_I_sensor+0xa8>)
 80a0422:	a908      	add	r1, sp, #32
 80a0424:	f847 3b04 	str.w	r3, [r7], #4
 80a0428:	a80b      	add	r0, sp, #44	; 0x2c
 80a042a:	f7ff ffaf 	bl	80a038c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a042e:	aa0b      	add	r2, sp, #44	; 0x2c
 80a0430:	211e      	movs	r1, #30
 80a0432:	4638      	mov	r0, r7
 80a0434:	f002 f838 	bl	80a24a8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a0438:	a80b      	add	r0, sp, #44	; 0x2c
 80a043a:	f7ff ff66 	bl	80a030a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 80a043e:	a808      	add	r0, sp, #32
 80a0440:	f7ff ff63 	bl	80a030a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a0444:	4b16      	ldr	r3, [pc, #88]	; (80a04a0 <_GLOBAL__sub_I_sensor+0xac>)
 80a0446:	a805      	add	r0, sp, #20
 80a0448:	602b      	str	r3, [r5, #0]
 80a044a:	622e      	str	r6, [r5, #32]
 80a044c:	f7ff ff5d 	bl	80a030a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a0450:	4b14      	ldr	r3, [pc, #80]	; (80a04a4 <_GLOBAL__sub_I_sensor+0xb0>)
 80a0452:	602b      	str	r3, [r5, #0]
        Serial.begin();
 80a0454:	f003 f890 	bl	80a3578 <_Z16_fetch_usbserialv>
 80a0458:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a045c:	f003 f86e 	bl	80a353c <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 80a0460:	f001 fcba 	bl	80a1dd8 <_ZN5spark10LogManager8instanceEv>
 80a0464:	4629      	mov	r1, r5
 80a0466:	f001 ffb2 	bl	80a23ce <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
 80a046a:	a802      	add	r0, sp, #8
 80a046c:	f7ff ff4d 	bl	80a030a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
MQTT client("home-automation.perkylab.com", 1883, callback);
 80a0470:	f240 725b 	movw	r2, #1883	; 0x75b
 80a0474:	4b0c      	ldr	r3, [pc, #48]	; (80a04a8 <_GLOBAL__sub_I_sensor+0xb4>)
 80a0476:	490d      	ldr	r1, [pc, #52]	; (80a04ac <_GLOBAL__sub_I_sensor+0xb8>)
 80a0478:	9400      	str	r4, [sp, #0]
 80a047a:	480d      	ldr	r0, [pc, #52]	; (80a04b0 <_GLOBAL__sub_I_sensor+0xbc>)
 80a047c:	f000 f860 	bl	80a0540 <_ZN4MQTTC1EPctPFvS0_PhjEb>
WeatherData weatherData;
 80a0480:	480c      	ldr	r0, [pc, #48]	; (80a04b4 <_GLOBAL__sub_I_sensor+0xc0>)
 80a0482:	f000 fd2d 	bl	80a0ee0 <_ZN11WeatherDataC1Ev>
SYSTEM_THREAD(ENABLED);
 80a0486:	4621      	mov	r1, r4
 80a0488:	2001      	movs	r0, #1
 80a048a:	f000 ff65 	bl	80a1358 <system_thread_set_state>
}
 80a048e:	b00f      	add	sp, #60	; 0x3c
 80a0490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0492:	bf00      	nop
 80a0494:	200000f8 	.word	0x200000f8
 80a0498:	200000d4 	.word	0x200000d4
 80a049c:	080a4bfc 	.word	0x080a4bfc
 80a04a0:	080a4da4 	.word	0x080a4da4
 80a04a4:	080a4c14 	.word	0x080a4c14
 80a04a8:	080a016d 	.word	0x080a016d
 80a04ac:	080a4bd7 	.word	0x080a4bd7
 80a04b0:	20000074 	.word	0x20000074
 80a04b4:	200000fc 	.word	0x200000fc

080a04b8 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
 80a04b8:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
 80a04bc:	b510      	push	{r4, lr}
 80a04be:	4604      	mov	r4, r0
            this->mqtt = mqtt;
 80a04c0:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
 80a04c2:	b113      	cbz	r3, 80a04ca <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
 80a04c4:	6d88      	ldr	r0, [r1, #88]	; 0x58
 80a04c6:	f000 fd9b 	bl	80a1000 <os_mutex_lock>
#endif
#endif
#endif
        }
 80a04ca:	4620      	mov	r0, r4
 80a04cc:	bd10      	pop	{r4, pc}

080a04ce <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
 80a04ce:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
 80a04d0:	6803      	ldr	r3, [r0, #0]
        ~MutexLocker() {
 80a04d2:	4604      	mov	r4, r0
            if (mqtt->thread)
 80a04d4:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 80a04d8:	b112      	cbz	r2, 80a04e0 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
 80a04da:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80a04dc:	f000 fd98 	bl	80a1010 <os_mutex_unlock>
#endif
#endif
#endif
        }
 80a04e0:	4620      	mov	r0, r4
 80a04e2:	bd10      	pop	{r4, pc}

080a04e4 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
 80a04e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a04e6:	461f      	mov	r7, r3
 80a04e8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80a04ec:	4604      	mov	r4, r0
 80a04ee:	460d      	mov	r5, r1
 80a04f0:	4616      	mov	r6, r2
    if (thread) {
 80a04f2:	b123      	cbz	r3, 80a04fe <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x1a>
        this->thread = true;
 80a04f4:	2301      	movs	r3, #1
        os_mutex_create(&mutex_lock);
 80a04f6:	3058      	adds	r0, #88	; 0x58
        this->thread = true;
 80a04f8:	7103      	strb	r3, [r0, #4]
        os_mutex_create(&mutex_lock);
 80a04fa:	f000 fd79 	bl	80a0ff0 <os_mutex_create>
    }
    this->callback = callback;
 80a04fe:	9b08      	ldr	r3, [sp, #32]
 80a0500:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
 80a0502:	2300      	movs	r3, #0
 80a0504:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
 80a0506:	b106      	cbz	r6, 80a050a <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x26>
        this->ip = ip;
 80a0508:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
 80a050a:	b125      	cbz	r5, 80a0516 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x32>
        this->domain = domain;
 80a050c:	4629      	mov	r1, r5
 80a050e:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a0512:	f002 fc94 	bl	80a2e3e <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
 80a0516:	9b06      	ldr	r3, [sp, #24]

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
    if (buffer != NULL)
 80a0518:	69e0      	ldr	r0, [r4, #28]
    this->keepalive = keepalive;
 80a051a:	6523      	str	r3, [r4, #80]	; 0x50
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a051c:	9b07      	ldr	r3, [sp, #28]
    this->port = port;
 80a051e:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a0522:	2bff      	cmp	r3, #255	; 0xff
 80a0524:	bfb8      	it	lt
 80a0526:	23ff      	movlt	r3, #255	; 0xff
 80a0528:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
 80a052c:	b108      	cbz	r0, 80a0532 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x4e>
      delete[] buffer;
 80a052e:	f7ff fdba 	bl	80a00a6 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
 80a0532:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 80a0536:	f7ff fdb2 	bl	80a009e <_Znaj>
 80a053a:	61e0      	str	r0, [r4, #28]
}
 80a053c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a0540 <_ZN4MQTTC1EPctPFvS0_PhjEb>:
MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
 80a0540:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a0544:	4604      	mov	r4, r0
            bool thread) {
 80a0546:	2500      	movs	r5, #0
MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
 80a0548:	4698      	mov	r8, r3
 80a054a:	4617      	mov	r7, r2
 80a054c:	460e      	mov	r6, r1
            bool thread) {
 80a054e:	f002 fecb 	bl	80a32e8 <_ZN9TCPClientC1Ev>
 80a0552:	490d      	ldr	r1, [pc, #52]	; (80a0588 <_ZN4MQTTC1EPctPFvS0_PhjEb+0x48>)
 80a0554:	61e5      	str	r5, [r4, #28]
 80a0556:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a055a:	f002 fc1b 	bl	80a2d94 <_ZN6StringC1EPKc>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
 80a055e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80a0562:	22ff      	movs	r2, #255	; 0xff
 80a0564:	e9cd 8302 	strd	r8, r3, [sp, #8]
 80a0568:	230f      	movs	r3, #15
 80a056a:	4620      	mov	r0, r4
 80a056c:	e9cd 3200 	strd	r3, r2, [sp]
 80a0570:	4631      	mov	r1, r6
 80a0572:	463b      	mov	r3, r7
 80a0574:	462a      	mov	r2, r5
            bool thread) {
 80a0576:	64a5      	str	r5, [r4, #72]	; 0x48
 80a0578:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
 80a057c:	f7ff ffb2 	bl	80a04e4 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb>
}
 80a0580:	4620      	mov	r0, r4
 80a0582:	b004      	add	sp, #16
 80a0584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0588:	080a4d69 	.word	0x080a4d69

080a058c <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
 80a058c:	b510      	push	{r4, lr}
 80a058e:	4604      	mov	r4, r0
    while(!_client.available()) {}
 80a0590:	4620      	mov	r0, r4
 80a0592:	f002 fdbf 	bl	80a3114 <_ZN9TCPClient9availableEv>
 80a0596:	2800      	cmp	r0, #0
 80a0598:	d0fa      	beq.n	80a0590 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
 80a059a:	4620      	mov	r0, r4
 80a059c:	f002 fcfd 	bl	80a2f9a <_ZN9TCPClient4readEv>
}
 80a05a0:	b2c0      	uxtb	r0, r0
 80a05a2:	bd10      	pop	{r4, pc}

080a05a4 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a05a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a05a8:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a05aa:	69c4      	ldr	r4, [r0, #28]
uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a05ac:	4689      	mov	r9, r1
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
 80a05ae:	2701      	movs	r7, #1
    buffer[len++] = readByte();
 80a05b0:	f7ff ffec 	bl	80a058c <_ZN4MQTT8readByteEv>
    uint16_t length = 0;
 80a05b4:	f04f 0800 	mov.w	r8, #0
    buffer[len++] = readByte();
 80a05b8:	7020      	strb	r0, [r4, #0]
 80a05ba:	463c      	mov	r4, r7
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
 80a05bc:	69eb      	ldr	r3, [r5, #28]
 80a05be:	f893 a000 	ldrb.w	sl, [r3]
 80a05c2:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
 80a05c6:	4628      	mov	r0, r5
 80a05c8:	f7ff ffe0 	bl	80a058c <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
 80a05cc:	4626      	mov	r6, r4
 80a05ce:	69eb      	ldr	r3, [r5, #28]
 80a05d0:	3401      	adds	r4, #1
 80a05d2:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
 80a05d4:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 80a05d8:	fb03 8807 	mla	r8, r3, r7, r8
        multiplier *= 128;
    } while ((digit & 128) != 0);
 80a05dc:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
 80a05de:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
 80a05e0:	fa1f f888 	uxth.w	r8, r8
        multiplier *= 128;
 80a05e4:	ea4f 17c7 	mov.w	r7, r7, lsl #7
    } while ((digit & 128) != 0);
 80a05e8:	d4ed      	bmi.n	80a05c6 <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
 80a05ea:	1e63      	subs	r3, r4, #1

    if (isPublish) {
 80a05ec:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
 80a05f0:	f889 3000 	strb.w	r3, [r9]
    if (isPublish) {
 80a05f4:	d124      	bne.n	80a0640 <_ZN4MQTT10readPacketEPh+0x9c>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
 80a05f6:	4628      	mov	r0, r5
 80a05f8:	69ef      	ldr	r7, [r5, #28]
 80a05fa:	f7ff ffc7 	bl	80a058c <_ZN4MQTT8readByteEv>
 80a05fe:	5538      	strb	r0, [r7, r4]
        buffer[len++] = readByte();
 80a0600:	4628      	mov	r0, r5
 80a0602:	69ef      	ldr	r7, [r5, #28]
 80a0604:	f7ff ffc2 	bl	80a058c <_ZN4MQTT8readByteEv>
 80a0608:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
 80a060a:	3602      	adds	r6, #2
        buffer[len++] = readByte();
 80a060c:	b2b6      	uxth	r6, r6
 80a060e:	55b8      	strb	r0, [r7, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
 80a0610:	2602      	movs	r6, #2
        buffer[len++] = readByte();
 80a0612:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a0614:	b2b6      	uxth	r6, r6
 80a0616:	46b1      	mov	r9, r6
 80a0618:	4627      	mov	r7, r4
 80a061a:	45c1      	cmp	r9, r8
 80a061c:	d212      	bcs.n	80a0644 <_ZN4MQTT10readPacketEPh+0xa0>
        digit = readByte();
 80a061e:	4628      	mov	r0, r5
 80a0620:	f7ff ffb4 	bl	80a058c <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
 80a0624:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
    for (uint16_t i = start;i<length;i++) {
 80a0628:	f109 0901 	add.w	r9, r9, #1
        if (len < this->maxpacketsize) {
 80a062c:	42bb      	cmp	r3, r7
            buffer[len] = digit;
 80a062e:	bf88      	it	hi
 80a0630:	69eb      	ldrhi	r3, [r5, #28]
    for (uint16_t i = start;i<length;i++) {
 80a0632:	fa1f f989 	uxth.w	r9, r9
            buffer[len] = digit;
 80a0636:	bf88      	it	hi
 80a0638:	55d8      	strbhi	r0, [r3, r7]
        }
        len++;
 80a063a:	3701      	adds	r7, #1
 80a063c:	b2bf      	uxth	r7, r7
    for (uint16_t i = start;i<length;i++) {
 80a063e:	e7ec      	b.n	80a061a <_ZN4MQTT10readPacketEPh+0x76>
    uint8_t start = 0;
 80a0640:	2600      	movs	r6, #0
 80a0642:	e7e7      	b.n	80a0614 <_ZN4MQTT10readPacketEPh+0x70>
 80a0644:	eba8 0006 	sub.w	r0, r8, r6
 80a0648:	45b0      	cmp	r8, r6
 80a064a:	bf2c      	ite	cs
 80a064c:	4606      	movcs	r6, r0
 80a064e:	2600      	movcc	r6, #0
    }

    if (len > this->maxpacketsize) {
 80a0650:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
 80a0654:	4434      	add	r4, r6
 80a0656:	b2a4      	uxth	r4, r4
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
 80a0658:	42a0      	cmp	r0, r4
 80a065a:	bf2c      	ite	cs
 80a065c:	4620      	movcs	r0, r4
 80a065e:	2000      	movcc	r0, #0
 80a0660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a0664 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 80a0664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a0666:	468c      	mov	ip, r1
 80a0668:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
 80a066a:	461d      	mov	r5, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 80a066c:	4607      	mov	r7, r0
    uint8_t llen = 0;
 80a066e:	2300      	movs	r3, #0
    do {
        digit = len % 128;
 80a0670:	46ae      	mov	lr, r5
 80a0672:	f005 017f 	and.w	r1, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
 80a0676:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a067a:	a802      	add	r0, sp, #8
            digit |= 0x80;
 80a067c:	bf88      	it	hi
 80a067e:	f041 0180 	orrhi.w	r1, r1, #128	; 0x80
        lenBuf[pos++] = digit;
 80a0682:	1c5c      	adds	r4, r3, #1
        llen++;
    } while(len > 0);
 80a0684:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
 80a0688:	4403      	add	r3, r0
        len = len / 128;
 80a068a:	ea4f 15d5 	mov.w	r5, r5, lsr #7
        lenBuf[pos++] = digit;
 80a068e:	b2e4      	uxtb	r4, r4
 80a0690:	f803 1c04 	strb.w	r1, [r3, #-4]
    } while(len > 0);
 80a0694:	d810      	bhi.n	80a06b8 <_ZN4MQTT5writeEhPht+0x54>

    buf[4-llen] = header;
 80a0696:	f1c4 0304 	rsb	r3, r4, #4
 80a069a:	18d1      	adds	r1, r2, r3
 80a069c:	f802 c003 	strb.w	ip, [r2, r3]
    for (int i = 0; i < llen; i++) {
 80a06a0:	f1c4 0305 	rsb	r3, r4, #5
 80a06a4:	4413      	add	r3, r2
 80a06a6:	a801      	add	r0, sp, #4
 80a06a8:	3205      	adds	r2, #5
 80a06aa:	4293      	cmp	r3, r2
 80a06ac:	d006      	beq.n	80a06bc <_ZN4MQTT5writeEhPht+0x58>
        buf[5-llen+i] = lenBuf[i];
 80a06ae:	f810 5b01 	ldrb.w	r5, [r0], #1
 80a06b2:	f803 5b01 	strb.w	r5, [r3], #1
    for (int i = 0; i < llen; i++) {
 80a06b6:	e7f8      	b.n	80a06aa <_ZN4MQTT5writeEhPht+0x46>
        lenBuf[pos++] = digit;
 80a06b8:	4623      	mov	r3, r4
 80a06ba:	e7d9      	b.n	80a0670 <_ZN4MQTT5writeEhPht+0xc>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
 80a06bc:	1c72      	adds	r2, r6, #1
 80a06be:	4422      	add	r2, r4
 80a06c0:	4638      	mov	r0, r7
 80a06c2:	f002 fbec 	bl	80a2e9e <_ZN9TCPClient5writeEPKhj>
 80a06c6:	4605      	mov	r5, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a06c8:	f000 fcda 	bl	80a1080 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
 80a06cc:	3401      	adds	r4, #1
    lastOutActivity = millis();
 80a06ce:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
 80a06d0:	4434      	add	r4, r6
 80a06d2:	b2a8      	uxth	r0, r5
}
 80a06d4:	1a23      	subs	r3, r4, r0
 80a06d6:	4258      	negs	r0, r3
 80a06d8:	4158      	adcs	r0, r3
 80a06da:	b003      	add	sp, #12
 80a06dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a06de <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
 80a06de:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
 80a06e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a06e2:	4604      	mov	r4, r0
    pos += 2;
 80a06e4:	b298      	uxth	r0, r3
 80a06e6:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
 80a06e8:	5ccd      	ldrb	r5, [r1, r3]
 80a06ea:	b14d      	cbz	r5, 80a0700 <_ZN4MQTT11writeStringEPKcPht+0x22>
 80a06ec:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
 80a06f0:	1c5f      	adds	r7, r3, #1
 80a06f2:	4286      	cmp	r6, r0
 80a06f4:	d904      	bls.n	80a0700 <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
 80a06f6:	1c46      	adds	r6, r0, #1
 80a06f8:	5415      	strb	r5, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
 80a06fa:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
 80a06fc:	b2b0      	uxth	r0, r6
    while (*idp && pos < this->maxpacketsize) {
 80a06fe:	e7f3      	b.n	80a06e8 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
 80a0700:	b299      	uxth	r1, r3
 80a0702:	1a44      	subs	r4, r0, r1
 80a0704:	4422      	add	r2, r4
 80a0706:	1209      	asrs	r1, r1, #8
 80a0708:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
 80a070c:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
 80a0710:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0712 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
 80a0712:	b538      	push	{r3, r4, r5, lr}
 80a0714:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
 80a0716:	f002 fd8e 	bl	80a3236 <_ZN9TCPClient9connectedEv>
 80a071a:	2800      	cmp	r0, #0
 80a071c:	bf14      	ite	ne
 80a071e:	2501      	movne	r5, #1
 80a0720:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
 80a0722:	d102      	bne.n	80a072a <_ZN4MQTT11isConnectedEv+0x18>
 80a0724:	4620      	mov	r0, r4
 80a0726:	f002 fd2f 	bl	80a3188 <_ZN9TCPClient4stopEv>
    return rc;
}
 80a072a:	4628      	mov	r0, r5
 80a072c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0730 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
 80a0730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0734:	b088      	sub	sp, #32
 80a0736:	4604      	mov	r4, r0
 80a0738:	4689      	mov	r9, r1
 80a073a:	4617      	mov	r7, r2
 80a073c:	461e      	mov	r6, r3
 80a073e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80a0742:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    if (!isConnected()) {
 80a0746:	f7ff ffe4 	bl	80a0712 <_ZN4MQTT11isConnectedEv>
 80a074a:	4605      	mov	r5, r0
 80a074c:	2800      	cmp	r0, #0
 80a074e:	f040 80cb 	bne.w	80a08e8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b8>
        MutexLocker lock(this);
 80a0752:	4621      	mov	r1, r4
 80a0754:	a801      	add	r0, sp, #4
 80a0756:	f7ff feaf 	bl	80a04b8 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
 80a075a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a075c:	2900      	cmp	r1, #0
 80a075e:	f040 8087 	bne.w	80a0870 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x140>
            result = _client.connect(this->domain.c_str(), this->port);
 80a0762:	462b      	mov	r3, r5
 80a0764:	4620      	mov	r0, r4
 80a0766:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a076a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a076c:	f002 fdd4 	bl	80a3318 <_ZN9TCPClient7connectEPKctm>
        if (result) {
 80a0770:	2800      	cmp	r0, #0
 80a0772:	d079      	beq.n	80a0868 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
            nextMsgId = 1;
 80a0774:	2301      	movs	r3, #1
 80a0776:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
 80a0778:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80a077c:	69e2      	ldr	r2, [r4, #28]
 80a077e:	2b04      	cmp	r3, #4
 80a0780:	f040 8081 	bne.w	80a0886 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a0784:	4b59      	ldr	r3, [pc, #356]	; (80a08ec <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>)
 80a0786:	6818      	ldr	r0, [r3, #0]
 80a0788:	8899      	ldrh	r1, [r3, #4]
 80a078a:	799b      	ldrb	r3, [r3, #6]
 80a078c:	f8ad 100c 	strh.w	r1, [sp, #12]
 80a0790:	f88d 300e 	strb.w	r3, [sp, #14]
 80a0794:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a0796:	f8c2 0005 	str.w	r0, [r2, #5]
 80a079a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80a079e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80a07a2:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
 80a07a4:	230c      	movs	r3, #12
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a07a6:	f8a2 1009 	strh.w	r1, [r2, #9]
            if (willTopic) {
 80a07aa:	f1b8 0f00 	cmp.w	r8, #0
 80a07ae:	d07f      	beq.n	80a08b0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x180>
                v = 0x06|(willQos<<3)|(willRetain<<5);
 80a07b0:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80a07b4:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80a07b8:	0140      	lsls	r0, r0, #5
 80a07ba:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 80a07be:	f040 0006 	orr.w	r0, r0, #6
 80a07c2:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
 80a07c4:	f1ba 0f00 	cmp.w	sl, #0
 80a07c8:	d101      	bne.n	80a07ce <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x9e>
              v = v&0xfd;
 80a07ca:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
 80a07ce:	b11f      	cbz	r7, 80a07d8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa8>
                if(pass != NULL) {
 80a07d0:	2e00      	cmp	r6, #0
 80a07d2:	d16f      	bne.n	80a08b4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = v|0x80;
 80a07d4:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
 80a07d8:	69e2      	ldr	r2, [r4, #28]
 80a07da:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
 80a07dc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a07de:	69e1      	ldr	r1, [r4, #28]
 80a07e0:	1c58      	adds	r0, r3, #1
 80a07e2:	1212      	asrs	r2, r2, #8
 80a07e4:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
 80a07e6:	69e1      	ldr	r1, [r4, #28]
 80a07e8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80a07ea:	1c9a      	adds	r2, r3, #2
 80a07ec:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
 80a07ee:	3303      	adds	r3, #3
 80a07f0:	4649      	mov	r1, r9
 80a07f2:	4620      	mov	r0, r4
 80a07f4:	69e2      	ldr	r2, [r4, #28]
 80a07f6:	f7ff ff72 	bl	80a06de <_ZN4MQTT11writeStringEPKcPht>
 80a07fa:	4603      	mov	r3, r0
            if (willTopic) {
 80a07fc:	f1b8 0f00 	cmp.w	r8, #0
 80a0800:	d00b      	beq.n	80a081a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xea>
                length = writeString(willTopic, buffer, length);
 80a0802:	4641      	mov	r1, r8
 80a0804:	69e2      	ldr	r2, [r4, #28]
 80a0806:	4620      	mov	r0, r4
 80a0808:	f7ff ff69 	bl	80a06de <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
 80a080c:	69e2      	ldr	r2, [r4, #28]
                length = writeString(willTopic, buffer, length);
 80a080e:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
 80a0810:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80a0812:	4620      	mov	r0, r4
 80a0814:	f7ff ff63 	bl	80a06de <_ZN4MQTT11writeStringEPKcPht>
 80a0818:	4603      	mov	r3, r0
            if(user != NULL) {
 80a081a:	b167      	cbz	r7, 80a0836 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x106>
                length = writeString(user,buffer,length);
 80a081c:	4639      	mov	r1, r7
 80a081e:	4620      	mov	r0, r4
 80a0820:	69e2      	ldr	r2, [r4, #28]
 80a0822:	f7ff ff5c 	bl	80a06de <_ZN4MQTT11writeStringEPKcPht>
 80a0826:	4603      	mov	r3, r0
                if(pass != NULL) {
 80a0828:	b12e      	cbz	r6, 80a0836 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x106>
                    length = writeString(pass,buffer,length);
 80a082a:	4631      	mov	r1, r6
 80a082c:	4620      	mov	r0, r4
 80a082e:	69e2      	ldr	r2, [r4, #28]
 80a0830:	f7ff ff55 	bl	80a06de <_ZN4MQTT11writeStringEPKcPht>
 80a0834:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
 80a0836:	3b05      	subs	r3, #5
 80a0838:	2110      	movs	r1, #16
 80a083a:	69e2      	ldr	r2, [r4, #28]
 80a083c:	b29b      	uxth	r3, r3
 80a083e:	4620      	mov	r0, r4
 80a0840:	f7ff ff10 	bl	80a0664 <_ZN4MQTT5writeEhPht>
 80a0844:	f000 fc1c 	bl	80a1080 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a0848:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            lastInActivity = lastOutActivity = millis();
 80a084c:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
            while (!_client.available()) {
 80a0850:	4620      	mov	r0, r4
 80a0852:	f002 fc5f 	bl	80a3114 <_ZN9TCPClient9availableEv>
 80a0856:	bb80      	cbnz	r0, 80a08ba <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18a>
 80a0858:	f000 fc12 	bl	80a1080 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a085c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a085e:	1ac0      	subs	r0, r0, r3
 80a0860:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a0862:	4373      	muls	r3, r6
 80a0864:	4298      	cmp	r0, r3
 80a0866:	d9f3      	bls.n	80a0850 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
        _client.stop();
 80a0868:	4620      	mov	r0, r4
 80a086a:	f002 fc8d 	bl	80a3188 <_ZN9TCPClient4stopEv>
 80a086e:	e034      	b.n	80a08da <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1aa>
            result = _client.connect(this->ip, this->port);
 80a0870:	a802      	add	r0, sp, #8
 80a0872:	f000 ff29 	bl	80a16c8 <_ZN9IPAddressC1EPKh>
 80a0876:	462b      	mov	r3, r5
 80a0878:	4620      	mov	r0, r4
 80a087a:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a087e:	a902      	add	r1, sp, #8
 80a0880:	f002 fbd8 	bl	80a3034 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0884:	e774      	b.n	80a0770 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a0886:	4b1a      	ldr	r3, [pc, #104]	; (80a08f0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
 80a0888:	f10d 0c08 	add.w	ip, sp, #8
 80a088c:	6818      	ldr	r0, [r3, #0]
 80a088e:	6859      	ldr	r1, [r3, #4]
 80a0890:	7a1b      	ldrb	r3, [r3, #8]
 80a0892:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80a0896:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80a089a:	ab02      	add	r3, sp, #8
 80a089c:	cb03      	ldmia	r3!, {r0, r1}
 80a089e:	f8c2 0005 	str.w	r0, [r2, #5]
 80a08a2:	f8c2 1009 	str.w	r1, [r2, #9]
 80a08a6:	f89c 3000 	ldrb.w	r3, [ip]
 80a08aa:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
 80a08ac:	230e      	movs	r3, #14
 80a08ae:	e77c      	b.n	80a07aa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
 80a08b0:	2002      	movs	r0, #2
 80a08b2:	e787      	b.n	80a07c4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x94>
                    v = v|(0x80>>1);
 80a08b4:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 80a08b8:	e78e      	b.n	80a07d8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa8>
            uint16_t len = readPacket(&llen);
 80a08ba:	4620      	mov	r0, r4
 80a08bc:	a902      	add	r1, sp, #8
 80a08be:	f7ff fe71 	bl	80a05a4 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
 80a08c2:	2804      	cmp	r0, #4
 80a08c4:	d1d0      	bne.n	80a0868 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
                if (buffer[3] == CONN_ACCEPT) {
 80a08c6:	69e3      	ldr	r3, [r4, #28]
 80a08c8:	78de      	ldrb	r6, [r3, #3]
 80a08ca:	2e00      	cmp	r6, #0
 80a08cc:	d1cc      	bne.n	80a0868 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
 80a08ce:	f000 fbd7 	bl	80a1080 <HAL_Timer_Get_Milli_Seconds>
                    return true;
 80a08d2:	2501      	movs	r5, #1
                    lastInActivity = millis();
 80a08d4:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
 80a08d6:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
 80a08da:	a801      	add	r0, sp, #4
 80a08dc:	f7ff fdf7 	bl	80a04ce <_ZN4MQTT11MutexLockerD1Ev>
}
 80a08e0:	4628      	mov	r0, r5
 80a08e2:	b008      	add	sp, #32
 80a08e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
 80a08e8:	2500      	movs	r5, #0
 80a08ea:	e7f9      	b.n	80a08e0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b0>
 80a08ec:	080a4c24 	.word	0x080a4c24
 80a08f0:	080a4c2b 	.word	0x080a4c2b

080a08f4 <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
 80a08f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
 80a08f6:	2301      	movs	r3, #1
 80a08f8:	2204      	movs	r2, #4
 80a08fa:	e9cd 3204 	strd	r3, r2, [sp, #16]
 80a08fe:	2300      	movs	r3, #0
 80a0900:	461a      	mov	r2, r3
 80a0902:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80a0906:	e9cd 3300 	strd	r3, r3, [sp]
 80a090a:	f7ff ff11 	bl	80a0730 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
 80a090e:	b007      	add	sp, #28
 80a0910:	f85d fb04 	ldr.w	pc, [sp], #4

080a0914 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a0914:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0918:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80a091c:	4604      	mov	r4, r0
 80a091e:	468b      	mov	fp, r1
 80a0920:	4616      	mov	r6, r2
 80a0922:	461f      	mov	r7, r3
 80a0924:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80a0928:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
    if (isConnected()) {
 80a092c:	f7ff fef1 	bl	80a0712 <_ZN4MQTT11isConnectedEv>
 80a0930:	4682      	mov	sl, r0
 80a0932:	2800      	cmp	r0, #0
 80a0934:	d051      	beq.n	80a09da <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
 80a0936:	4621      	mov	r1, r4
 80a0938:	a801      	add	r0, sp, #4
 80a093a:	f7ff fdbd 	bl	80a04b8 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
 80a093e:	2100      	movs	r1, #0
 80a0940:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
 80a0944:	69e0      	ldr	r0, [r4, #28]
 80a0946:	f003 ff95 	bl	80a4874 <memset>
        length = writeString(topic, buffer, length);
 80a094a:	2305      	movs	r3, #5
 80a094c:	4659      	mov	r1, fp
 80a094e:	4620      	mov	r0, r4
 80a0950:	69e2      	ldr	r2, [r4, #28]
 80a0952:	f7ff fec4 	bl	80a06de <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
 80a0956:	1e6b      	subs	r3, r5, #1
 80a0958:	2b01      	cmp	r3, #1
 80a095a:	d815      	bhi.n	80a0988 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
 80a095c:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a095e:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
 80a0960:	3101      	adds	r1, #1
 80a0962:	b289      	uxth	r1, r1
 80a0964:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a0966:	1209      	asrs	r1, r1, #8
 80a0968:	5419      	strb	r1, [r3, r0]
 80a096a:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
 80a096c:	69e3      	ldr	r3, [r4, #28]
 80a096e:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a0970:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
 80a0972:	3002      	adds	r0, #2
 80a0974:	b280      	uxth	r0, r0
 80a0976:	5499      	strb	r1, [r3, r2]
            if (messageid != NULL)
 80a0978:	f1b8 0f00 	cmp.w	r8, #0
 80a097c:	d004      	beq.n	80a0988 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
 80a097e:	8c23      	ldrh	r3, [r4, #32]
 80a0980:	1c5a      	adds	r2, r3, #1
 80a0982:	8422      	strh	r2, [r4, #32]
 80a0984:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a0988:	2100      	movs	r1, #0
 80a098a:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a098c:	428f      	cmp	r7, r1
 80a098e:	69e2      	ldr	r2, [r4, #28]
 80a0990:	b29b      	uxth	r3, r3
 80a0992:	d90a      	bls.n	80a09aa <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
 80a0994:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
 80a0998:	459c      	cmp	ip, r3
 80a099a:	d906      	bls.n	80a09aa <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
 80a099c:	f816 c001 	ldrb.w	ip, [r6, r1]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a09a0:	3101      	adds	r1, #1
            buffer[length++] = payload[i];
 80a09a2:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a09a6:	b289      	uxth	r1, r1
 80a09a8:	e7ef      	b.n	80a098a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
 80a09aa:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
 80a09ae:	2900      	cmp	r1, #0
 80a09b0:	bf0c      	ite	eq
 80a09b2:	2130      	moveq	r1, #48	; 0x30
 80a09b4:	2131      	movne	r1, #49	; 0x31
        if (dup) {
 80a09b6:	f1b9 0f00 	cmp.w	r9, #0
 80a09ba:	d001      	beq.n	80a09c0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
 80a09bc:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
 80a09c0:	2d02      	cmp	r5, #2
 80a09c2:	d10e      	bne.n	80a09e2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
 80a09c4:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
 80a09c8:	3b05      	subs	r3, #5
 80a09ca:	4620      	mov	r0, r4
 80a09cc:	b29b      	uxth	r3, r3
 80a09ce:	f7ff fe49 	bl	80a0664 <_ZN4MQTT5writeEhPht>
 80a09d2:	4682      	mov	sl, r0
        MutexLocker lock(this);
 80a09d4:	a801      	add	r0, sp, #4
 80a09d6:	f7ff fd7a 	bl	80a04ce <_ZN4MQTT11MutexLockerD1Ev>
}
 80a09da:	4650      	mov	r0, sl
 80a09dc:	b003      	add	sp, #12
 80a09de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
 80a09e2:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
 80a09e4:	bf08      	it	eq
 80a09e6:	f041 0102 	orreq.w	r1, r1, #2
 80a09ea:	e7ed      	b.n	80a09c8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

080a09ec <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
 80a09ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
 80a09ee:	9c08      	ldr	r4, [sp, #32]
 80a09f0:	9403      	str	r4, [sp, #12]
 80a09f2:	2400      	movs	r4, #0
 80a09f4:	9402      	str	r4, [sp, #8]
 80a09f6:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80a09fa:	9401      	str	r4, [sp, #4]
 80a09fc:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80a0a00:	9400      	str	r4, [sp, #0]
 80a0a02:	f7ff ff87 	bl	80a0914 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
 80a0a06:	b004      	add	sp, #16
 80a0a08:	bd10      	pop	{r4, pc}

080a0a0a <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
 80a0a0a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a0a0c:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a0a0e:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
 80a0a10:	4614      	mov	r4, r2
 80a0a12:	460e      	mov	r6, r1
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a0a14:	f003 ff83 	bl	80a491e <strlen>
 80a0a18:	2200      	movs	r2, #0
 80a0a1a:	4603      	mov	r3, r0
 80a0a1c:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80a0a20:	9200      	str	r2, [sp, #0]
 80a0a22:	4631      	mov	r1, r6
 80a0a24:	4622      	mov	r2, r4
 80a0a26:	4628      	mov	r0, r5
 80a0a28:	f7ff ffe0 	bl	80a09ec <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
 80a0a2c:	b004      	add	sp, #16
 80a0a2e:	bd70      	pop	{r4, r5, r6, pc}

080a0a30 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a0a30:	6803      	ldr	r3, [r0, #0]
 80a0a32:	b2c9      	uxtb	r1, r1
 80a0a34:	689b      	ldr	r3, [r3, #8]
 80a0a36:	4718      	bx	r3

080a0a38 <_ZN7WeatherC1Ev>:
 */

 #include "SparkFun_Photon_Weather_Shield_Library.h"

 //Initialize
 Weather::Weather(){}
 80a0a38:	4770      	bx	lr

080a0a3a <_ZN7Weather7checkIDEv>:
	//Reset user resister
	writeReg(SOFT_RESET);
}

uint8_t Weather::checkID()
{
 80a0a3a:	b508      	push	{r3, lr}
	uint8_t ID_1;

 	// Check device ID
	Wire.beginTransmission(ADDRESS);
 80a0a3c:	f002 ff24 	bl	80a3888 <_Z19__fetch_global_Wirev>
 80a0a40:	2140      	movs	r1, #64	; 0x40
 80a0a42:	f000 fdc9 	bl	80a15d8 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(0xFC);
 80a0a46:	f002 ff1f 	bl	80a3888 <_Z19__fetch_global_Wirev>
 80a0a4a:	21fc      	movs	r1, #252	; 0xfc
 80a0a4c:	f7ff fff0 	bl	80a0a30 <_ZN7TwoWire5writeEi>
	Wire.write(0xC9);
 80a0a50:	f002 ff1a 	bl	80a3888 <_Z19__fetch_global_Wirev>
 80a0a54:	21c9      	movs	r1, #201	; 0xc9
 80a0a56:	f7ff ffeb 	bl	80a0a30 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
 80a0a5a:	f002 ff15 	bl	80a3888 <_Z19__fetch_global_Wirev>
 80a0a5e:	f000 fdc2 	bl	80a15e6 <_ZN7TwoWire15endTransmissionEv>

    Wire.requestFrom(ADDRESS,1);
 80a0a62:	f002 ff11 	bl	80a3888 <_Z19__fetch_global_Wirev>
 80a0a66:	2201      	movs	r2, #1
 80a0a68:	2140      	movs	r1, #64	; 0x40
 80a0a6a:	f000 fdae 	bl	80a15ca <_ZN7TwoWire11requestFromEhj>

    ID_1 = Wire.read();
 80a0a6e:	f002 ff0b 	bl	80a3888 <_Z19__fetch_global_Wirev>
 80a0a72:	6803      	ldr	r3, [r0, #0]
 80a0a74:	695b      	ldr	r3, [r3, #20]
 80a0a76:	4798      	blx	r3

    return(ID_1);
}
 80a0a78:	b2c0      	uxtb	r0, r0
 80a0a7a:	bd08      	pop	{r3, pc}

080a0a7c <_ZN7Weather14makeMeasurmentEh>:

uint16_t Weather::makeMeasurment(uint8_t command)
{
 80a0a7c:	b538      	push	{r3, r4, r5, lr}
	// It can be either temperature or relative humidity
	// TODO: implement checksum checking

	uint16_t nBytes = 3;
	// if we are only reading old temperature, read olny msb and lsb
	if (command == 0xE0) nBytes = 2;
 80a0a7e:	29e0      	cmp	r1, #224	; 0xe0
 80a0a80:	bf14      	ite	ne
 80a0a82:	2503      	movne	r5, #3
 80a0a84:	2502      	moveq	r5, #2
{
 80a0a86:	460c      	mov	r4, r1

	Wire.beginTransmission(ADDRESS);
 80a0a88:	f002 fefe 	bl	80a3888 <_Z19__fetch_global_Wirev>
 80a0a8c:	2140      	movs	r1, #64	; 0x40
 80a0a8e:	f000 fda3 	bl	80a15d8 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(command);
 80a0a92:	f002 fef9 	bl	80a3888 <_Z19__fetch_global_Wirev>
 80a0a96:	6803      	ldr	r3, [r0, #0]
 80a0a98:	4621      	mov	r1, r4
 80a0a9a:	689b      	ldr	r3, [r3, #8]
 80a0a9c:	4798      	blx	r3
	Wire.endTransmission();
 80a0a9e:	f002 fef3 	bl	80a3888 <_Z19__fetch_global_Wirev>
 80a0aa2:	f000 fda0 	bl	80a15e6 <_ZN7TwoWire15endTransmissionEv>
	// When not using clock stretching (*_NOHOLD commands) delay here
	// is needed to wait for the measurement.
	// According to datasheet the max. conversion time is ~22ms
	 delay(100);
 80a0aa6:	2064      	movs	r0, #100	; 0x64
 80a0aa8:	f000 fd02 	bl	80a14b0 <delay>

	Wire.requestFrom(ADDRESS,nBytes);
 80a0aac:	f002 feec 	bl	80a3888 <_Z19__fetch_global_Wirev>
 80a0ab0:	462a      	mov	r2, r5
 80a0ab2:	2140      	movs	r1, #64	; 0x40
 80a0ab4:	f000 fd89 	bl	80a15ca <_ZN7TwoWire11requestFromEhj>
 80a0ab8:	2465      	movs	r4, #101	; 0x65
	//Wait for data
	int counter = 0;
	while (Wire.available() < nBytes){
 80a0aba:	f002 fee5 	bl	80a3888 <_Z19__fetch_global_Wirev>
 80a0abe:	6803      	ldr	r3, [r0, #0]
 80a0ac0:	691b      	ldr	r3, [r3, #16]
 80a0ac2:	4798      	blx	r3
 80a0ac4:	42a8      	cmp	r0, r5
 80a0ac6:	da06      	bge.n	80a0ad6 <_ZN7Weather14makeMeasurmentEh+0x5a>
	  delay(1);
 80a0ac8:	2001      	movs	r0, #1
 80a0aca:	f000 fcf1 	bl	80a14b0 <delay>
	  counter ++;
	  if (counter >100){
 80a0ace:	3c01      	subs	r4, #1
 80a0ad0:	d1f3      	bne.n	80a0aba <_ZN7Weather14makeMeasurmentEh+0x3e>
	    // Timeout: Sensor did not return any data
	    return 100;
 80a0ad2:	2064      	movs	r0, #100	; 0x64
 80a0ad4:	e00f      	b.n	80a0af6 <_ZN7Weather14makeMeasurmentEh+0x7a>
	  }
	}

	unsigned int msb = Wire.read();
 80a0ad6:	f002 fed7 	bl	80a3888 <_Z19__fetch_global_Wirev>
 80a0ada:	6803      	ldr	r3, [r0, #0]
 80a0adc:	695b      	ldr	r3, [r3, #20]
 80a0ade:	4798      	blx	r3
 80a0ae0:	4604      	mov	r4, r0
	unsigned int lsb = Wire.read();
 80a0ae2:	f002 fed1 	bl	80a3888 <_Z19__fetch_global_Wirev>
 80a0ae6:	6803      	ldr	r3, [r0, #0]
 80a0ae8:	695b      	ldr	r3, [r3, #20]
 80a0aea:	4798      	blx	r3
	// Clear the last to bits of LSB to 00.
	// According to datasheet LSB of RH is always xxxxxx10
	lsb &= 0xFC;
 80a0aec:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
	unsigned int mesurment = msb << 8 | lsb;
 80a0af0:	ea40 2004 	orr.w	r0, r0, r4, lsl #8

	return mesurment;
 80a0af4:	b280      	uxth	r0, r0
}
 80a0af6:	bd38      	pop	{r3, r4, r5, pc}

080a0af8 <_ZN7Weather5getRHEv>:
{
 80a0af8:	b508      	push	{r3, lr}
	uint16_t RH_Code = makeMeasurment(HUMD_MEASURE_NOHOLD);
 80a0afa:	21f5      	movs	r1, #245	; 0xf5
 80a0afc:	f7ff ffbe 	bl	80a0a7c <_ZN7Weather14makeMeasurmentEh>
	float result = (125.0*RH_Code/65536)-6;
 80a0b00:	f003 f960 	bl	80a3dc4 <__aeabi_i2d>
 80a0b04:	2200      	movs	r2, #0
 80a0b06:	4b07      	ldr	r3, [pc, #28]	; (80a0b24 <_ZN7Weather5getRHEv+0x2c>)
 80a0b08:	f003 f9c6 	bl	80a3e98 <__aeabi_dmul>
 80a0b0c:	2200      	movs	r2, #0
 80a0b0e:	4b06      	ldr	r3, [pc, #24]	; (80a0b28 <_ZN7Weather5getRHEv+0x30>)
 80a0b10:	f003 f9c2 	bl	80a3e98 <__aeabi_dmul>
 80a0b14:	2200      	movs	r2, #0
 80a0b16:	4b05      	ldr	r3, [pc, #20]	; (80a0b2c <_ZN7Weather5getRHEv+0x34>)
 80a0b18:	f003 f806 	bl	80a3b28 <__aeabi_dsub>
 80a0b1c:	f003 fbce 	bl	80a42bc <__aeabi_d2f>
}
 80a0b20:	bd08      	pop	{r3, pc}
 80a0b22:	bf00      	nop
 80a0b24:	405f4000 	.word	0x405f4000
 80a0b28:	3ef00000 	.word	0x3ef00000
 80a0b2c:	40180000 	.word	0x40180000

080a0b30 <_ZN7Weather7getTempEv>:
{
 80a0b30:	b508      	push	{r3, lr}
	uint16_t temp_Code = makeMeasurment(TEMP_MEASURE_NOHOLD);
 80a0b32:	21f3      	movs	r1, #243	; 0xf3
 80a0b34:	f7ff ffa2 	bl	80a0a7c <_ZN7Weather14makeMeasurmentEh>
	float result = (175.72*temp_Code/65536)-46.85;
 80a0b38:	f003 f944 	bl	80a3dc4 <__aeabi_i2d>
 80a0b3c:	a308      	add	r3, pc, #32	; (adr r3, 80a0b60 <_ZN7Weather7getTempEv+0x30>)
 80a0b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0b42:	f003 f9a9 	bl	80a3e98 <__aeabi_dmul>
 80a0b46:	2200      	movs	r2, #0
 80a0b48:	4b09      	ldr	r3, [pc, #36]	; (80a0b70 <_ZN7Weather7getTempEv+0x40>)
 80a0b4a:	f003 f9a5 	bl	80a3e98 <__aeabi_dmul>
 80a0b4e:	a306      	add	r3, pc, #24	; (adr r3, 80a0b68 <_ZN7Weather7getTempEv+0x38>)
 80a0b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0b54:	f002 ffe8 	bl	80a3b28 <__aeabi_dsub>
 80a0b58:	f003 fbb0 	bl	80a42bc <__aeabi_d2f>
}
 80a0b5c:	bd08      	pop	{r3, pc}
 80a0b5e:	bf00      	nop
 80a0b60:	3d70a3d7 	.word	0x3d70a3d7
 80a0b64:	4065f70a 	.word	0x4065f70a
 80a0b68:	cccccccd 	.word	0xcccccccd
 80a0b6c:	40476ccc 	.word	0x40476ccc
 80a0b70:	3ef00000 	.word	0x3ef00000
 80a0b74:	00000000 	.word	0x00000000

080a0b78 <_ZN7Weather8getTempFEv>:
{
 80a0b78:	b508      	push	{r3, lr}
  return((getTemp() * 1.8) + 32.0); // Convert celsius to fahrenheit
 80a0b7a:	f7ff ffd9 	bl	80a0b30 <_ZN7Weather7getTempEv>
 80a0b7e:	f003 f933 	bl	80a3de8 <__aeabi_f2d>
 80a0b82:	a307      	add	r3, pc, #28	; (adr r3, 80a0ba0 <_ZN7Weather8getTempFEv+0x28>)
 80a0b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0b88:	f003 f986 	bl	80a3e98 <__aeabi_dmul>
 80a0b8c:	2200      	movs	r2, #0
 80a0b8e:	4b06      	ldr	r3, [pc, #24]	; (80a0ba8 <_ZN7Weather8getTempFEv+0x30>)
 80a0b90:	f002 ffcc 	bl	80a3b2c <__adddf3>
 80a0b94:	f003 fb92 	bl	80a42bc <__aeabi_d2f>
}
 80a0b98:	bd08      	pop	{r3, pc}
 80a0b9a:	bf00      	nop
 80a0b9c:	f3af 8000 	nop.w
 80a0ba0:	cccccccd 	.word	0xcccccccd
 80a0ba4:	3ffccccc 	.word	0x3ffccccc
 80a0ba8:	40400000 	.word	0x40400000

080a0bac <_ZN7Weather8IIC_ReadEh>:
}


// These are the two I2C functions in this sketch.
byte Weather::IIC_Read(byte regAddr)
{
 80a0bac:	b510      	push	{r4, lr}
 80a0bae:	460c      	mov	r4, r1
  // This function reads one byte over IIC
  Wire.beginTransmission(MPL3115A2_ADDRESS);
 80a0bb0:	f002 fe6a 	bl	80a3888 <_Z19__fetch_global_Wirev>
 80a0bb4:	2160      	movs	r1, #96	; 0x60
 80a0bb6:	f000 fd0f 	bl	80a15d8 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(regAddr);  // Address of CTRL_REG1
 80a0bba:	f002 fe65 	bl	80a3888 <_Z19__fetch_global_Wirev>
 80a0bbe:	6803      	ldr	r3, [r0, #0]
 80a0bc0:	4621      	mov	r1, r4
 80a0bc2:	689b      	ldr	r3, [r3, #8]
 80a0bc4:	4798      	blx	r3
  Wire.endTransmission(false); // Send data to I2C dev with option for a repeated start. THIS IS NECESSARY and not supported before Arduino V1.0.1!
 80a0bc6:	f002 fe5f 	bl	80a3888 <_Z19__fetch_global_Wirev>
 80a0bca:	2100      	movs	r1, #0
 80a0bcc:	f000 fd07 	bl	80a15de <_ZN7TwoWire15endTransmissionEh>
  Wire.requestFrom(MPL3115A2_ADDRESS, 1); // Request the data...
 80a0bd0:	f002 fe5a 	bl	80a3888 <_Z19__fetch_global_Wirev>
 80a0bd4:	2201      	movs	r2, #1
 80a0bd6:	2160      	movs	r1, #96	; 0x60
 80a0bd8:	f000 fcf7 	bl	80a15ca <_ZN7TwoWire11requestFromEhj>
  return Wire.read();
 80a0bdc:	f002 fe54 	bl	80a3888 <_Z19__fetch_global_Wirev>
 80a0be0:	6803      	ldr	r3, [r0, #0]
 80a0be2:	695b      	ldr	r3, [r3, #20]
 80a0be4:	4798      	blx	r3
}
 80a0be6:	b2c0      	uxtb	r0, r0
 80a0be8:	bd10      	pop	{r4, pc}
	...

080a0bec <_ZN7Weather5beginEv>:
{
 80a0bec:	b538      	push	{r3, r4, r5, lr}
 80a0bee:	4605      	mov	r5, r0
  Wire.begin();
 80a0bf0:	f002 fe4a 	bl	80a3888 <_Z19__fetch_global_Wirev>
 80a0bf4:	f000 fcba 	bl	80a156c <_ZN7TwoWire5beginEv>
  uint8_t ID_Barro = IIC_Read(WHO_AM_I );
 80a0bf8:	210c      	movs	r1, #12
 80a0bfa:	4628      	mov	r0, r5
 80a0bfc:	f7ff ffd6 	bl	80a0bac <_ZN7Weather8IIC_ReadEh>
 80a0c00:	4604      	mov	r4, r0
  uint8_t ID_Temp_Hum = checkID();
 80a0c02:	4628      	mov	r0, r5
 80a0c04:	f7ff ff19 	bl	80a0a3a <_ZN7Weather7checkIDEv>
  if(ID_Temp_Hum == 0x15)//Ping CheckID register
 80a0c08:	2815      	cmp	r0, #21
 80a0c0a:	d018      	beq.n	80a0c3e <_ZN7Weather5beginEv+0x52>
  else if(ID_Temp_Hum == 0x32)
 80a0c0c:	2832      	cmp	r0, #50	; 0x32
 80a0c0e:	d124      	bne.n	80a0c5a <_ZN7Weather5beginEv+0x6e>
  if(x == 1 && y == 1)
 80a0c10:	2cc4      	cmp	r4, #196	; 0xc4
 80a0c12:	d003      	beq.n	80a0c1c <_ZN7Weather5beginEv+0x30>
    Serial.println("MPL3115A2 NOT Found");
 80a0c14:	f002 fcb0 	bl	80a3578 <_Z16_fetch_usbserialv>
 80a0c18:	4915      	ldr	r1, [pc, #84]	; (80a0c70 <_ZN7Weather5beginEv+0x84>)
 80a0c1a:	e002      	b.n	80a0c22 <_ZN7Weather5beginEv+0x36>
    Serial.println("MPL3115A2 Found");
 80a0c1c:	f002 fcac 	bl	80a3578 <_Z16_fetch_usbserialv>
 80a0c20:	4914      	ldr	r1, [pc, #80]	; (80a0c74 <_ZN7Weather5beginEv+0x88>)
    Serial.println("MPL3115A2 NOT Found");
 80a0c22:	f002 f80e 	bl	80a2c42 <_ZN5Print7printlnEPKc>
    Serial.println("HTU21D Found");
 80a0c26:	f002 fca7 	bl	80a3578 <_Z16_fetch_usbserialv>
 80a0c2a:	4913      	ldr	r1, [pc, #76]	; (80a0c78 <_ZN7Weather5beginEv+0x8c>)
 80a0c2c:	e011      	b.n	80a0c52 <_ZN7Weather5beginEv+0x66>
    Serial.println("MPL3115A2 NOT Found");
 80a0c2e:	f002 fca3 	bl	80a3578 <_Z16_fetch_usbserialv>
 80a0c32:	490f      	ldr	r1, [pc, #60]	; (80a0c70 <_ZN7Weather5beginEv+0x84>)
 80a0c34:	e008      	b.n	80a0c48 <_ZN7Weather5beginEv+0x5c>
  	Serial.println("No Devices Detected");
 80a0c36:	f002 fc9f 	bl	80a3578 <_Z16_fetch_usbserialv>
 80a0c3a:	4910      	ldr	r1, [pc, #64]	; (80a0c7c <_ZN7Weather5beginEv+0x90>)
 80a0c3c:	e009      	b.n	80a0c52 <_ZN7Weather5beginEv+0x66>
  if(x == 1 && y == 1)
 80a0c3e:	2cc4      	cmp	r4, #196	; 0xc4
 80a0c40:	d1f5      	bne.n	80a0c2e <_ZN7Weather5beginEv+0x42>
    Serial.println("MPL3115A2 Found");
 80a0c42:	f002 fc99 	bl	80a3578 <_Z16_fetch_usbserialv>
 80a0c46:	490b      	ldr	r1, [pc, #44]	; (80a0c74 <_ZN7Weather5beginEv+0x88>)
    Serial.println("MPL3115A2 NOT Found");
 80a0c48:	f001 fffb 	bl	80a2c42 <_ZN5Print7printlnEPKc>
    Serial.println("Si7021 Found");
 80a0c4c:	f002 fc94 	bl	80a3578 <_Z16_fetch_usbserialv>
 80a0c50:	490b      	ldr	r1, [pc, #44]	; (80a0c80 <_ZN7Weather5beginEv+0x94>)
}
 80a0c52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  	Serial.println("No Devices Detected");
 80a0c56:	f001 bff4 	b.w	80a2c42 <_ZN5Print7printlnEPKc>
  if(x == 1 && y == 1)
 80a0c5a:	2cc4      	cmp	r4, #196	; 0xc4
 80a0c5c:	d1eb      	bne.n	80a0c36 <_ZN7Weather5beginEv+0x4a>
    Serial.println("MPL3115A2 Found");
 80a0c5e:	f002 fc8b 	bl	80a3578 <_Z16_fetch_usbserialv>
 80a0c62:	4904      	ldr	r1, [pc, #16]	; (80a0c74 <_ZN7Weather5beginEv+0x88>)
 80a0c64:	f001 ffed 	bl	80a2c42 <_ZN5Print7printlnEPKc>
    Serial.println("No Temp/Humidity Device Detected");
 80a0c68:	f002 fc86 	bl	80a3578 <_Z16_fetch_usbserialv>
 80a0c6c:	4905      	ldr	r1, [pc, #20]	; (80a0c84 <_ZN7Weather5beginEv+0x98>)
 80a0c6e:	e7f0      	b.n	80a0c52 <_ZN7Weather5beginEv+0x66>
 80a0c70:	080a4c5e 	.word	0x080a4c5e
 80a0c74:	080a4c34 	.word	0x080a4c34
 80a0c78:	080a4c51 	.word	0x080a4c51
 80a0c7c:	080a4c93 	.word	0x080a4c93
 80a0c80:	080a4c44 	.word	0x080a4c44
 80a0c84:	080a4c72 	.word	0x080a4c72

080a0c88 <_ZN7Weather9IIC_WriteEhh>:

void Weather::IIC_Write(byte regAddr, byte value)
{
 80a0c88:	b538      	push	{r3, r4, r5, lr}
 80a0c8a:	4614      	mov	r4, r2
 80a0c8c:	460d      	mov	r5, r1
  // This function writes one byte over IIC
  Wire.beginTransmission(MPL3115A2_ADDRESS);
 80a0c8e:	f002 fdfb 	bl	80a3888 <_Z19__fetch_global_Wirev>
 80a0c92:	2160      	movs	r1, #96	; 0x60
 80a0c94:	f000 fca0 	bl	80a15d8 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(regAddr);
 80a0c98:	f002 fdf6 	bl	80a3888 <_Z19__fetch_global_Wirev>
 80a0c9c:	6803      	ldr	r3, [r0, #0]
 80a0c9e:	4629      	mov	r1, r5
 80a0ca0:	689b      	ldr	r3, [r3, #8]
 80a0ca2:	4798      	blx	r3
  Wire.write(value);
 80a0ca4:	f002 fdf0 	bl	80a3888 <_Z19__fetch_global_Wirev>
 80a0ca8:	6803      	ldr	r3, [r0, #0]
 80a0caa:	4621      	mov	r1, r4
 80a0cac:	689b      	ldr	r3, [r3, #8]
 80a0cae:	4798      	blx	r3
  Wire.endTransmission(true);
 80a0cb0:	f002 fdea 	bl	80a3888 <_Z19__fetch_global_Wirev>
}
 80a0cb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Wire.endTransmission(true);
 80a0cb8:	2101      	movs	r1, #1
 80a0cba:	f000 bc90 	b.w	80a15de <_ZN7TwoWire15endTransmissionEh>

080a0cbe <_ZN7Weather16setModeBarometerEv>:
{
 80a0cbe:	b510      	push	{r4, lr}
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
 80a0cc0:	2126      	movs	r1, #38	; 0x26
{
 80a0cc2:	4604      	mov	r4, r0
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
 80a0cc4:	f7ff ff72 	bl	80a0bac <_ZN7Weather8IIC_ReadEh>
  IIC_Write(CTRL_REG1, tempSetting);
 80a0cc8:	2126      	movs	r1, #38	; 0x26
 80a0cca:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80a0cce:	4620      	mov	r0, r4
}
 80a0cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IIC_Write(CTRL_REG1, tempSetting);
 80a0cd4:	f7ff bfd8 	b.w	80a0c88 <_ZN7Weather9IIC_WriteEhh>

080a0cd8 <_ZN7Weather17setOversampleRateEh>:
  if(sampleRate > 7) sampleRate = 7; //OS cannot be larger than 0b.0111
 80a0cd8:	2907      	cmp	r1, #7
 80a0cda:	bf28      	it	cs
 80a0cdc:	2107      	movcs	r1, #7
{
 80a0cde:	b538      	push	{r3, r4, r5, lr}
 80a0ce0:	460d      	mov	r5, r1
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
 80a0ce2:	2126      	movs	r1, #38	; 0x26
{
 80a0ce4:	4604      	mov	r4, r0
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
 80a0ce6:	f7ff ff61 	bl	80a0bac <_ZN7Weather8IIC_ReadEh>
  tempSetting &= 0b11000111; //Clear out old OS bits
 80a0cea:	f000 02c7 	and.w	r2, r0, #199	; 0xc7
  tempSetting |= sampleRate; //Mask in new OS bits
 80a0cee:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
  IIC_Write(CTRL_REG1, tempSetting);
 80a0cf2:	4620      	mov	r0, r4
}
 80a0cf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IIC_Write(CTRL_REG1, tempSetting);
 80a0cf8:	2126      	movs	r1, #38	; 0x26
 80a0cfa:	b2d2      	uxtb	r2, r2
 80a0cfc:	f7ff bfc4 	b.w	80a0c88 <_ZN7Weather9IIC_WriteEhh>

080a0d00 <_ZN7Weather16enableEventFlagsEv>:
  IIC_Write(PT_DATA_CFG, 0x07); // Enable all three pressure and temp event flags
 80a0d00:	2207      	movs	r2, #7
 80a0d02:	2113      	movs	r1, #19
 80a0d04:	f7ff bfc0 	b.w	80a0c88 <_ZN7Weather9IIC_WriteEhh>

080a0d08 <_ZN7Weather13toggleOneShotEv>:
{
 80a0d08:	b510      	push	{r4, lr}
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
 80a0d0a:	2126      	movs	r1, #38	; 0x26
{
 80a0d0c:	4604      	mov	r4, r0
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
 80a0d0e:	f7ff ff4d 	bl	80a0bac <_ZN7Weather8IIC_ReadEh>
  IIC_Write(CTRL_REG1, tempSetting);
 80a0d12:	2126      	movs	r1, #38	; 0x26
 80a0d14:	f000 02fd 	and.w	r2, r0, #253	; 0xfd
 80a0d18:	4620      	mov	r0, r4
 80a0d1a:	f7ff ffb5 	bl	80a0c88 <_ZN7Weather9IIC_WriteEhh>
  tempSetting = IIC_Read(CTRL_REG1); //Read current settings to be safe
 80a0d1e:	2126      	movs	r1, #38	; 0x26
 80a0d20:	4620      	mov	r0, r4
 80a0d22:	f7ff ff43 	bl	80a0bac <_ZN7Weather8IIC_ReadEh>
  tempSetting |= (1<<1); //Set OST bit
 80a0d26:	f040 0202 	orr.w	r2, r0, #2
  IIC_Write(CTRL_REG1, tempSetting);
 80a0d2a:	2126      	movs	r1, #38	; 0x26
 80a0d2c:	4620      	mov	r0, r4
}
 80a0d2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IIC_Write(CTRL_REG1, tempSetting);
 80a0d32:	b2d2      	uxtb	r2, r2
 80a0d34:	f7ff bfa8 	b.w	80a0c88 <_ZN7Weather9IIC_WriteEhh>

080a0d38 <_ZN7Weather12readPressureEv>:
{
 80a0d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0d3c:	4680      	mov	r8, r0
	if(IIC_Read(STATUS) & (1<<2) == 0) toggleOneShot(); //Toggle the OST bit causing the sensor to immediately take another reading
 80a0d3e:	2100      	movs	r1, #0
 80a0d40:	f7ff ff34 	bl	80a0bac <_ZN7Weather8IIC_ReadEh>
	while(IIC_Read(STATUS) & (1<<2) == 0)
 80a0d44:	2100      	movs	r1, #0
 80a0d46:	4640      	mov	r0, r8
 80a0d48:	f7ff ff30 	bl	80a0bac <_ZN7Weather8IIC_ReadEh>
	Wire.beginTransmission(MPL3115A2_ADDRESS);
 80a0d4c:	f002 fd9c 	bl	80a3888 <_Z19__fetch_global_Wirev>
 80a0d50:	2160      	movs	r1, #96	; 0x60
 80a0d52:	f000 fc41 	bl	80a15d8 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(OUT_P_MSB);  // Address of data to get
 80a0d56:	f002 fd97 	bl	80a3888 <_Z19__fetch_global_Wirev>
 80a0d5a:	2101      	movs	r1, #1
 80a0d5c:	f7ff fe68 	bl	80a0a30 <_ZN7TwoWire5writeEi>
	Wire.endTransmission(false); // Send data to I2C dev with option for a repeated start. THIS IS NECESSARY and not supported before Arduino V1.0.1!
 80a0d60:	f002 fd92 	bl	80a3888 <_Z19__fetch_global_Wirev>
 80a0d64:	2100      	movs	r1, #0
 80a0d66:	f000 fc3a 	bl	80a15de <_ZN7TwoWire15endTransmissionEh>
	if (Wire.requestFrom(MPL3115A2_ADDRESS, 3) != 3) { // Request three bytes
 80a0d6a:	f002 fd8d 	bl	80a3888 <_Z19__fetch_global_Wirev>
 80a0d6e:	2203      	movs	r2, #3
 80a0d70:	2160      	movs	r1, #96	; 0x60
 80a0d72:	f000 fc2a 	bl	80a15ca <_ZN7TwoWire11requestFromEhj>
 80a0d76:	2803      	cmp	r0, #3
 80a0d78:	d12d      	bne.n	80a0dd6 <_ZN7Weather12readPressureEv+0x9e>
	msb = Wire.read();
 80a0d7a:	f002 fd85 	bl	80a3888 <_Z19__fetch_global_Wirev>
 80a0d7e:	6803      	ldr	r3, [r0, #0]
 80a0d80:	695b      	ldr	r3, [r3, #20]
 80a0d82:	4798      	blx	r3
 80a0d84:	4604      	mov	r4, r0
	csb = Wire.read();
 80a0d86:	f002 fd7f 	bl	80a3888 <_Z19__fetch_global_Wirev>
 80a0d8a:	6803      	ldr	r3, [r0, #0]
	long pressure_whole = (long)msb<<16 | (long)csb<<8 | (long)lsb;
 80a0d8c:	0424      	lsls	r4, r4, #16
	csb = Wire.read();
 80a0d8e:	695b      	ldr	r3, [r3, #20]
 80a0d90:	4798      	blx	r3
 80a0d92:	4606      	mov	r6, r0
	lsb = Wire.read();
 80a0d94:	f002 fd78 	bl	80a3888 <_Z19__fetch_global_Wirev>
 80a0d98:	6803      	ldr	r3, [r0, #0]
	long pressure_whole = (long)msb<<16 | (long)csb<<8 | (long)lsb;
 80a0d9a:	0236      	lsls	r6, r6, #8
	lsb = Wire.read();
 80a0d9c:	695b      	ldr	r3, [r3, #20]
 80a0d9e:	4798      	blx	r3
 80a0da0:	b2c7      	uxtb	r7, r0
	toggleOneShot(); //Toggle the OST bit causing the sensor to immediately take another reading
 80a0da2:	4640      	mov	r0, r8
 80a0da4:	f7ff ffb0 	bl	80a0d08 <_ZN7Weather13toggleOneShotEv>
	float pressure_decimal = (float)lsb/4.0; //Turn it into fraction
 80a0da8:	f3c7 1001 	ubfx	r0, r7, #4, #2
 80a0dac:	f003 fb8c 	bl	80a44c8 <__aeabi_ui2f>
 80a0db0:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80a0db4:	f003 fbe0 	bl	80a4578 <__aeabi_fmul>
	long pressure_whole = (long)msb<<16 | (long)csb<<8 | (long)lsb;
 80a0db8:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 80a0dbc:	b2b6      	uxth	r6, r6
 80a0dbe:	4334      	orrs	r4, r6
 80a0dc0:	433c      	orrs	r4, r7
	float pressure_decimal = (float)lsb/4.0; //Turn it into fraction
 80a0dc2:	4605      	mov	r5, r0
	float pressure = (float)pressure_whole + pressure_decimal;
 80a0dc4:	09a0      	lsrs	r0, r4, #6
 80a0dc6:	f003 fb83 	bl	80a44d0 <__aeabi_i2f>
 80a0dca:	4601      	mov	r1, r0
 80a0dcc:	4628      	mov	r0, r5
 80a0dce:	f003 facb 	bl	80a4368 <__addsf3>
}
 80a0dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -999;
 80a0dd6:	4801      	ldr	r0, [pc, #4]	; (80a0ddc <_ZN7Weather12readPressureEv+0xa4>)
 80a0dd8:	e7fb      	b.n	80a0dd2 <_ZN7Weather12readPressureEv+0x9a>
 80a0dda:	bf00      	nop
 80a0ddc:	c479c000 	.word	0xc479c000

080a0de0 <_ZN7Weather12readBaroTempEv>:
{
 80a0de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(IIC_Read(STATUS) & (1<<1) == 0) toggleOneShot(); //Toggle the OST bit causing the sensor to immediately take another reading
 80a0de2:	2100      	movs	r1, #0
{
 80a0de4:	4606      	mov	r6, r0
	if(IIC_Read(STATUS) & (1<<1) == 0) toggleOneShot(); //Toggle the OST bit causing the sensor to immediately take another reading
 80a0de6:	f240 2459 	movw	r4, #601	; 0x259
 80a0dea:	f7ff fedf 	bl	80a0bac <_ZN7Weather8IIC_ReadEh>
	while( (IIC_Read(STATUS) & (1<<1)) == 0)
 80a0dee:	2100      	movs	r1, #0
 80a0df0:	4630      	mov	r0, r6
 80a0df2:	f7ff fedb 	bl	80a0bac <_ZN7Weather8IIC_ReadEh>
 80a0df6:	0782      	lsls	r2, r0, #30
 80a0df8:	d407      	bmi.n	80a0e0a <_ZN7Weather12readBaroTempEv+0x2a>
		if(++counter > 600) return(-999); //Error out after max of 512ms for a read
 80a0dfa:	3c01      	subs	r4, #1
 80a0dfc:	d101      	bne.n	80a0e02 <_ZN7Weather12readBaroTempEv+0x22>
 80a0dfe:	4829      	ldr	r0, [pc, #164]	; (80a0ea4 <_ZN7Weather12readBaroTempEv+0xc4>)
}
 80a0e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		delay(1);
 80a0e02:	2001      	movs	r0, #1
 80a0e04:	f000 fb54 	bl	80a14b0 <delay>
	while( (IIC_Read(STATUS) & (1<<1)) == 0)
 80a0e08:	e7f1      	b.n	80a0dee <_ZN7Weather12readBaroTempEv+0xe>
	Wire.beginTransmission(MPL3115A2_ADDRESS);
 80a0e0a:	f002 fd3d 	bl	80a3888 <_Z19__fetch_global_Wirev>
 80a0e0e:	2160      	movs	r1, #96	; 0x60
 80a0e10:	f000 fbe2 	bl	80a15d8 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(OUT_T_MSB);  // Address of data to get
 80a0e14:	f002 fd38 	bl	80a3888 <_Z19__fetch_global_Wirev>
 80a0e18:	2104      	movs	r1, #4
 80a0e1a:	f7ff fe09 	bl	80a0a30 <_ZN7TwoWire5writeEi>
	Wire.endTransmission(false); // Send data to I2C dev with option for a repeated start. THIS IS NECESSARY and not supported before Arduino V1.0.1!
 80a0e1e:	f002 fd33 	bl	80a3888 <_Z19__fetch_global_Wirev>
 80a0e22:	2100      	movs	r1, #0
 80a0e24:	f000 fbdb 	bl	80a15de <_ZN7TwoWire15endTransmissionEh>
	if (Wire.requestFrom(MPL3115A2_ADDRESS, 2) != 2) { // Request two bytes
 80a0e28:	f002 fd2e 	bl	80a3888 <_Z19__fetch_global_Wirev>
 80a0e2c:	2202      	movs	r2, #2
 80a0e2e:	2160      	movs	r1, #96	; 0x60
 80a0e30:	f000 fbcb 	bl	80a15ca <_ZN7TwoWire11requestFromEhj>
 80a0e34:	2802      	cmp	r0, #2
 80a0e36:	d1e2      	bne.n	80a0dfe <_ZN7Weather12readBaroTempEv+0x1e>
	msb = Wire.read();
 80a0e38:	f002 fd26 	bl	80a3888 <_Z19__fetch_global_Wirev>
 80a0e3c:	6803      	ldr	r3, [r0, #0]
 80a0e3e:	695b      	ldr	r3, [r3, #20]
 80a0e40:	4798      	blx	r3
 80a0e42:	b2c7      	uxtb	r7, r0
 80a0e44:	4605      	mov	r5, r0
	lsb = Wire.read();
 80a0e46:	f002 fd1f 	bl	80a3888 <_Z19__fetch_global_Wirev>
 80a0e4a:	6803      	ldr	r3, [r0, #0]
 80a0e4c:	695b      	ldr	r3, [r3, #20]
 80a0e4e:	4798      	blx	r3
 80a0e50:	b2c4      	uxtb	r4, r0
	toggleOneShot(); //Toggle the OST bit causing the sensor to immediately take another reading
 80a0e52:	4630      	mov	r0, r6
 80a0e54:	f7ff ff58 	bl	80a0d08 <_ZN7Weather13toggleOneShotEv>
	if(msb > 0x7F)
 80a0e58:	062b      	lsls	r3, r5, #24
        foo = ~((msb << 8) + lsb) + 1;  //2’s complement
 80a0e5a:	bf41      	itttt	mi
 80a0e5c:	eb04 2407 	addmi.w	r4, r4, r7, lsl #8
 80a0e60:	4264      	negmi	r4, r4
        msb = foo >> 8;
 80a0e62:	f3c4 2707 	ubfxmi	r7, r4, #8, #8
        lsb = foo & 0x00F0;
 80a0e66:	f004 04f0 	andmi.w	r4, r4, #240	; 0xf0
	float templsb = (lsb>>4)/16.0; //temp, fraction of a degree
 80a0e6a:	ea4f 1014 	mov.w	r0, r4, lsr #4
        negSign = true;
 80a0e6e:	bf4c      	ite	mi
 80a0e70:	2601      	movmi	r6, #1
    bool negSign = false;
 80a0e72:	2600      	movpl	r6, #0
	float templsb = (lsb>>4)/16.0; //temp, fraction of a degree
 80a0e74:	f002 ffa6 	bl	80a3dc4 <__aeabi_i2d>
 80a0e78:	2200      	movs	r2, #0
 80a0e7a:	4b0b      	ldr	r3, [pc, #44]	; (80a0ea8 <_ZN7Weather12readBaroTempEv+0xc8>)
 80a0e7c:	f003 f80c 	bl	80a3e98 <__aeabi_dmul>
 80a0e80:	f003 fa1c 	bl	80a42bc <__aeabi_d2f>
 80a0e84:	4605      	mov	r5, r0
	float temperature = (float)(msb + templsb);
 80a0e86:	4638      	mov	r0, r7
 80a0e88:	f003 fb22 	bl	80a44d0 <__aeabi_i2f>
 80a0e8c:	4601      	mov	r1, r0
 80a0e8e:	4628      	mov	r0, r5
 80a0e90:	f003 fa6a 	bl	80a4368 <__addsf3>
	if (negSign) temperature = 0 - temperature;
 80a0e94:	2e00      	cmp	r6, #0
 80a0e96:	d0b3      	beq.n	80a0e00 <_ZN7Weather12readBaroTempEv+0x20>
 80a0e98:	4601      	mov	r1, r0
 80a0e9a:	2000      	movs	r0, #0
 80a0e9c:	f003 fa62 	bl	80a4364 <__aeabi_fsub>
 80a0ea0:	e7ae      	b.n	80a0e00 <_ZN7Weather12readBaroTempEv+0x20>
 80a0ea2:	bf00      	nop
 80a0ea4:	c479c000 	.word	0xc479c000
 80a0ea8:	3fb00000 	.word	0x3fb00000

080a0eac <_ZN7Weather13readBaroTempFEv>:
{
 80a0eac:	b508      	push	{r3, lr}
  return((readBaroTemp() * 9.0)/ 5.0 + 32.0); // Convert celsius to fahrenheit
 80a0eae:	f7ff ff97 	bl	80a0de0 <_ZN7Weather12readBaroTempEv>
 80a0eb2:	f002 ff99 	bl	80a3de8 <__aeabi_f2d>
 80a0eb6:	2200      	movs	r2, #0
 80a0eb8:	4b06      	ldr	r3, [pc, #24]	; (80a0ed4 <_ZN7Weather13readBaroTempFEv+0x28>)
 80a0eba:	f002 ffed 	bl	80a3e98 <__aeabi_dmul>
 80a0ebe:	2200      	movs	r2, #0
 80a0ec0:	4b05      	ldr	r3, [pc, #20]	; (80a0ed8 <_ZN7Weather13readBaroTempFEv+0x2c>)
 80a0ec2:	f003 f913 	bl	80a40ec <__aeabi_ddiv>
 80a0ec6:	2200      	movs	r2, #0
 80a0ec8:	4b04      	ldr	r3, [pc, #16]	; (80a0edc <_ZN7Weather13readBaroTempFEv+0x30>)
 80a0eca:	f002 fe2f 	bl	80a3b2c <__adddf3>
 80a0ece:	f003 f9f5 	bl	80a42bc <__aeabi_d2f>
}
 80a0ed2:	bd08      	pop	{r3, pc}
 80a0ed4:	40220000 	.word	0x40220000
 80a0ed8:	40140000 	.word	0x40140000
 80a0edc:	40400000 	.word	0x40400000

080a0ee0 <_ZN11WeatherDataC1Ev>:
#include "WeatherData.h"
#include "MQTT.h"

WeatherData::WeatherData(){};
 80a0ee0:	b538      	push	{r3, r4, r5, lr}
 80a0ee2:	230a      	movs	r3, #10
 80a0ee4:	4604      	mov	r4, r0
    };
public:

    MQTT(){};
 80a0ee6:	2500      	movs	r5, #0
 80a0ee8:	f840 3b04 	str.w	r3, [r0], #4
 80a0eec:	f002 f9fc 	bl	80a32e8 <_ZN9TCPClientC1Ev>
 80a0ef0:	490c      	ldr	r1, [pc, #48]	; (80a0f24 <_ZN11WeatherDataC1Ev+0x44>)
 80a0ef2:	6225      	str	r5, [r4, #32]
 80a0ef4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a0ef8:	f001 ff4c 	bl	80a2d94 <_ZN6StringC1EPKc>
 80a0efc:	4620      	mov	r0, r4
 80a0efe:	64e5      	str	r5, [r4, #76]	; 0x4c
 80a0f00:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
 80a0f04:	f850 1b64 	ldr.w	r1, [r0], #100
 80a0f08:	f000 f82b 	bl	80a0f62 <_ZN14CircularBufferC1Ei>
 80a0f0c:	4620      	mov	r0, r4
 80a0f0e:	f850 1b74 	ldr.w	r1, [r0], #116
 80a0f12:	f000 f826 	bl	80a0f62 <_ZN14CircularBufferC1Ei>
 80a0f16:	4620      	mov	r0, r4
 80a0f18:	f850 1b84 	ldr.w	r1, [r0], #132
 80a0f1c:	f000 f821 	bl	80a0f62 <_ZN14CircularBufferC1Ei>
 80a0f20:	4620      	mov	r0, r4
 80a0f22:	bd38      	pop	{r3, r4, r5, pc}
 80a0f24:	080a4d69 	.word	0x080a4d69

080a0f28 <_ZN11WeatherData9addSampleEfff>:
{
    this->client = client;
}

bool WeatherData::addSample(float temperature, float humidity, float pressure)
{
 80a0f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0f2a:	4604      	mov	r4, r0
    bool bufferFull = this->temperatureBuffer.push(temperature);
 80a0f2c:	3064      	adds	r0, #100	; 0x64
{
 80a0f2e:	4617      	mov	r7, r2
 80a0f30:	461e      	mov	r6, r3
    bool bufferFull = this->temperatureBuffer.push(temperature);
 80a0f32:	f000 f828 	bl	80a0f86 <_ZN14CircularBuffer4pushEf>
 80a0f36:	4605      	mov	r5, r0
    this->humidityBuffer.push(humidity);
 80a0f38:	4639      	mov	r1, r7
 80a0f3a:	f104 0074 	add.w	r0, r4, #116	; 0x74
 80a0f3e:	f000 f822 	bl	80a0f86 <_ZN14CircularBuffer4pushEf>
    this->pressureBuffer.push(pressure);
 80a0f42:	4631      	mov	r1, r6
 80a0f44:	f104 0084 	add.w	r0, r4, #132	; 0x84
 80a0f48:	f000 f81d 	bl	80a0f86 <_ZN14CircularBuffer4pushEf>
    return bufferFull;
}
 80a0f4c:	4628      	mov	r0, r5
 80a0f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0f50 <_ZN11WeatherData14getTemperatureEv>:
    Log.info("Pressure: %f", getTemperature());
}

float WeatherData::getTemperature()
{
    return this->temperatureBuffer.getAverage();
 80a0f50:	3064      	adds	r0, #100	; 0x64
 80a0f52:	f000 b833 	b.w	80a0fbc <_ZN14CircularBuffer10getAverageEv>

080a0f56 <_ZN11WeatherData11getHumidityEv>:
}

float WeatherData::getHumidity()
{
    return this->humidityBuffer.getAverage();
 80a0f56:	3074      	adds	r0, #116	; 0x74
 80a0f58:	f000 b830 	b.w	80a0fbc <_ZN14CircularBuffer10getAverageEv>

080a0f5c <_ZN11WeatherData11getPressureEv>:
}

float WeatherData::getPressure()
{
    return this->pressureBuffer.getAverage();
 80a0f5c:	3084      	adds	r0, #132	; 0x84
 80a0f5e:	f000 b82d 	b.w	80a0fbc <_ZN14CircularBuffer10getAverageEv>

080a0f62 <_ZN14CircularBufferC1Ei>:
#include "CircularBuffer.h"

CircularBuffer::CircularBuffer(int size)
{
    this->size = size;
    this->buffer = new float[size];
 80a0f62:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80a0f66:	4299      	cmp	r1, r3
CircularBuffer::CircularBuffer(int size)
 80a0f68:	b510      	push	{r4, lr}
 80a0f6a:	4604      	mov	r4, r0
    this->size = size;
 80a0f6c:	6001      	str	r1, [r0, #0]
    this->buffer = new float[size];
 80a0f6e:	bf2c      	ite	cs
 80a0f70:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a0f74:	0088      	lslcc	r0, r1, #2
 80a0f76:	f7ff f892 	bl	80a009e <_Znaj>
    this->head = 0;
 80a0f7a:	2300      	movs	r3, #0
    this->buffer = new float[size];
 80a0f7c:	60e0      	str	r0, [r4, #12]
    this->tail = 0;
 80a0f7e:	e9c4 3301 	strd	r3, r3, [r4, #4]
}
 80a0f82:	4620      	mov	r0, r4
 80a0f84:	bd10      	pop	{r4, pc}

080a0f86 <_ZN14CircularBuffer4pushEf>:

bool CircularBuffer::push(float value)
{
 80a0f86:	b510      	push	{r4, lr}
    buffer[head] = value;
 80a0f88:	6842      	ldr	r2, [r0, #4]
 80a0f8a:	68c3      	ldr	r3, [r0, #12]
 80a0f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    head = (head + 1) % size;
 80a0f90:	e9d0 2300 	ldrd	r2, r3, [r0]
 80a0f94:	1c59      	adds	r1, r3, #1
 80a0f96:	fb91 f3f2 	sdiv	r3, r1, r2
 80a0f9a:	fb02 1313 	mls	r3, r2, r3, r1
    if (head == tail)
 80a0f9e:	6881      	ldr	r1, [r0, #8]
    head = (head + 1) % size;
 80a0fa0:	6043      	str	r3, [r0, #4]
    if (head == tail)
 80a0fa2:	428b      	cmp	r3, r1
    {
        tail = (tail + 1) % size;
 80a0fa4:	bf01      	itttt	eq
 80a0fa6:	1c5c      	addeq	r4, r3, #1
 80a0fa8:	fb94 f1f2 	sdiveq	r1, r4, r2
 80a0fac:	fb02 4211 	mlseq	r2, r2, r1, r4
 80a0fb0:	6082      	streq	r2, [r0, #8]
    }
    return !(head < 9);
};
 80a0fb2:	2b08      	cmp	r3, #8
 80a0fb4:	bfd4      	ite	le
 80a0fb6:	2000      	movle	r0, #0
 80a0fb8:	2001      	movgt	r0, #1
 80a0fba:	bd10      	pop	{r4, pc}

080a0fbc <_ZN14CircularBuffer10getAverageEv>:
{
    return (head + 1) % size == tail;
};

float CircularBuffer::getAverage()
{
 80a0fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0fbe:	4607      	mov	r7, r0
    int numOfSamples = head + 1;
    float sum = 0;
    for (int i = 0; i < numOfSamples; i++)
 80a0fc0:	2600      	movs	r6, #0
    float sum = 0;
 80a0fc2:	2400      	movs	r4, #0
    int numOfSamples = head + 1;
 80a0fc4:	6845      	ldr	r5, [r0, #4]
 80a0fc6:	3501      	adds	r5, #1
    for (int i = 0; i < numOfSamples; i++)
 80a0fc8:	42ae      	cmp	r6, r5
 80a0fca:	da08      	bge.n	80a0fde <_ZN14CircularBuffer10getAverageEv+0x22>
    {
        sum += buffer[i];
 80a0fcc:	68fb      	ldr	r3, [r7, #12]
 80a0fce:	4620      	mov	r0, r4
 80a0fd0:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 80a0fd4:	f003 f9c8 	bl	80a4368 <__addsf3>
    for (int i = 0; i < numOfSamples; i++)
 80a0fd8:	3601      	adds	r6, #1
        sum += buffer[i];
 80a0fda:	4604      	mov	r4, r0
    for (int i = 0; i < numOfSamples; i++)
 80a0fdc:	e7f4      	b.n	80a0fc8 <_ZN14CircularBuffer10getAverageEv+0xc>
    }
    return sum / numOfSamples;
 80a0fde:	4628      	mov	r0, r5
 80a0fe0:	f003 fa76 	bl	80a44d0 <__aeabi_i2f>
 80a0fe4:	4601      	mov	r1, r0
 80a0fe6:	4620      	mov	r0, r4
 80a0fe8:	f003 fb7a 	bl	80a46e0 <__aeabi_fdiv>
 80a0fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a0ff0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a0ff0:	b508      	push	{r3, lr}
 80a0ff2:	4b02      	ldr	r3, [pc, #8]	; (80a0ffc <os_mutex_create+0xc>)
 80a0ff4:	681b      	ldr	r3, [r3, #0]
 80a0ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0ff8:	9301      	str	r3, [sp, #4]
 80a0ffa:	bd08      	pop	{r3, pc}
 80a0ffc:	080601d0 	.word	0x080601d0

080a1000 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
 80a1000:	b508      	push	{r3, lr}
 80a1002:	4b02      	ldr	r3, [pc, #8]	; (80a100c <os_mutex_lock+0xc>)
 80a1004:	681b      	ldr	r3, [r3, #0]
 80a1006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1008:	9301      	str	r3, [sp, #4]
 80a100a:	bd08      	pop	{r3, pc}
 80a100c:	080601d0 	.word	0x080601d0

080a1010 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
 80a1010:	b508      	push	{r3, lr}
 80a1012:	4b02      	ldr	r3, [pc, #8]	; (80a101c <os_mutex_unlock+0xc>)
 80a1014:	681b      	ldr	r3, [r3, #0]
 80a1016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1018:	9301      	str	r3, [sp, #4]
 80a101a:	bd08      	pop	{r3, pc}
 80a101c:	080601d0 	.word	0x080601d0

080a1020 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a1020:	b508      	push	{r3, lr}
 80a1022:	4b02      	ldr	r3, [pc, #8]	; (80a102c <os_mutex_recursive_create+0xc>)
 80a1024:	681b      	ldr	r3, [r3, #0]
 80a1026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1028:	9301      	str	r3, [sp, #4]
 80a102a:	bd08      	pop	{r3, pc}
 80a102c:	080601d0 	.word	0x080601d0

080a1030 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a1030:	b508      	push	{r3, lr}
 80a1032:	4b02      	ldr	r3, [pc, #8]	; (80a103c <os_mutex_recursive_destroy+0xc>)
 80a1034:	681b      	ldr	r3, [r3, #0]
 80a1036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1038:	9301      	str	r3, [sp, #4]
 80a103a:	bd08      	pop	{r3, pc}
 80a103c:	080601d0 	.word	0x080601d0

080a1040 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a1040:	b508      	push	{r3, lr}
 80a1042:	4b02      	ldr	r3, [pc, #8]	; (80a104c <os_mutex_recursive_lock+0xc>)
 80a1044:	681b      	ldr	r3, [r3, #0]
 80a1046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1048:	9301      	str	r3, [sp, #4]
 80a104a:	bd08      	pop	{r3, pc}
 80a104c:	080601d0 	.word	0x080601d0

080a1050 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a1050:	b508      	push	{r3, lr}
 80a1052:	4b02      	ldr	r3, [pc, #8]	; (80a105c <os_mutex_recursive_unlock+0xc>)
 80a1054:	681b      	ldr	r3, [r3, #0]
 80a1056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1058:	9301      	str	r3, [sp, #4]
 80a105a:	bd08      	pop	{r3, pc}
 80a105c:	080601d0 	.word	0x080601d0

080a1060 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1060:	b508      	push	{r3, lr}
 80a1062:	4b02      	ldr	r3, [pc, #8]	; (80a106c <HAL_RNG_GetRandomNumber+0xc>)
 80a1064:	681b      	ldr	r3, [r3, #0]
 80a1066:	685b      	ldr	r3, [r3, #4]
 80a1068:	9301      	str	r3, [sp, #4]
 80a106a:	bd08      	pop	{r3, pc}
 80a106c:	0806019c 	.word	0x0806019c

080a1070 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a1070:	b508      	push	{r3, lr}
 80a1072:	4b02      	ldr	r3, [pc, #8]	; (80a107c <HAL_Delay_Microseconds+0xc>)
 80a1074:	681b      	ldr	r3, [r3, #0]
 80a1076:	68db      	ldr	r3, [r3, #12]
 80a1078:	9301      	str	r3, [sp, #4]
 80a107a:	bd08      	pop	{r3, pc}
 80a107c:	0806019c 	.word	0x0806019c

080a1080 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1080:	b508      	push	{r3, lr}
 80a1082:	4b02      	ldr	r3, [pc, #8]	; (80a108c <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1084:	681b      	ldr	r3, [r3, #0]
 80a1086:	695b      	ldr	r3, [r3, #20]
 80a1088:	9301      	str	r3, [sp, #4]
 80a108a:	bd08      	pop	{r3, pc}
 80a108c:	0806019c 	.word	0x0806019c

080a1090 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 80a1090:	b508      	push	{r3, lr}
 80a1092:	4b02      	ldr	r3, [pc, #8]	; (80a109c <hal_i2c_begin+0xc>)
 80a1094:	681b      	ldr	r3, [r3, #0]
 80a1096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1098:	9301      	str	r3, [sp, #4]
 80a109a:	bd08      	pop	{r3, pc}
 80a109c:	080601ac 	.word	0x080601ac

080a10a0 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 80a10a0:	b508      	push	{r3, lr}
 80a10a2:	4b02      	ldr	r3, [pc, #8]	; (80a10ac <hal_i2c_begin_transmission+0xc>)
 80a10a4:	681b      	ldr	r3, [r3, #0]
 80a10a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a10a8:	9301      	str	r3, [sp, #4]
 80a10aa:	bd08      	pop	{r3, pc}
 80a10ac:	080601ac 	.word	0x080601ac

080a10b0 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 80a10b0:	b508      	push	{r3, lr}
 80a10b2:	4b02      	ldr	r3, [pc, #8]	; (80a10bc <hal_i2c_end_transmission+0xc>)
 80a10b4:	681b      	ldr	r3, [r3, #0]
 80a10b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a10b8:	9301      	str	r3, [sp, #4]
 80a10ba:	bd08      	pop	{r3, pc}
 80a10bc:	080601ac 	.word	0x080601ac

080a10c0 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a10c0:	b508      	push	{r3, lr}
 80a10c2:	4b02      	ldr	r3, [pc, #8]	; (80a10cc <hal_i2c_write+0xc>)
 80a10c4:	681b      	ldr	r3, [r3, #0]
 80a10c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a10c8:	9301      	str	r3, [sp, #4]
 80a10ca:	bd08      	pop	{r3, pc}
 80a10cc:	080601ac 	.word	0x080601ac

080a10d0 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a10d0:	b508      	push	{r3, lr}
 80a10d2:	4b02      	ldr	r3, [pc, #8]	; (80a10dc <hal_i2c_available+0xc>)
 80a10d4:	681b      	ldr	r3, [r3, #0]
 80a10d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a10d8:	9301      	str	r3, [sp, #4]
 80a10da:	bd08      	pop	{r3, pc}
 80a10dc:	080601ac 	.word	0x080601ac

080a10e0 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a10e0:	b508      	push	{r3, lr}
 80a10e2:	4b02      	ldr	r3, [pc, #8]	; (80a10ec <hal_i2c_read+0xc>)
 80a10e4:	681b      	ldr	r3, [r3, #0]
 80a10e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a10e8:	9301      	str	r3, [sp, #4]
 80a10ea:	bd08      	pop	{r3, pc}
 80a10ec:	080601ac 	.word	0x080601ac

080a10f0 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a10f0:	b508      	push	{r3, lr}
 80a10f2:	4b02      	ldr	r3, [pc, #8]	; (80a10fc <hal_i2c_peek+0xc>)
 80a10f4:	681b      	ldr	r3, [r3, #0]
 80a10f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a10f8:	9301      	str	r3, [sp, #4]
 80a10fa:	bd08      	pop	{r3, pc}
 80a10fc:	080601ac 	.word	0x080601ac

080a1100 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a1100:	b508      	push	{r3, lr}
 80a1102:	4b02      	ldr	r3, [pc, #8]	; (80a110c <hal_i2c_flush+0xc>)
 80a1104:	681b      	ldr	r3, [r3, #0]
 80a1106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1108:	9301      	str	r3, [sp, #4]
 80a110a:	bd08      	pop	{r3, pc}
 80a110c:	080601ac 	.word	0x080601ac

080a1110 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a1110:	b508      	push	{r3, lr}
 80a1112:	4b03      	ldr	r3, [pc, #12]	; (80a1120 <hal_i2c_init+0x10>)
 80a1114:	681b      	ldr	r3, [r3, #0]
 80a1116:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a111a:	9301      	str	r3, [sp, #4]
 80a111c:	bd08      	pop	{r3, pc}
 80a111e:	0000      	.short	0x0000
 80a1120:	080601ac 	.word	0x080601ac

080a1124 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 80a1124:	b508      	push	{r3, lr}
 80a1126:	4b03      	ldr	r3, [pc, #12]	; (80a1134 <hal_i2c_request_ex+0x10>)
 80a1128:	681b      	ldr	r3, [r3, #0]
 80a112a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a112e:	9301      	str	r3, [sp, #4]
 80a1130:	bd08      	pop	{r3, pc}
 80a1132:	0000      	.short	0x0000
 80a1134:	080601ac 	.word	0x080601ac

080a1138 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a1138:	b508      	push	{r3, lr}
 80a113a:	4b02      	ldr	r3, [pc, #8]	; (80a1144 <socket_active_status+0xc>)
 80a113c:	681b      	ldr	r3, [r3, #0]
 80a113e:	681b      	ldr	r3, [r3, #0]
 80a1140:	9301      	str	r3, [sp, #4]
 80a1142:	bd08      	pop	{r3, pc}
 80a1144:	080601bc 	.word	0x080601bc

080a1148 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a1148:	b508      	push	{r3, lr}
 80a114a:	4b02      	ldr	r3, [pc, #8]	; (80a1154 <socket_handle_valid+0xc>)
 80a114c:	681b      	ldr	r3, [r3, #0]
 80a114e:	685b      	ldr	r3, [r3, #4]
 80a1150:	9301      	str	r3, [sp, #4]
 80a1152:	bd08      	pop	{r3, pc}
 80a1154:	080601bc 	.word	0x080601bc

080a1158 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a1158:	b508      	push	{r3, lr}
 80a115a:	4b02      	ldr	r3, [pc, #8]	; (80a1164 <socket_create+0xc>)
 80a115c:	681b      	ldr	r3, [r3, #0]
 80a115e:	689b      	ldr	r3, [r3, #8]
 80a1160:	9301      	str	r3, [sp, #4]
 80a1162:	bd08      	pop	{r3, pc}
 80a1164:	080601bc 	.word	0x080601bc

080a1168 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a1168:	b508      	push	{r3, lr}
 80a116a:	4b02      	ldr	r3, [pc, #8]	; (80a1174 <socket_connect+0xc>)
 80a116c:	681b      	ldr	r3, [r3, #0]
 80a116e:	68db      	ldr	r3, [r3, #12]
 80a1170:	9301      	str	r3, [sp, #4]
 80a1172:	bd08      	pop	{r3, pc}
 80a1174:	080601bc 	.word	0x080601bc

080a1178 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a1178:	b508      	push	{r3, lr}
 80a117a:	4b02      	ldr	r3, [pc, #8]	; (80a1184 <socket_receive+0xc>)
 80a117c:	681b      	ldr	r3, [r3, #0]
 80a117e:	691b      	ldr	r3, [r3, #16]
 80a1180:	9301      	str	r3, [sp, #4]
 80a1182:	bd08      	pop	{r3, pc}
 80a1184:	080601bc 	.word	0x080601bc

080a1188 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a1188:	b508      	push	{r3, lr}
 80a118a:	4b02      	ldr	r3, [pc, #8]	; (80a1194 <socket_close+0xc>)
 80a118c:	681b      	ldr	r3, [r3, #0]
 80a118e:	6a1b      	ldr	r3, [r3, #32]
 80a1190:	9301      	str	r3, [sp, #4]
 80a1192:	bd08      	pop	{r3, pc}
 80a1194:	080601bc 	.word	0x080601bc

080a1198 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a1198:	b508      	push	{r3, lr}
 80a119a:	4b02      	ldr	r3, [pc, #8]	; (80a11a4 <socket_handle_invalid+0xc>)
 80a119c:	681b      	ldr	r3, [r3, #0]
 80a119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a11a0:	9301      	str	r3, [sp, #4]
 80a11a2:	bd08      	pop	{r3, pc}
 80a11a4:	080601bc 	.word	0x080601bc

080a11a8 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a11a8:	b508      	push	{r3, lr}
 80a11aa:	4b02      	ldr	r3, [pc, #8]	; (80a11b4 <socket_send_ex+0xc>)
 80a11ac:	681b      	ldr	r3, [r3, #0]
 80a11ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a11b0:	9301      	str	r3, [sp, #4]
 80a11b2:	bd08      	pop	{r3, pc}
 80a11b4:	080601bc 	.word	0x080601bc

080a11b8 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a11b8:	b508      	push	{r3, lr}
 80a11ba:	4b02      	ldr	r3, [pc, #8]	; (80a11c4 <hal_usart_init+0xc>)
 80a11bc:	681b      	ldr	r3, [r3, #0]
 80a11be:	699b      	ldr	r3, [r3, #24]
 80a11c0:	9301      	str	r3, [sp, #4]
 80a11c2:	bd08      	pop	{r3, pc}
 80a11c4:	080601c4 	.word	0x080601c4

080a11c8 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 80a11c8:	b508      	push	{r3, lr}
 80a11ca:	4b02      	ldr	r3, [pc, #8]	; (80a11d4 <hal_usart_end+0xc>)
 80a11cc:	681b      	ldr	r3, [r3, #0]
 80a11ce:	6a1b      	ldr	r3, [r3, #32]
 80a11d0:	9301      	str	r3, [sp, #4]
 80a11d2:	bd08      	pop	{r3, pc}
 80a11d4:	080601c4 	.word	0x080601c4

080a11d8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a11d8:	b508      	push	{r3, lr}
 80a11da:	4b02      	ldr	r3, [pc, #8]	; (80a11e4 <hal_usart_write+0xc>)
 80a11dc:	681b      	ldr	r3, [r3, #0]
 80a11de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a11e0:	9301      	str	r3, [sp, #4]
 80a11e2:	bd08      	pop	{r3, pc}
 80a11e4:	080601c4 	.word	0x080601c4

080a11e8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a11e8:	b508      	push	{r3, lr}
 80a11ea:	4b02      	ldr	r3, [pc, #8]	; (80a11f4 <hal_usart_available+0xc>)
 80a11ec:	681b      	ldr	r3, [r3, #0]
 80a11ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a11f0:	9301      	str	r3, [sp, #4]
 80a11f2:	bd08      	pop	{r3, pc}
 80a11f4:	080601c4 	.word	0x080601c4

080a11f8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a11f8:	b508      	push	{r3, lr}
 80a11fa:	4b02      	ldr	r3, [pc, #8]	; (80a1204 <hal_usart_read+0xc>)
 80a11fc:	681b      	ldr	r3, [r3, #0]
 80a11fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1200:	9301      	str	r3, [sp, #4]
 80a1202:	bd08      	pop	{r3, pc}
 80a1204:	080601c4 	.word	0x080601c4

080a1208 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a1208:	b508      	push	{r3, lr}
 80a120a:	4b02      	ldr	r3, [pc, #8]	; (80a1214 <hal_usart_peek+0xc>)
 80a120c:	681b      	ldr	r3, [r3, #0]
 80a120e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1210:	9301      	str	r3, [sp, #4]
 80a1212:	bd08      	pop	{r3, pc}
 80a1214:	080601c4 	.word	0x080601c4

080a1218 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a1218:	b508      	push	{r3, lr}
 80a121a:	4b02      	ldr	r3, [pc, #8]	; (80a1224 <hal_usart_flush+0xc>)
 80a121c:	681b      	ldr	r3, [r3, #0]
 80a121e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1220:	9301      	str	r3, [sp, #4]
 80a1222:	bd08      	pop	{r3, pc}
 80a1224:	080601c4 	.word	0x080601c4

080a1228 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a1228:	b508      	push	{r3, lr}
 80a122a:	4b02      	ldr	r3, [pc, #8]	; (80a1234 <hal_usart_available_data_for_write+0xc>)
 80a122c:	681b      	ldr	r3, [r3, #0]
 80a122e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1230:	9301      	str	r3, [sp, #4]
 80a1232:	bd08      	pop	{r3, pc}
 80a1234:	080601c4 	.word	0x080601c4

080a1238 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 80a1238:	b508      	push	{r3, lr}
 80a123a:	4b02      	ldr	r3, [pc, #8]	; (80a1244 <hal_usart_begin_config+0xc>)
 80a123c:	681b      	ldr	r3, [r3, #0]
 80a123e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1240:	9301      	str	r3, [sp, #4]
 80a1242:	bd08      	pop	{r3, pc}
 80a1244:	080601c4 	.word	0x080601c4

080a1248 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1248:	b508      	push	{r3, lr}
 80a124a:	4b02      	ldr	r3, [pc, #8]	; (80a1254 <HAL_USB_USART_Init+0xc>)
 80a124c:	681b      	ldr	r3, [r3, #0]
 80a124e:	681b      	ldr	r3, [r3, #0]
 80a1250:	9301      	str	r3, [sp, #4]
 80a1252:	bd08      	pop	{r3, pc}
 80a1254:	080601d8 	.word	0x080601d8

080a1258 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a1258:	b508      	push	{r3, lr}
 80a125a:	4b02      	ldr	r3, [pc, #8]	; (80a1264 <HAL_USB_USART_Begin+0xc>)
 80a125c:	681b      	ldr	r3, [r3, #0]
 80a125e:	685b      	ldr	r3, [r3, #4]
 80a1260:	9301      	str	r3, [sp, #4]
 80a1262:	bd08      	pop	{r3, pc}
 80a1264:	080601d8 	.word	0x080601d8

080a1268 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 80a1268:	b508      	push	{r3, lr}
 80a126a:	4b02      	ldr	r3, [pc, #8]	; (80a1274 <HAL_USB_USART_End+0xc>)
 80a126c:	681b      	ldr	r3, [r3, #0]
 80a126e:	689b      	ldr	r3, [r3, #8]
 80a1270:	9301      	str	r3, [sp, #4]
 80a1272:	bd08      	pop	{r3, pc}
 80a1274:	080601d8 	.word	0x080601d8

080a1278 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1278:	b508      	push	{r3, lr}
 80a127a:	4b02      	ldr	r3, [pc, #8]	; (80a1284 <HAL_USB_USART_Available_Data+0xc>)
 80a127c:	681b      	ldr	r3, [r3, #0]
 80a127e:	691b      	ldr	r3, [r3, #16]
 80a1280:	9301      	str	r3, [sp, #4]
 80a1282:	bd08      	pop	{r3, pc}
 80a1284:	080601d8 	.word	0x080601d8

080a1288 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1288:	b508      	push	{r3, lr}
 80a128a:	4b02      	ldr	r3, [pc, #8]	; (80a1294 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a128c:	681b      	ldr	r3, [r3, #0]
 80a128e:	695b      	ldr	r3, [r3, #20]
 80a1290:	9301      	str	r3, [sp, #4]
 80a1292:	bd08      	pop	{r3, pc}
 80a1294:	080601d8 	.word	0x080601d8

080a1298 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1298:	b508      	push	{r3, lr}
 80a129a:	4b02      	ldr	r3, [pc, #8]	; (80a12a4 <HAL_USB_USART_Receive_Data+0xc>)
 80a129c:	681b      	ldr	r3, [r3, #0]
 80a129e:	699b      	ldr	r3, [r3, #24]
 80a12a0:	9301      	str	r3, [sp, #4]
 80a12a2:	bd08      	pop	{r3, pc}
 80a12a4:	080601d8 	.word	0x080601d8

080a12a8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a12a8:	b508      	push	{r3, lr}
 80a12aa:	4b02      	ldr	r3, [pc, #8]	; (80a12b4 <HAL_USB_USART_Send_Data+0xc>)
 80a12ac:	681b      	ldr	r3, [r3, #0]
 80a12ae:	69db      	ldr	r3, [r3, #28]
 80a12b0:	9301      	str	r3, [sp, #4]
 80a12b2:	bd08      	pop	{r3, pc}
 80a12b4:	080601d8 	.word	0x080601d8

080a12b8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a12b8:	b508      	push	{r3, lr}
 80a12ba:	4b02      	ldr	r3, [pc, #8]	; (80a12c4 <HAL_USB_USART_Flush_Data+0xc>)
 80a12bc:	681b      	ldr	r3, [r3, #0]
 80a12be:	6a1b      	ldr	r3, [r3, #32]
 80a12c0:	9301      	str	r3, [sp, #4]
 80a12c2:	bd08      	pop	{r3, pc}
 80a12c4:	080601d8 	.word	0x080601d8

080a12c8 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a12c8:	b508      	push	{r3, lr}
 80a12ca:	4b02      	ldr	r3, [pc, #8]	; (80a12d4 <HAL_NET_SetNetWatchDog+0xc>)
 80a12cc:	681b      	ldr	r3, [r3, #0]
 80a12ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a12d0:	9301      	str	r3, [sp, #4]
 80a12d2:	bd08      	pop	{r3, pc}
 80a12d4:	080601c0 	.word	0x080601c0

080a12d8 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a12d8:	b508      	push	{r3, lr}
 80a12da:	4b02      	ldr	r3, [pc, #8]	; (80a12e4 <inet_gethostbyname+0xc>)
 80a12dc:	681b      	ldr	r3, [r3, #0]
 80a12de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a12e0:	9301      	str	r3, [sp, #4]
 80a12e2:	bd08      	pop	{r3, pc}
 80a12e4:	080601c0 	.word	0x080601c0

080a12e8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80a12e8:	b508      	push	{r3, lr}
 80a12ea:	4b02      	ldr	r3, [pc, #8]	; (80a12f4 <panic_+0xc>)
 80a12ec:	681b      	ldr	r3, [r3, #0]
 80a12ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a12f0:	9301      	str	r3, [sp, #4]
 80a12f2:	bd08      	pop	{r3, pc}
 80a12f4:	080201a8 	.word	0x080201a8

080a12f8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a12f8:	b508      	push	{r3, lr}
 80a12fa:	4b02      	ldr	r3, [pc, #8]	; (80a1304 <log_message+0xc>)
 80a12fc:	681b      	ldr	r3, [r3, #0]
 80a12fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a1300:	9301      	str	r3, [sp, #4]
 80a1302:	bd08      	pop	{r3, pc}
 80a1304:	080201a8 	.word	0x080201a8

080a1308 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 80a1308:	b508      	push	{r3, lr}
 80a130a:	4b02      	ldr	r3, [pc, #8]	; (80a1314 <log_message_v+0xc>)
 80a130c:	681b      	ldr	r3, [r3, #0]
 80a130e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1310:	9301      	str	r3, [sp, #4]
 80a1312:	bd08      	pop	{r3, pc}
 80a1314:	080201a8 	.word	0x080201a8

080a1318 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 80a1318:	b508      	push	{r3, lr}
 80a131a:	4b02      	ldr	r3, [pc, #8]	; (80a1324 <log_level_name+0xc>)
 80a131c:	681b      	ldr	r3, [r3, #0]
 80a131e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1320:	9301      	str	r3, [sp, #4]
 80a1322:	bd08      	pop	{r3, pc}
 80a1324:	080201a8 	.word	0x080201a8

080a1328 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 80a1328:	b508      	push	{r3, lr}
 80a132a:	4b02      	ldr	r3, [pc, #8]	; (80a1334 <log_set_callbacks+0xc>)
 80a132c:	681b      	ldr	r3, [r3, #0]
 80a132e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1330:	9301      	str	r3, [sp, #4]
 80a1332:	bd08      	pop	{r3, pc}
 80a1334:	080201a8 	.word	0x080201a8

080a1338 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1338:	b508      	push	{r3, lr}
 80a133a:	4b02      	ldr	r3, [pc, #8]	; (80a1344 <set_system_mode+0xc>)
 80a133c:	681b      	ldr	r3, [r3, #0]
 80a133e:	685b      	ldr	r3, [r3, #4]
 80a1340:	9301      	str	r3, [sp, #4]
 80a1342:	bd08      	pop	{r3, pc}
 80a1344:	080601a4 	.word	0x080601a4

080a1348 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1348:	b508      	push	{r3, lr}
 80a134a:	4b02      	ldr	r3, [pc, #8]	; (80a1354 <system_delay_ms+0xc>)
 80a134c:	681b      	ldr	r3, [r3, #0]
 80a134e:	695b      	ldr	r3, [r3, #20]
 80a1350:	9301      	str	r3, [sp, #4]
 80a1352:	bd08      	pop	{r3, pc}
 80a1354:	080601a4 	.word	0x080601a4

080a1358 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a1358:	b508      	push	{r3, lr}
 80a135a:	4b02      	ldr	r3, [pc, #8]	; (80a1364 <system_thread_set_state+0xc>)
 80a135c:	681b      	ldr	r3, [r3, #0]
 80a135e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1360:	9301      	str	r3, [sp, #4]
 80a1362:	bd08      	pop	{r3, pc}
 80a1364:	080601a4 	.word	0x080601a4

080a1368 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1368:	b508      	push	{r3, lr}
 80a136a:	4b03      	ldr	r3, [pc, #12]	; (80a1378 <system_ctrl_set_app_request_handler+0x10>)
 80a136c:	681b      	ldr	r3, [r3, #0]
 80a136e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a1372:	9301      	str	r3, [sp, #4]
 80a1374:	bd08      	pop	{r3, pc}
 80a1376:	0000      	.short	0x0000
 80a1378:	080601a4 	.word	0x080601a4

080a137c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a137c:	b508      	push	{r3, lr}
 80a137e:	4b03      	ldr	r3, [pc, #12]	; (80a138c <system_ctrl_set_result+0x10>)
 80a1380:	681b      	ldr	r3, [r3, #0]
 80a1382:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a1386:	9301      	str	r3, [sp, #4]
 80a1388:	bd08      	pop	{r3, pc}
 80a138a:	0000      	.short	0x0000
 80a138c:	080601a4 	.word	0x080601a4

080a1390 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1390:	b508      	push	{r3, lr}
 80a1392:	4b02      	ldr	r3, [pc, #8]	; (80a139c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1394:	681b      	ldr	r3, [r3, #0]
 80a1396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1398:	9301      	str	r3, [sp, #4]
 80a139a:	bd08      	pop	{r3, pc}
 80a139c:	080601cc 	.word	0x080601cc

080a13a0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a13a0:	b508      	push	{r3, lr}
 80a13a2:	4b02      	ldr	r3, [pc, #8]	; (80a13ac <network_connect+0xc>)
 80a13a4:	681b      	ldr	r3, [r3, #0]
 80a13a6:	685b      	ldr	r3, [r3, #4]
 80a13a8:	9301      	str	r3, [sp, #4]
 80a13aa:	bd08      	pop	{r3, pc}
 80a13ac:	080601c8 	.word	0x080601c8

080a13b0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a13b0:	b508      	push	{r3, lr}
 80a13b2:	4b02      	ldr	r3, [pc, #8]	; (80a13bc <network_connecting+0xc>)
 80a13b4:	681b      	ldr	r3, [r3, #0]
 80a13b6:	689b      	ldr	r3, [r3, #8]
 80a13b8:	9301      	str	r3, [sp, #4]
 80a13ba:	bd08      	pop	{r3, pc}
 80a13bc:	080601c8 	.word	0x080601c8

080a13c0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a13c0:	b508      	push	{r3, lr}
 80a13c2:	4b02      	ldr	r3, [pc, #8]	; (80a13cc <network_disconnect+0xc>)
 80a13c4:	681b      	ldr	r3, [r3, #0]
 80a13c6:	68db      	ldr	r3, [r3, #12]
 80a13c8:	9301      	str	r3, [sp, #4]
 80a13ca:	bd08      	pop	{r3, pc}
 80a13cc:	080601c8 	.word	0x080601c8

080a13d0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a13d0:	b508      	push	{r3, lr}
 80a13d2:	4b02      	ldr	r3, [pc, #8]	; (80a13dc <network_ready+0xc>)
 80a13d4:	681b      	ldr	r3, [r3, #0]
 80a13d6:	691b      	ldr	r3, [r3, #16]
 80a13d8:	9301      	str	r3, [sp, #4]
 80a13da:	bd08      	pop	{r3, pc}
 80a13dc:	080601c8 	.word	0x080601c8

080a13e0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a13e0:	b508      	push	{r3, lr}
 80a13e2:	4b02      	ldr	r3, [pc, #8]	; (80a13ec <network_on+0xc>)
 80a13e4:	681b      	ldr	r3, [r3, #0]
 80a13e6:	695b      	ldr	r3, [r3, #20]
 80a13e8:	9301      	str	r3, [sp, #4]
 80a13ea:	bd08      	pop	{r3, pc}
 80a13ec:	080601c8 	.word	0x080601c8

080a13f0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a13f0:	b508      	push	{r3, lr}
 80a13f2:	4b02      	ldr	r3, [pc, #8]	; (80a13fc <network_off+0xc>)
 80a13f4:	681b      	ldr	r3, [r3, #0]
 80a13f6:	699b      	ldr	r3, [r3, #24]
 80a13f8:	9301      	str	r3, [sp, #4]
 80a13fa:	bd08      	pop	{r3, pc}
 80a13fc:	080601c8 	.word	0x080601c8

080a1400 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1400:	b508      	push	{r3, lr}
 80a1402:	4b02      	ldr	r3, [pc, #8]	; (80a140c <network_listen+0xc>)
 80a1404:	681b      	ldr	r3, [r3, #0]
 80a1406:	69db      	ldr	r3, [r3, #28]
 80a1408:	9301      	str	r3, [sp, #4]
 80a140a:	bd08      	pop	{r3, pc}
 80a140c:	080601c8 	.word	0x080601c8

080a1410 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1410:	b508      	push	{r3, lr}
 80a1412:	4b02      	ldr	r3, [pc, #8]	; (80a141c <network_listening+0xc>)
 80a1414:	681b      	ldr	r3, [r3, #0]
 80a1416:	6a1b      	ldr	r3, [r3, #32]
 80a1418:	9301      	str	r3, [sp, #4]
 80a141a:	bd08      	pop	{r3, pc}
 80a141c:	080601c8 	.word	0x080601c8

080a1420 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1420:	b508      	push	{r3, lr}
 80a1422:	4b02      	ldr	r3, [pc, #8]	; (80a142c <network_set_listen_timeout+0xc>)
 80a1424:	681b      	ldr	r3, [r3, #0]
 80a1426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1428:	9301      	str	r3, [sp, #4]
 80a142a:	bd08      	pop	{r3, pc}
 80a142c:	080601c8 	.word	0x080601c8

080a1430 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1430:	b508      	push	{r3, lr}
 80a1432:	4b02      	ldr	r3, [pc, #8]	; (80a143c <network_get_listen_timeout+0xc>)
 80a1434:	681b      	ldr	r3, [r3, #0]
 80a1436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1438:	9301      	str	r3, [sp, #4]
 80a143a:	bd08      	pop	{r3, pc}
 80a143c:	080601c8 	.word	0x080601c8

080a1440 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a1440:	b508      	push	{r3, lr}
 80a1442:	4b02      	ldr	r3, [pc, #8]	; (80a144c <network_is_on+0xc>)
 80a1444:	681b      	ldr	r3, [r3, #0]
 80a1446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1448:	9301      	str	r3, [sp, #4]
 80a144a:	bd08      	pop	{r3, pc}
 80a144c:	080601c8 	.word	0x080601c8

080a1450 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a1450:	b508      	push	{r3, lr}
 80a1452:	4b02      	ldr	r3, [pc, #8]	; (80a145c <network_is_off+0xc>)
 80a1454:	681b      	ldr	r3, [r3, #0]
 80a1456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1458:	9301      	str	r3, [sp, #4]
 80a145a:	bd08      	pop	{r3, pc}
 80a145c:	080601c8 	.word	0x080601c8

080a1460 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1460:	b508      	push	{r3, lr}
 80a1462:	4b02      	ldr	r3, [pc, #8]	; (80a146c <malloc+0xc>)
 80a1464:	681b      	ldr	r3, [r3, #0]
 80a1466:	681b      	ldr	r3, [r3, #0]
 80a1468:	9301      	str	r3, [sp, #4]
 80a146a:	bd08      	pop	{r3, pc}
 80a146c:	080601a0 	.word	0x080601a0

080a1470 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1470:	b508      	push	{r3, lr}
 80a1472:	4b02      	ldr	r3, [pc, #8]	; (80a147c <free+0xc>)
 80a1474:	681b      	ldr	r3, [r3, #0]
 80a1476:	685b      	ldr	r3, [r3, #4]
 80a1478:	9301      	str	r3, [sp, #4]
 80a147a:	bd08      	pop	{r3, pc}
 80a147c:	080601a0 	.word	0x080601a0

080a1480 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a1480:	b508      	push	{r3, lr}
 80a1482:	4b02      	ldr	r3, [pc, #8]	; (80a148c <realloc+0xc>)
 80a1484:	681b      	ldr	r3, [r3, #0]
 80a1486:	689b      	ldr	r3, [r3, #8]
 80a1488:	9301      	str	r3, [sp, #4]
 80a148a:	bd08      	pop	{r3, pc}
 80a148c:	080601a0 	.word	0x080601a0

080a1490 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a1490:	b508      	push	{r3, lr}
 80a1492:	4b02      	ldr	r3, [pc, #8]	; (80a149c <vsnprintf+0xc>)
 80a1494:	681b      	ldr	r3, [r3, #0]
 80a1496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1498:	9301      	str	r3, [sp, #4]
 80a149a:	bd08      	pop	{r3, pc}
 80a149c:	080601a0 	.word	0x080601a0

080a14a0 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a14a0:	b508      	push	{r3, lr}
 80a14a2:	4b02      	ldr	r3, [pc, #8]	; (80a14ac <newlib_impure_ptr_callback+0xc>)
 80a14a4:	681b      	ldr	r3, [r3, #0]
 80a14a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a14a8:	9301      	str	r3, [sp, #4]
 80a14aa:	bd08      	pop	{r3, pc}
 80a14ac:	080601a0 	.word	0x080601a0

080a14b0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a14b0:	2100      	movs	r1, #0
 80a14b2:	f7ff bf49 	b.w	80a1348 <system_delay_ms>

080a14b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a14b6:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a14b8:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a14ba:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a14bc:	b17c      	cbz	r4, 80a14de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a14be:	6863      	ldr	r3, [r4, #4]
 80a14c0:	3b01      	subs	r3, #1
 80a14c2:	6063      	str	r3, [r4, #4]
 80a14c4:	b95b      	cbnz	r3, 80a14de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a14c6:	6823      	ldr	r3, [r4, #0]
 80a14c8:	4620      	mov	r0, r4
 80a14ca:	689b      	ldr	r3, [r3, #8]
 80a14cc:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a14ce:	68a3      	ldr	r3, [r4, #8]
 80a14d0:	3b01      	subs	r3, #1
 80a14d2:	60a3      	str	r3, [r4, #8]
 80a14d4:	b91b      	cbnz	r3, 80a14de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a14d6:	6823      	ldr	r3, [r4, #0]
 80a14d8:	4620      	mov	r0, r4
 80a14da:	68db      	ldr	r3, [r3, #12]
 80a14dc:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a14de:	4628      	mov	r0, r5
 80a14e0:	bd38      	pop	{r3, r4, r5, pc}

080a14e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a14e2:	680b      	ldr	r3, [r1, #0]
 80a14e4:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a14e6:	b113      	cbz	r3, 80a14ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 80a14e8:	685a      	ldr	r2, [r3, #4]
 80a14ea:	3201      	adds	r2, #1
 80a14ec:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
 80a14ee:	4770      	bx	lr

080a14f0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a14f0:	4770      	bx	lr

080a14f2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a14f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a14f4:	4606      	mov	r6, r0
 80a14f6:	4615      	mov	r5, r2
 80a14f8:	460c      	mov	r4, r1
 80a14fa:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a14fc:	42bc      	cmp	r4, r7
 80a14fe:	d006      	beq.n	80a150e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1500:	6833      	ldr	r3, [r6, #0]
 80a1502:	4630      	mov	r0, r6
 80a1504:	689b      	ldr	r3, [r3, #8]
 80a1506:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a150a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a150c:	e7f6      	b.n	80a14fc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a150e:	4628      	mov	r0, r5
 80a1510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1512 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a1512:	2200      	movs	r2, #0
 80a1514:	7c00      	ldrb	r0, [r0, #16]
 80a1516:	f7ff bdd3 	b.w	80a10c0 <hal_i2c_write>

080a151a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a151a:	2100      	movs	r1, #0
 80a151c:	7c00      	ldrb	r0, [r0, #16]
 80a151e:	f7ff bdd7 	b.w	80a10d0 <hal_i2c_available>

080a1522 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a1522:	2100      	movs	r1, #0
 80a1524:	7c00      	ldrb	r0, [r0, #16]
 80a1526:	f7ff bddb 	b.w	80a10e0 <hal_i2c_read>

080a152a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a152a:	2100      	movs	r1, #0
 80a152c:	7c00      	ldrb	r0, [r0, #16]
 80a152e:	f7ff bddf 	b.w	80a10f0 <hal_i2c_peek>

080a1532 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a1532:	2100      	movs	r1, #0
 80a1534:	7c00      	ldrb	r0, [r0, #16]
 80a1536:	f7ff bde3 	b.w	80a1100 <hal_i2c_flush>

080a153a <_ZN7TwoWireD0Ev>:
 80a153a:	b510      	push	{r4, lr}
 80a153c:	4604      	mov	r4, r0
 80a153e:	2114      	movs	r1, #20
 80a1540:	f002 f9d4 	bl	80a38ec <_ZdlPvj>
 80a1544:	4620      	mov	r0, r4
 80a1546:	bd10      	pop	{r4, pc}

080a1548 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1548:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a154a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a154e:	4604      	mov	r4, r0
 80a1550:	4608      	mov	r0, r1
 80a1552:	2100      	movs	r1, #0
 80a1554:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a1558:	4b03      	ldr	r3, [pc, #12]	; (80a1568 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a155a:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a155c:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a155e:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a1560:	f7ff fdd6 	bl	80a1110 <hal_i2c_init>
}
 80a1564:	4620      	mov	r0, r4
 80a1566:	bd10      	pop	{r4, pc}
 80a1568:	080a4cb0 	.word	0x080a4cb0

080a156c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a156c:	2300      	movs	r3, #0
 80a156e:	7c00      	ldrb	r0, [r0, #16]
 80a1570:	461a      	mov	r2, r3
 80a1572:	4619      	mov	r1, r3
 80a1574:	f7ff bd8c 	b.w	80a1090 <hal_i2c_begin>

080a1578 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 80a1578:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 80a157a:	2200      	movs	r2, #0
 80a157c:	2314      	movs	r3, #20
 80a157e:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80a1582:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 80a1586:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 80a1588:	7c00      	ldrb	r0, [r0, #16]
 80a158a:	f88d 3008 	strb.w	r3, [sp, #8]
 80a158e:	684b      	ldr	r3, [r1, #4]
 80a1590:	9303      	str	r3, [sp, #12]
 80a1592:	68cb      	ldr	r3, [r1, #12]
 80a1594:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 80a1596:	7a0b      	ldrb	r3, [r1, #8]
 80a1598:	a901      	add	r1, sp, #4
 80a159a:	9305      	str	r3, [sp, #20]
 80a159c:	f7ff fdc2 	bl	80a1124 <hal_i2c_request_ex>
}
 80a15a0:	b007      	add	sp, #28
 80a15a2:	f85d fb04 	ldr.w	pc, [sp], #4

080a15a6 <_ZN7TwoWire11requestFromEhjh>:
{
 80a15a6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 80a15a8:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80a15aa:	f88d 1000 	strb.w	r1, [sp]
 80a15ae:	f04f 0164 	mov.w	r1, #100	; 0x64
 80a15b2:	bf18      	it	ne
 80a15b4:	2301      	movne	r3, #1
 80a15b6:	9103      	str	r1, [sp, #12]
 80a15b8:	4669      	mov	r1, sp
    size_ = size;
 80a15ba:	9201      	str	r2, [sp, #4]
 80a15bc:	f88d 3008 	strb.w	r3, [sp, #8]
 80a15c0:	f7ff ffda 	bl	80a1578 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 80a15c4:	b005      	add	sp, #20
 80a15c6:	f85d fb04 	ldr.w	pc, [sp], #4

080a15ca <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 80a15ca:	2301      	movs	r3, #1
 80a15cc:	f7ff bfeb 	b.w	80a15a6 <_ZN7TwoWire11requestFromEhjh>

080a15d0 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 80a15d0:	2200      	movs	r2, #0
 80a15d2:	7c00      	ldrb	r0, [r0, #16]
 80a15d4:	f7ff bd64 	b.w	80a10a0 <hal_i2c_begin_transmission>

080a15d8 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 80a15d8:	b2c9      	uxtb	r1, r1
 80a15da:	f7ff bff9 	b.w	80a15d0 <_ZN7TwoWire17beginTransmissionEh>

080a15de <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 80a15de:	2200      	movs	r2, #0
 80a15e0:	7c00      	ldrb	r0, [r0, #16]
 80a15e2:	f7ff bd65 	b.w	80a10b0 <hal_i2c_end_transmission>

080a15e6 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 80a15e6:	2101      	movs	r1, #1
 80a15e8:	f7ff bff9 	b.w	80a15de <_ZN7TwoWire15endTransmissionEh>

080a15ec <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a15ec:	4770      	bx	lr

080a15ee <_ZN9IPAddressD0Ev>:
 80a15ee:	b510      	push	{r4, lr}
 80a15f0:	4604      	mov	r4, r0
 80a15f2:	2118      	movs	r1, #24
 80a15f4:	f002 f97a 	bl	80a38ec <_ZdlPvj>
 80a15f8:	4620      	mov	r0, r4
 80a15fa:	bd10      	pop	{r4, pc}

080a15fc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a15fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a15fe:	460e      	mov	r6, r1
 80a1600:	2400      	movs	r4, #0
 80a1602:	f100 0708 	add.w	r7, r0, #8
 80a1606:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a1608:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a160c:	220a      	movs	r2, #10
 80a160e:	4630      	mov	r0, r6
 80a1610:	f001 fb21 	bl	80a2c56 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1614:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1616:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a1618:	d101      	bne.n	80a161e <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a161a:	4620      	mov	r0, r4
 80a161c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a161e:	2c00      	cmp	r4, #0
 80a1620:	d0f2      	beq.n	80a1608 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1622:	212e      	movs	r1, #46	; 0x2e
 80a1624:	4630      	mov	r0, r6
 80a1626:	f001 fafd 	bl	80a2c24 <_ZN5Print5printEc>
 80a162a:	4404      	add	r4, r0
 80a162c:	e7ec      	b.n	80a1608 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a1630 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a1630:	b510      	push	{r4, lr}
 80a1632:	4604      	mov	r4, r0
 80a1634:	4b04      	ldr	r3, [pc, #16]	; (80a1648 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1636:	2211      	movs	r2, #17
 80a1638:	2100      	movs	r1, #0
 80a163a:	f840 3b04 	str.w	r3, [r0], #4
 80a163e:	f003 f919 	bl	80a4874 <memset>
}
 80a1642:	4620      	mov	r0, r4
 80a1644:	bd10      	pop	{r4, pc}
 80a1646:	bf00      	nop
 80a1648:	080a4cd8 	.word	0x080a4cd8

080a164c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a164c:	4603      	mov	r3, r0
 80a164e:	4a07      	ldr	r2, [pc, #28]	; (80a166c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1650:	b510      	push	{r4, lr}
 80a1652:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a1656:	f101 0210 	add.w	r2, r1, #16
 80a165a:	f851 4b04 	ldr.w	r4, [r1], #4
 80a165e:	4291      	cmp	r1, r2
 80a1660:	f843 4b04 	str.w	r4, [r3], #4
 80a1664:	d1f9      	bne.n	80a165a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1666:	780a      	ldrb	r2, [r1, #0]
 80a1668:	701a      	strb	r2, [r3, #0]
}
 80a166a:	bd10      	pop	{r4, pc}
 80a166c:	080a4cd8 	.word	0x080a4cd8

080a1670 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a1670:	4a02      	ldr	r2, [pc, #8]	; (80a167c <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a1672:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a1676:	2204      	movs	r2, #4
 80a1678:	7502      	strb	r2, [r0, #20]
}
 80a167a:	4770      	bx	lr
 80a167c:	080a4cd8 	.word	0x080a4cd8

080a1680 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a1680:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1682:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1686:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a168a:	2304      	movs	r3, #4
 80a168c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a1690:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a1694:	6044      	str	r4, [r0, #4]
 80a1696:	7503      	strb	r3, [r0, #20]
}
 80a1698:	bd10      	pop	{r4, pc}
	...

080a169c <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a169c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a169e:	4d04      	ldr	r5, [pc, #16]	; (80a16b0 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a16a0:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a16a2:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a16a6:	9500      	str	r5, [sp, #0]
 80a16a8:	f7ff ffea 	bl	80a1680 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a16ac:	b003      	add	sp, #12
 80a16ae:	bd30      	pop	{r4, r5, pc}
 80a16b0:	080a4cd8 	.word	0x080a4cd8

080a16b4 <_ZN9IPAddressaSEPKh>:
{
 80a16b4:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a16b6:	78cb      	ldrb	r3, [r1, #3]
 80a16b8:	9300      	str	r3, [sp, #0]
 80a16ba:	788b      	ldrb	r3, [r1, #2]
 80a16bc:	784a      	ldrb	r2, [r1, #1]
 80a16be:	7809      	ldrb	r1, [r1, #0]
 80a16c0:	f7ff ffde 	bl	80a1680 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a16c4:	b002      	add	sp, #8
 80a16c6:	bd10      	pop	{r4, pc}

080a16c8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* address)
 80a16c8:	b510      	push	{r4, lr}
 80a16ca:	4604      	mov	r4, r0
 80a16cc:	4b02      	ldr	r3, [pc, #8]	; (80a16d8 <_ZN9IPAddressC1EPKh+0x10>)
 80a16ce:	6003      	str	r3, [r0, #0]
    *this = address;
 80a16d0:	f7ff fff0 	bl	80a16b4 <_ZN9IPAddressaSEPKh>
}
 80a16d4:	4620      	mov	r0, r4
 80a16d6:	bd10      	pop	{r4, pc}
 80a16d8:	080a4cd8 	.word	0x080a4cd8

080a16dc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 80a16dc:	2201      	movs	r2, #1
 80a16de:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 80a16e2:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 80a16e6:	4618      	mov	r0, r3
 80a16e8:	2901      	cmp	r1, #1
 80a16ea:	d108      	bne.n	80a16fe <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 80a16ec:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80a16f0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 80a16f4:	3a01      	subs	r2, #1
 80a16f6:	f103 0310 	add.w	r3, r3, #16
 80a16fa:	d1f2      	bne.n	80a16e2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 80a16fc:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 80a16fe:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 80a1700:	bf04      	itt	eq
 80a1702:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 80a1706:	1852      	addeq	r2, r2, r1
 80a1708:	e7f4      	b.n	80a16f4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

080a170a <_ZN5spark16JSONBufferWriterD1Ev>:

private:
    Print &strm_;
};

class JSONBufferWriter: public JSONWriter {
 80a170a:	4770      	bx	lr

080a170c <_ZN5spark16JSONBufferWriterD0Ev>:
 80a170c:	b510      	push	{r4, lr}
 80a170e:	4604      	mov	r4, r0
 80a1710:	2114      	movs	r1, #20
 80a1712:	f002 f8eb 	bl	80a38ec <_ZdlPvj>
 80a1716:	4620      	mov	r0, r4
 80a1718:	bd10      	pop	{r4, pc}

080a171a <_ZN5spark16JSONBufferWriter5writeEPKcj>:
    }
    write('"');
}

// spark::JSONBufferWriter
void spark::JSONBufferWriter::write(const char *data, size_t size) {
 80a171a:	b538      	push	{r3, r4, r5, lr}
 80a171c:	4615      	mov	r5, r2
    if (n_ < bufSize_) {
 80a171e:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80a1722:	4293      	cmp	r3, r2
void spark::JSONBufferWriter::write(const char *data, size_t size) {
 80a1724:	4604      	mov	r4, r0
    if (n_ < bufSize_) {
 80a1726:	d207      	bcs.n	80a1738 <_ZN5spark16JSONBufferWriter5writeEPKcj+0x1e>
        memcpy(buf_ + n_, data, std::min(size, bufSize_ - n_));
 80a1728:	1ad2      	subs	r2, r2, r3
 80a172a:	6880      	ldr	r0, [r0, #8]
 80a172c:	42aa      	cmp	r2, r5
 80a172e:	bf28      	it	cs
 80a1730:	462a      	movcs	r2, r5
 80a1732:	4418      	add	r0, r3
 80a1734:	f003 f876 	bl	80a4824 <memcpy>
    }
    n_ += size;
 80a1738:	6922      	ldr	r2, [r4, #16]
 80a173a:	442a      	add	r2, r5
 80a173c:	6122      	str	r2, [r4, #16]
}
 80a173e:	bd38      	pop	{r3, r4, r5, pc}

080a1740 <_ZN5spark16JSONBufferWriter6printfEPKcz>:

void spark::JSONBufferWriter::printf(const char *fmt, ...) {
 80a1740:	b40e      	push	{r1, r2, r3}
 80a1742:	b517      	push	{r0, r1, r2, r4, lr}
 80a1744:	4604      	mov	r4, r0
 80a1746:	ab05      	add	r3, sp, #20
 80a1748:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
 80a174c:	68e1      	ldr	r1, [r4, #12]
    va_start(args, fmt);
 80a174e:	9301      	str	r3, [sp, #4]
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
 80a1750:	6903      	ldr	r3, [r0, #16]
 80a1752:	6880      	ldr	r0, [r0, #8]
 80a1754:	428b      	cmp	r3, r1
 80a1756:	bf34      	ite	cc
 80a1758:	1ac9      	subcc	r1, r1, r3
 80a175a:	2100      	movcs	r1, #0
 80a175c:	4418      	add	r0, r3
 80a175e:	9b01      	ldr	r3, [sp, #4]
 80a1760:	f7ff fe96 	bl	80a1490 <vsnprintf>
    va_end(args);
    n_ += n;
 80a1764:	6923      	ldr	r3, [r4, #16]
 80a1766:	4403      	add	r3, r0
 80a1768:	6123      	str	r3, [r4, #16]
}
 80a176a:	b003      	add	sp, #12
 80a176c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1770:	b003      	add	sp, #12
 80a1772:	4770      	bx	lr

080a1774 <_ZN5spark10JSONWriter6printfEPKcz>:
void spark::JSONWriter::printf(const char *fmt, ...) {
 80a1774:	b40e      	push	{r1, r2, r3}
 80a1776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a177a:	b087      	sub	sp, #28
 80a177c:	af00      	add	r7, sp, #0
 80a177e:	f107 0534 	add.w	r5, r7, #52	; 0x34
 80a1782:	f855 8b04 	ldr.w	r8, [r5], #4
 80a1786:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a1788:	462b      	mov	r3, r5
 80a178a:	4642      	mov	r2, r8
 80a178c:	2110      	movs	r1, #16
 80a178e:	f107 0008 	add.w	r0, r7, #8
    va_start(args, fmt);
 80a1792:	607d      	str	r5, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a1794:	f7ff fe7c 	bl	80a1490 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 80a1798:	280f      	cmp	r0, #15
 80a179a:	d91b      	bls.n	80a17d4 <_ZN5spark10JSONWriter6printfEPKcz+0x60>
        char buf[n + 1]; // Use larger buffer
 80a179c:	f100 0308 	add.w	r3, r0, #8
 80a17a0:	f023 0307 	bic.w	r3, r3, #7
        }
 80a17a4:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 80a17a6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a17aa:	4642      	mov	r2, r8
 80a17ac:	1c41      	adds	r1, r0, #1
 80a17ae:	462b      	mov	r3, r5
 80a17b0:	4668      	mov	r0, sp
        va_start(args, fmt);
 80a17b2:	607d      	str	r5, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a17b4:	f7ff fe6c 	bl	80a1490 <vsnprintf>
        if (n > 0) {
 80a17b8:	1e02      	subs	r2, r0, #0
 80a17ba:	dd04      	ble.n	80a17c6 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
 80a17bc:	6823      	ldr	r3, [r4, #0]
 80a17be:	4669      	mov	r1, sp
 80a17c0:	4620      	mov	r0, r4
 80a17c2:	689b      	ldr	r3, [r3, #8]
 80a17c4:	4798      	blx	r3
 80a17c6:	46b5      	mov	sp, r6
}
 80a17c8:	371c      	adds	r7, #28
 80a17ca:	46bd      	mov	sp, r7
 80a17cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a17d0:	b003      	add	sp, #12
 80a17d2:	4770      	bx	lr
    } else if (n > 0) {
 80a17d4:	2800      	cmp	r0, #0
 80a17d6:	d0f7      	beq.n	80a17c8 <_ZN5spark10JSONWriter6printfEPKcz+0x54>
        write(buf, n);
 80a17d8:	6823      	ldr	r3, [r4, #0]
 80a17da:	4602      	mov	r2, r0
 80a17dc:	689b      	ldr	r3, [r3, #8]
 80a17de:	4620      	mov	r0, r4
 80a17e0:	f107 0108 	add.w	r1, r7, #8
 80a17e4:	4798      	blx	r3
}
 80a17e6:	e7ef      	b.n	80a17c8 <_ZN5spark10JSONWriter6printfEPKcz+0x54>

080a17e8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a17e8:	b510      	push	{r4, lr}
 80a17ea:	4604      	mov	r4, r0
          _M_dispose();
 80a17ec:	6803      	ldr	r3, [r0, #0]
 80a17ee:	689b      	ldr	r3, [r3, #8]
 80a17f0:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a17f2:	68a3      	ldr	r3, [r4, #8]
 80a17f4:	3b01      	subs	r3, #1
 80a17f6:	60a3      	str	r3, [r4, #8]
 80a17f8:	b92b      	cbnz	r3, 80a1806 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
 80a17fa:	6823      	ldr	r3, [r4, #0]
 80a17fc:	4620      	mov	r0, r4
    }
 80a17fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 80a1802:	68db      	ldr	r3, [r3, #12]
 80a1804:	4718      	bx	r3
    }
 80a1806:	bd10      	pop	{r4, pc}

080a1808 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 80a1808:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 80a180a:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 80a180c:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 80a1810:	2201      	movs	r2, #1
 80a1812:	689b      	ldr	r3, [r3, #8]
 80a1814:	f10d 0107 	add.w	r1, sp, #7
 80a1818:	4798      	blx	r3
}
 80a181a:	b003      	add	sp, #12
 80a181c:	f85d fb04 	ldr.w	pc, [sp], #4

080a1820 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
    };

  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
 80a1820:	b538      	push	{r3, r4, r5, lr}
 80a1822:	680b      	ldr	r3, [r1, #0]
 80a1824:	4604      	mov	r4, r0
 80a1826:	6003      	str	r3, [r0, #0]
 80a1828:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 80a182a:	6843      	ldr	r3, [r0, #4]
 80a182c:	429d      	cmp	r5, r3
 80a182e:	d00c      	beq.n	80a184a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
 80a1830:	b115      	cbz	r5, 80a1838 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
 80a1832:	686b      	ldr	r3, [r5, #4]
 80a1834:	3301      	adds	r3, #1
 80a1836:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 80a1838:	6860      	ldr	r0, [r4, #4]
 80a183a:	b128      	cbz	r0, 80a1848 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
 80a183c:	6843      	ldr	r3, [r0, #4]
 80a183e:	3b01      	subs	r3, #1
 80a1840:	6043      	str	r3, [r0, #4]
 80a1842:	b90b      	cbnz	r3, 80a1848 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
 80a1844:	f7ff ffd0 	bl	80a17e8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
 80a1848:	6065      	str	r5, [r4, #4]
    class __shared_ptr
 80a184a:	4620      	mov	r0, r4
 80a184c:	bd38      	pop	{r3, r4, r5, pc}

080a184e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a184e:	460b      	mov	r3, r1
 80a1850:	4611      	mov	r1, r2
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
 80a1852:	2200      	movs	r2, #0
 80a1854:	b510      	push	{r4, lr}
 80a1856:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 80a1858:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 80a185c:	6083      	str	r3, [r0, #8]
    if (t) {
 80a185e:	b90b      	cbnz	r3, 80a1864 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 80a1860:	4620      	mov	r0, r4
 80a1862:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
 80a1864:	f7ff ffdc 	bl	80a1820 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
 80a1868:	e7fa      	b.n	80a1860 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

080a186a <_ZNK5spark9JSONValue4typeEv>:
spark::JSONType spark::JSONValue::type() const {
 80a186a:	4603      	mov	r3, r0
    if (!t_) {
 80a186c:	6880      	ldr	r0, [r0, #8]
 80a186e:	b320      	cbz	r0, 80a18ba <_ZNK5spark9JSONValue4typeEv+0x50>
    switch (t_->type) {
 80a1870:	7802      	ldrb	r2, [r0, #0]
 80a1872:	2a03      	cmp	r2, #3
 80a1874:	d81a      	bhi.n	80a18ac <_ZNK5spark9JSONValue4typeEv+0x42>
 80a1876:	e8df f002 	tbb	[pc, r2]
 80a187a:	1704      	.short	0x1704
 80a187c:	1b02      	.short	0x1b02
 80a187e:	2005      	movs	r0, #5
 80a1880:	4770      	bx	lr
        const char c = d_->json[t_->start];
 80a1882:	681b      	ldr	r3, [r3, #0]
 80a1884:	685a      	ldr	r2, [r3, #4]
 80a1886:	6843      	ldr	r3, [r0, #4]
 80a1888:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 80a188a:	282d      	cmp	r0, #45	; 0x2d
 80a188c:	d012      	beq.n	80a18b4 <_ZNK5spark9JSONValue4typeEv+0x4a>
 80a188e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80a1892:	2b09      	cmp	r3, #9
 80a1894:	d90e      	bls.n	80a18b4 <_ZNK5spark9JSONValue4typeEv+0x4a>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 80a1896:	2874      	cmp	r0, #116	; 0x74
 80a1898:	d00e      	beq.n	80a18b8 <_ZNK5spark9JSONValue4typeEv+0x4e>
 80a189a:	2866      	cmp	r0, #102	; 0x66
 80a189c:	d00c      	beq.n	80a18b8 <_ZNK5spark9JSONValue4typeEv+0x4e>
        return JSON_TYPE_INVALID;
 80a189e:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 80a18a2:	4258      	negs	r0, r3
 80a18a4:	4158      	adcs	r0, r3
 80a18a6:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 80a18a8:	2006      	movs	r0, #6
 80a18aa:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 80a18ac:	2000      	movs	r0, #0
 80a18ae:	4770      	bx	lr
        return JSON_TYPE_STRING;
 80a18b0:	2004      	movs	r0, #4
 80a18b2:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 80a18b4:	2003      	movs	r0, #3
 80a18b6:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 80a18b8:	2002      	movs	r0, #2
}
 80a18ba:	4770      	bx	lr

080a18bc <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 80a18bc:	b510      	push	{r4, lr}
 80a18be:	4604      	mov	r4, r0
    switch (type()) {
 80a18c0:	f7ff ffd3 	bl	80a186a <_ZNK5spark9JSONValue4typeEv>
 80a18c4:	2802      	cmp	r0, #2
 80a18c6:	d00e      	beq.n	80a18e6 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 80a18c8:	1ec3      	subs	r3, r0, #3
 80a18ca:	b2db      	uxtb	r3, r3
 80a18cc:	2b01      	cmp	r3, #1
 80a18ce:	d814      	bhi.n	80a18fa <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 80a18d0:	6822      	ldr	r2, [r4, #0]
 80a18d2:	68a3      	ldr	r3, [r4, #8]
 80a18d4:	6850      	ldr	r0, [r2, #4]
 80a18d6:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 80a18d8:	220a      	movs	r2, #10
}
 80a18da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 80a18de:	2100      	movs	r1, #0
 80a18e0:	4418      	add	r0, r3
 80a18e2:	f003 b8c5 	b.w	80a4a70 <strtol>
        const char* const s = d_->json + t_->start;
 80a18e6:	6822      	ldr	r2, [r4, #0]
 80a18e8:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 80a18ea:	6852      	ldr	r2, [r2, #4]
 80a18ec:	685b      	ldr	r3, [r3, #4]
 80a18ee:	5cd0      	ldrb	r0, [r2, r3]
 80a18f0:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 80a18f4:	4258      	negs	r0, r3
 80a18f6:	4158      	adcs	r0, r3
}
 80a18f8:	bd10      	pop	{r4, pc}
    switch (type()) {
 80a18fa:	2000      	movs	r0, #0
 80a18fc:	e7fc      	b.n	80a18f8 <_ZNK5spark9JSONValue5toIntEv+0x3c>
	...

080a1900 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a1900:	460b      	mov	r3, r1
 80a1902:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 80a1904:	2200      	movs	r2, #0
 80a1906:	b510      	push	{r4, lr}
 80a1908:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 80a190a:	e9c0 2200 	strd	r2, r2, [r0]
        n_(0) {
 80a190e:	480d      	ldr	r0, [pc, #52]	; (80a1944 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 80a1910:	e9c4 0202 	strd	r0, r2, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 80a1914:	b1a3      	cbz	r3, 80a1940 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
 80a1916:	781a      	ldrb	r2, [r3, #0]
 80a1918:	2a03      	cmp	r2, #3
 80a191a:	d006      	beq.n	80a192a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2a>
 80a191c:	b982      	cbnz	r2, 80a1940 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 80a191e:	680a      	ldr	r2, [r1, #0]
 80a1920:	6850      	ldr	r0, [r2, #4]
 80a1922:	685a      	ldr	r2, [r3, #4]
 80a1924:	5c82      	ldrb	r2, [r0, r2]
 80a1926:	2a6e      	cmp	r2, #110	; 0x6e
 80a1928:	d007      	beq.n	80a193a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3a>
            s_ = d->json + t->start;
 80a192a:	680a      	ldr	r2, [r1, #0]
 80a192c:	6858      	ldr	r0, [r3, #4]
 80a192e:	6852      	ldr	r2, [r2, #4]
            n_ = t->end - t->start;
 80a1930:	689b      	ldr	r3, [r3, #8]
            s_ = d->json + t->start;
 80a1932:	4402      	add	r2, r0
            n_ = t->end - t->start;
 80a1934:	1a1b      	subs	r3, r3, r0
            s_ = d->json + t->start;
 80a1936:	60a2      	str	r2, [r4, #8]
            n_ = t->end - t->start;
 80a1938:	60e3      	str	r3, [r4, #12]
 80a193a:	4620      	mov	r0, r4
 80a193c:	f7ff ff70 	bl	80a1820 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
 80a1940:	4620      	mov	r0, r4
 80a1942:	bd10      	pop	{r4, pc}
 80a1944:	080a4d69 	.word	0x080a4d69

080a1948 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a1948:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 80a194a:	2500      	movs	r5, #0
 80a194c:	460b      	mov	r3, r1
 80a194e:	4604      	mov	r4, r0
 80a1950:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 80a1952:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 80a1956:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80a195a:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 80a195e:	b14b      	cbz	r3, 80a1974 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 80a1960:	781a      	ldrb	r2, [r3, #0]
 80a1962:	2a01      	cmp	r2, #1
 80a1964:	d106      	bne.n	80a1974 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 80a1966:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 80a196a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 80a196c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 80a196e:	6143      	str	r3, [r0, #20]
 80a1970:	f7ff ff56 	bl	80a1820 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
 80a1974:	4620      	mov	r0, r4
 80a1976:	bd38      	pop	{r3, r4, r5, pc}

080a1978 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 80a1978:	b510      	push	{r4, lr}
    if (!n_) {
 80a197a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 80a197c:	4604      	mov	r4, r0
    if (!n_) {
 80a197e:	b163      	cbz	r3, 80a199a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 80a1980:	6880      	ldr	r0, [r0, #8]
    --n_;
 80a1982:	3b01      	subs	r3, #1
    k_ = t_; // Name
 80a1984:	60e0      	str	r0, [r4, #12]
    ++t_;
 80a1986:	3010      	adds	r0, #16
 80a1988:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 80a198a:	6120      	str	r0, [r4, #16]
    --n_;
 80a198c:	6163      	str	r3, [r4, #20]
    if (n_) {
 80a198e:	b113      	cbz	r3, 80a1996 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 80a1990:	f7ff fea4 	bl	80a16dc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 80a1994:	60a0      	str	r0, [r4, #8]
    return true;
 80a1996:	2001      	movs	r0, #1
 80a1998:	e000      	b.n	80a199c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 80a199a:	4618      	mov	r0, r3
}
 80a199c:	bd10      	pop	{r4, pc}

080a199e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 80a199e:	b510      	push	{r4, lr}
    write('}');
 80a19a0:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 80a19a2:	4604      	mov	r4, r0
    write('}');
 80a19a4:	f7ff ff30 	bl	80a1808 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 80a19a8:	2301      	movs	r3, #1
}
 80a19aa:	4620      	mov	r0, r4
    state_ = NEXT;
 80a19ac:	7123      	strb	r3, [r4, #4]
}
 80a19ae:	bd10      	pop	{r4, pc}

080a19b0 <_ZN5spark10JSONWriter14writeSeparatorEv>:
void spark::JSONWriter::writeSeparator() {
 80a19b0:	b508      	push	{r3, lr}
    switch (state_) {
 80a19b2:	7903      	ldrb	r3, [r0, #4]
 80a19b4:	2b01      	cmp	r3, #1
 80a19b6:	d002      	beq.n	80a19be <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 80a19b8:	2b02      	cmp	r3, #2
 80a19ba:	d004      	beq.n	80a19c6 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
}
 80a19bc:	bd08      	pop	{r3, pc}
        write(',');
 80a19be:	212c      	movs	r1, #44	; 0x2c
        write(':');
 80a19c0:	f7ff ff22 	bl	80a1808 <_ZN5spark10JSONWriter5writeEc>
}
 80a19c4:	e7fa      	b.n	80a19bc <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 80a19c6:	213a      	movs	r1, #58	; 0x3a
 80a19c8:	e7fa      	b.n	80a19c0 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

080a19ca <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 80a19ca:	b510      	push	{r4, lr}
 80a19cc:	4604      	mov	r4, r0
    writeSeparator();
 80a19ce:	f7ff ffef 	bl	80a19b0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 80a19d2:	4620      	mov	r0, r4
 80a19d4:	217b      	movs	r1, #123	; 0x7b
 80a19d6:	f7ff ff17 	bl	80a1808 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 80a19da:	2300      	movs	r3, #0
}
 80a19dc:	4620      	mov	r0, r4
    state_ = BEGIN;
 80a19de:	7123      	strb	r3, [r4, #4]
}
 80a19e0:	bd10      	pop	{r4, pc}
	...

080a19e4 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 80a19e4:	b538      	push	{r3, r4, r5, lr}
 80a19e6:	4604      	mov	r4, r0
 80a19e8:	460d      	mov	r5, r1
    writeSeparator();
 80a19ea:	f7ff ffe1 	bl	80a19b0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 80a19ee:	6823      	ldr	r3, [r4, #0]
 80a19f0:	4620      	mov	r0, r4
 80a19f2:	462a      	mov	r2, r5
 80a19f4:	68db      	ldr	r3, [r3, #12]
 80a19f6:	4903      	ldr	r1, [pc, #12]	; (80a1a04 <_ZN5spark10JSONWriter5valueEi+0x20>)
 80a19f8:	4798      	blx	r3
    state_ = NEXT;
 80a19fa:	2301      	movs	r3, #1
}
 80a19fc:	4620      	mov	r0, r4
    state_ = NEXT;
 80a19fe:	7123      	strb	r3, [r4, #4]
}
 80a1a00:	bd38      	pop	{r3, r4, r5, pc}
 80a1a02:	bf00      	nop
 80a1a04:	080a4ce4 	.word	0x080a4ce4

080a1a08 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 80a1a08:	b538      	push	{r3, r4, r5, lr}
 80a1a0a:	4604      	mov	r4, r0
 80a1a0c:	460d      	mov	r5, r1
    writeSeparator();
 80a1a0e:	f7ff ffcf 	bl	80a19b0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 80a1a12:	6823      	ldr	r3, [r4, #0]
 80a1a14:	4620      	mov	r0, r4
 80a1a16:	462a      	mov	r2, r5
 80a1a18:	68db      	ldr	r3, [r3, #12]
 80a1a1a:	4903      	ldr	r1, [pc, #12]	; (80a1a28 <_ZN5spark10JSONWriter5valueEj+0x20>)
 80a1a1c:	4798      	blx	r3
    state_ = NEXT;
 80a1a1e:	2301      	movs	r3, #1
}
 80a1a20:	4620      	mov	r0, r4
    state_ = NEXT;
 80a1a22:	7123      	strb	r3, [r4, #4]
}
 80a1a24:	bd38      	pop	{r3, r4, r5, pc}
 80a1a26:	bf00      	nop
 80a1a28:	080a4ce7 	.word	0x080a4ce7

080a1a2c <_ZN5spark10JSONWriter5valueEd>:
spark::JSONWriter& spark::JSONWriter::value(double val) {
 80a1a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1a2e:	4604      	mov	r4, r0
 80a1a30:	461f      	mov	r7, r3
 80a1a32:	4616      	mov	r6, r2
    writeSeparator();
 80a1a34:	f7ff ffbc 	bl	80a19b0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%g", val);
 80a1a38:	6823      	ldr	r3, [r4, #0]
 80a1a3a:	4620      	mov	r0, r4
 80a1a3c:	68dd      	ldr	r5, [r3, #12]
 80a1a3e:	4632      	mov	r2, r6
 80a1a40:	463b      	mov	r3, r7
 80a1a42:	4903      	ldr	r1, [pc, #12]	; (80a1a50 <_ZN5spark10JSONWriter5valueEd+0x24>)
 80a1a44:	47a8      	blx	r5
    state_ = NEXT;
 80a1a46:	2301      	movs	r3, #1
}
 80a1a48:	4620      	mov	r0, r4
    state_ = NEXT;
 80a1a4a:	7123      	strb	r3, [r4, #4]
}
 80a1a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1a4e:	bf00      	nop
 80a1a50:	080a4cea 	.word	0x080a4cea

080a1a54 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 80a1a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1a58:	460d      	mov	r5, r1
 80a1a5a:	4617      	mov	r7, r2
    write('"');
 80a1a5c:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 80a1a5e:	4604      	mov	r4, r0
    write('"');
 80a1a60:	f7ff fed2 	bl	80a1808 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
 80a1a64:	4629      	mov	r1, r5
                printf("u%04x", (unsigned)c);
 80a1a66:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80a1b00 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
    const char* const end = str + size;
 80a1a6a:	442f      	add	r7, r5
    while (s != end) {
 80a1a6c:	42bd      	cmp	r5, r7
 80a1a6e:	462a      	mov	r2, r5
 80a1a70:	d038      	beq.n	80a1ae4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
 80a1a72:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
 80a1a76:	2e22      	cmp	r6, #34	; 0x22
 80a1a78:	d003      	beq.n	80a1a82 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 80a1a7a:	2e5c      	cmp	r6, #92	; 0x5c
 80a1a7c:	d001      	beq.n	80a1a82 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 80a1a7e:	2e1f      	cmp	r6, #31
 80a1a80:	d8f4      	bhi.n	80a1a6c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 80a1a82:	6823      	ldr	r3, [r4, #0]
 80a1a84:	1a52      	subs	r2, r2, r1
 80a1a86:	4620      	mov	r0, r4
 80a1a88:	689b      	ldr	r3, [r3, #8]
 80a1a8a:	4798      	blx	r3
            write('\\');
 80a1a8c:	215c      	movs	r1, #92	; 0x5c
 80a1a8e:	4620      	mov	r0, r4
 80a1a90:	f7ff feba 	bl	80a1808 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 80a1a94:	2e0d      	cmp	r6, #13
 80a1a96:	d80a      	bhi.n	80a1aae <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
 80a1a98:	2e07      	cmp	r6, #7
 80a1a9a:	d91c      	bls.n	80a1ad6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
 80a1a9c:	f1a6 0308 	sub.w	r3, r6, #8
 80a1aa0:	2b05      	cmp	r3, #5
 80a1aa2:	d818      	bhi.n	80a1ad6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
 80a1aa4:	e8df f003 	tbb	[pc, r3]
 80a1aa8:	17110f0d 	.word	0x17110f0d
 80a1aac:	1513      	.short	0x1513
 80a1aae:	2e22      	cmp	r6, #34	; 0x22
 80a1ab0:	d001      	beq.n	80a1ab6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 80a1ab2:	2e5c      	cmp	r6, #92	; 0x5c
 80a1ab4:	d10f      	bne.n	80a1ad6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
 80a1ab6:	4631      	mov	r1, r6
                write('b');
 80a1ab8:	4620      	mov	r0, r4
 80a1aba:	f7ff fea5 	bl	80a1808 <_ZN5spark10JSONWriter5writeEc>
            str = s + 1;
 80a1abe:	4629      	mov	r1, r5
    while (s != end) {
 80a1ac0:	e7d4      	b.n	80a1a6c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 80a1ac2:	2162      	movs	r1, #98	; 0x62
 80a1ac4:	e7f8      	b.n	80a1ab8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
 80a1ac6:	2174      	movs	r1, #116	; 0x74
 80a1ac8:	e7f6      	b.n	80a1ab8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
 80a1aca:	216e      	movs	r1, #110	; 0x6e
 80a1acc:	e7f4      	b.n	80a1ab8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
 80a1ace:	2166      	movs	r1, #102	; 0x66
 80a1ad0:	e7f2      	b.n	80a1ab8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
 80a1ad2:	2172      	movs	r1, #114	; 0x72
 80a1ad4:	e7f0      	b.n	80a1ab8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
 80a1ad6:	6823      	ldr	r3, [r4, #0]
 80a1ad8:	4632      	mov	r2, r6
 80a1ada:	4641      	mov	r1, r8
 80a1adc:	4620      	mov	r0, r4
 80a1ade:	68db      	ldr	r3, [r3, #12]
 80a1ae0:	4798      	blx	r3
                break;
 80a1ae2:	e7ec      	b.n	80a1abe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
    if (s != str) {
 80a1ae4:	428d      	cmp	r5, r1
 80a1ae6:	d004      	beq.n	80a1af2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
 80a1ae8:	6823      	ldr	r3, [r4, #0]
 80a1aea:	4620      	mov	r0, r4
 80a1aec:	689b      	ldr	r3, [r3, #8]
 80a1aee:	1a6a      	subs	r2, r5, r1
 80a1af0:	4798      	blx	r3
    write('"');
 80a1af2:	2122      	movs	r1, #34	; 0x22
 80a1af4:	4620      	mov	r0, r4
 80a1af6:	f7ff fe87 	bl	80a1808 <_ZN5spark10JSONWriter5writeEc>
}
 80a1afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1afe:	bf00      	nop
 80a1b00:	080a4ced 	.word	0x080a4ced

080a1b04 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 80a1b04:	b570      	push	{r4, r5, r6, lr}
 80a1b06:	4604      	mov	r4, r0
 80a1b08:	460d      	mov	r5, r1
 80a1b0a:	4616      	mov	r6, r2
    writeSeparator();
 80a1b0c:	f7ff ff50 	bl	80a19b0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 80a1b10:	4620      	mov	r0, r4
 80a1b12:	4632      	mov	r2, r6
 80a1b14:	4629      	mov	r1, r5
 80a1b16:	f7ff ff9d 	bl	80a1a54 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 80a1b1a:	2302      	movs	r3, #2
}
 80a1b1c:	4620      	mov	r0, r4
    state_ = VALUE;
 80a1b1e:	7123      	strb	r3, [r4, #4]
}
 80a1b20:	bd70      	pop	{r4, r5, r6, pc}

080a1b22 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 80a1b22:	b570      	push	{r4, r5, r6, lr}
 80a1b24:	4604      	mov	r4, r0
 80a1b26:	460d      	mov	r5, r1
 80a1b28:	4616      	mov	r6, r2
    writeSeparator();
 80a1b2a:	f7ff ff41 	bl	80a19b0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 80a1b2e:	4620      	mov	r0, r4
 80a1b30:	4632      	mov	r2, r6
 80a1b32:	4629      	mov	r1, r5
 80a1b34:	f7ff ff8e 	bl	80a1a54 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 80a1b38:	2301      	movs	r3, #1
}
 80a1b3a:	4620      	mov	r0, r4
    state_ = NEXT;
 80a1b3c:	7123      	strb	r3, [r4, #4]
}
 80a1b3e:	bd70      	pop	{r4, r5, r6, pc}

080a1b40 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 80a1b40:	6880      	ldr	r0, [r0, #8]
 80a1b42:	6803      	ldr	r3, [r0, #0]
 80a1b44:	68db      	ldr	r3, [r3, #12]
 80a1b46:	4718      	bx	r3

080a1b48 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 80a1b48:	4770      	bx	lr

080a1b4a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 80a1b4a:	4608      	mov	r0, r1
 80a1b4c:	b111      	cbz	r1, 80a1b54 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 80a1b4e:	680b      	ldr	r3, [r1, #0]
 80a1b50:	685b      	ldr	r3, [r3, #4]
 80a1b52:	4718      	bx	r3
}
 80a1b54:	4770      	bx	lr

080a1b56 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 80a1b56:	4770      	bx	lr

080a1b58 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 80a1b58:	4770      	bx	lr

080a1b5a <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 80a1b5a:	4770      	bx	lr

080a1b5c <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 80a1b5c:	4770      	bx	lr

080a1b5e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 80a1b5e:	b538      	push	{r3, r4, r5, lr}
 80a1b60:	4604      	mov	r4, r0
 80a1b62:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 80a1b64:	6800      	ldr	r0, [r0, #0]
 80a1b66:	212e      	movs	r1, #46	; 0x2e
 80a1b68:	f002 febd 	bl	80a48e6 <strchrnul>
    size = s - category;
 80a1b6c:	6823      	ldr	r3, [r4, #0]
    const char *s = strchrnul(category, '.');
 80a1b6e:	4602      	mov	r2, r0
    size = s - category;
 80a1b70:	1ac0      	subs	r0, r0, r3
 80a1b72:	6028      	str	r0, [r5, #0]
    if (size) {
 80a1b74:	b120      	cbz	r0, 80a1b80 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x22>
        if (*s) {
 80a1b76:	7813      	ldrb	r3, [r2, #0]
 80a1b78:	b103      	cbz	r3, 80a1b7c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1e>
            ++s;
 80a1b7a:	3201      	adds	r2, #1
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1b7c:	6820      	ldr	r0, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1b7e:	6022      	str	r2, [r4, #0]
}
 80a1b80:	bd38      	pop	{r3, r4, r5, pc}

080a1b82 <_ZN5spark16JSONStreamWriterD0Ev>:
 80a1b82:	b510      	push	{r4, lr}
 80a1b84:	4604      	mov	r4, r0
 80a1b86:	210c      	movs	r1, #12
 80a1b88:	f001 feb0 	bl	80a38ec <_ZdlPvj>
 80a1b8c:	4620      	mov	r0, r4
 80a1b8e:	bd10      	pop	{r4, pc}

080a1b90 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 80a1b90:	b510      	push	{r4, lr}
 80a1b92:	4604      	mov	r4, r0
 80a1b94:	2104      	movs	r1, #4
 80a1b96:	f001 fea9 	bl	80a38ec <_ZdlPvj>
 80a1b9a:	4620      	mov	r0, r4
 80a1b9c:	bd10      	pop	{r4, pc}

080a1b9e <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 80a1b9e:	b510      	push	{r4, lr}
 80a1ba0:	4604      	mov	r4, r0
 80a1ba2:	2104      	movs	r1, #4
 80a1ba4:	f001 fea2 	bl	80a38ec <_ZdlPvj>
 80a1ba8:	4620      	mov	r0, r4
 80a1baa:	bd10      	pop	{r4, pc}

080a1bac <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 80a1bac:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 80a1bae:	f002 fea4 	bl	80a48fa <strcmp>
}
 80a1bb2:	fab0 f080 	clz	r0, r0
 80a1bb6:	0940      	lsrs	r0, r0, #5
 80a1bb8:	bd08      	pop	{r3, pc}

080a1bba <__tcf_1>:
 80a1bba:	4770      	bx	lr

080a1bbc <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 80a1bbc:	b510      	push	{r4, lr}
 80a1bbe:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
 80a1bc0:	f001 fcda 	bl	80a3578 <_Z16_fetch_usbserialv>
 80a1bc4:	4284      	cmp	r4, r0
 80a1bc6:	d105      	bne.n	80a1bd4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 80a1bc8:	f001 fcd6 	bl	80a3578 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
 80a1bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        USBSerial1.end();
 80a1bd0:	f001 bcb8 	b.w	80a3544 <_ZN9USBSerial3endEv>
    if (stream == &USBSerial1) {
 80a1bd4:	f001 fd0a 	bl	80a35ec <_Z17_fetch_usbserial1v>
 80a1bd8:	4284      	cmp	r4, r0
 80a1bda:	d102      	bne.n	80a1be2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x26>
        USBSerial1.end();
 80a1bdc:	f001 fd06 	bl	80a35ec <_Z17_fetch_usbserial1v>
 80a1be0:	e7f4      	b.n	80a1bcc <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x10>
    if (stream == &Serial1) {
 80a1be2:	f001 fc35 	bl	80a3450 <_Z22__fetch_global_Serial1v>
 80a1be6:	4284      	cmp	r4, r0
 80a1be8:	d105      	bne.n	80a1bf6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
        Serial1.end();
 80a1bea:	f001 fc31 	bl	80a3450 <_Z22__fetch_global_Serial1v>
}
 80a1bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 80a1bf2:	f001 bc2a 	b.w	80a344a <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 80a1bf6:	b12c      	cbz	r4, 80a1c04 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x48>
 80a1bf8:	6823      	ldr	r3, [r4, #0]
 80a1bfa:	4620      	mov	r0, r4
}
 80a1bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1c00:	685b      	ldr	r3, [r3, #4]
 80a1c02:	4718      	bx	r3
 80a1c04:	bd10      	pop	{r4, pc}

080a1c06 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 80a1c06:	b538      	push	{r3, r4, r5, lr}
 80a1c08:	4605      	mov	r5, r0
    return value(val, strlen(val));
 80a1c0a:	4608      	mov	r0, r1
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 80a1c0c:	460c      	mov	r4, r1
    return value(val, strlen(val));
 80a1c0e:	f002 fe86 	bl	80a491e <strlen>
 80a1c12:	4621      	mov	r1, r4
 80a1c14:	4602      	mov	r2, r0
 80a1c16:	4628      	mov	r0, r5
}
 80a1c18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return value(val, strlen(val));
 80a1c1c:	f7ff bf81 	b.w	80a1b22 <_ZN5spark10JSONWriter5valueEPKcj>

080a1c20 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 80a1c20:	b570      	push	{r4, r5, r6, lr}
 80a1c22:	4604      	mov	r4, r0
    write(str, strlen(str));
 80a1c24:	4608      	mov	r0, r1
inline void spark::StreamLogHandler::write(const char *str) {
 80a1c26:	460d      	mov	r5, r1
    write(str, strlen(str));
 80a1c28:	f002 fe79 	bl	80a491e <strlen>
 80a1c2c:	6823      	ldr	r3, [r4, #0]
 80a1c2e:	4602      	mov	r2, r0
 80a1c30:	4629      	mov	r1, r5
 80a1c32:	4620      	mov	r0, r4
}
 80a1c34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    write(str, strlen(str));
 80a1c38:	68db      	ldr	r3, [r3, #12]
 80a1c3a:	4718      	bx	r3

080a1c3c <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 80a1c3c:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 80a1c3e:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 80a1c40:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 80a1c44:	2201      	movs	r2, #1
 80a1c46:	68db      	ldr	r3, [r3, #12]
 80a1c48:	f10d 0107 	add.w	r1, sp, #7
 80a1c4c:	4798      	blx	r3
}
 80a1c4e:	b003      	add	sp, #12
 80a1c50:	f85d fb04 	ldr.w	pc, [sp], #4

080a1c54 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
 80a1c54:	b40e      	push	{r1, r2, r3}
 80a1c56:	b503      	push	{r0, r1, lr}
 80a1c58:	ab03      	add	r3, sp, #12
 80a1c5a:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
 80a1c5e:	2100      	movs	r1, #0
 80a1c60:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
 80a1c62:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
 80a1c64:	f001 f814 	bl	80a2c90 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
 80a1c68:	b002      	add	sp, #8
 80a1c6a:	f85d eb04 	ldr.w	lr, [sp], #4
 80a1c6e:	b003      	add	sp, #12
 80a1c70:	4770      	bx	lr
	...

080a1c74 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 80a1c74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 80a1c78:	f04f 0814 	mov.w	r8, #20
 80a1c7c:	e9d0 9500 	ldrd	r9, r5, [r0]
 80a1c80:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 80a1c82:	464c      	mov	r4, r9
 80a1c84:	fb08 f505 	mul.w	r5, r8, r5
 80a1c88:	9300      	str	r3, [sp, #0]
 80a1c8a:	10ab      	asrs	r3, r5, #2
 80a1c8c:	4d17      	ldr	r5, [pc, #92]	; (80a1cec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
 80a1c8e:	435d      	muls	r5, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 80a1c90:	2d00      	cmp	r5, #0
 80a1c92:	dd23      	ble.n	80a1cdc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
 80a1c94:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 80a1c96:	fb08 f006 	mul.w	r0, r8, r6
 80a1c9a:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 80a1c9e:	f8ba b004 	ldrh.w	fp, [sl, #4]
 80a1ca2:	463a      	mov	r2, r7
 80a1ca4:	455f      	cmp	r7, fp
 80a1ca6:	bf28      	it	cs
 80a1ca8:	465a      	movcs	r2, fp
 80a1caa:	5820      	ldr	r0, [r4, r0]
 80a1cac:	9101      	str	r1, [sp, #4]
 80a1cae:	f002 fe3e 	bl	80a492e <strncmp>
                if (cmp == 0) {
 80a1cb2:	2301      	movs	r3, #1
 80a1cb4:	9901      	ldr	r1, [sp, #4]
 80a1cb6:	b978      	cbnz	r0, 80a1cd8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
 80a1cb8:	455f      	cmp	r7, fp
 80a1cba:	d103      	bne.n	80a1cc4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 80a1cbc:	9a00      	ldr	r2, [sp, #0]
 80a1cbe:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 80a1cc0:	4635      	mov	r5, r6
 80a1cc2:	e7e5      	b.n	80a1c90 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
 80a1cc4:	bf8c      	ite	hi
 80a1cc6:	2001      	movhi	r0, #1
 80a1cc8:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 80a1cca:	2800      	cmp	r0, #0
 80a1ccc:	d0f8      	beq.n	80a1cc0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 80a1cce:	1bae      	subs	r6, r5, r6
	      ++__first;
 80a1cd0:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
 80a1cd4:	3e01      	subs	r6, #1
 80a1cd6:	e7f3      	b.n	80a1cc0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
 80a1cd8:	0fc0      	lsrs	r0, r0, #31
 80a1cda:	e7f6      	b.n	80a1cca <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
 80a1cdc:	eba4 0409 	sub.w	r4, r4, r9
}
 80a1ce0:	4802      	ldr	r0, [pc, #8]	; (80a1cec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
 80a1ce2:	10a4      	asrs	r4, r4, #2
 80a1ce4:	4360      	muls	r0, r4
 80a1ce6:	b003      	add	sp, #12
 80a1ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1cec:	cccccccd 	.word	0xcccccccd

080a1cf0 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 80a1cf0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 80a1cf2:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 80a1cf4:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 80a1cf6:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 80a1cf8:	b303      	cbz	r3, 80a1d3c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 80a1cfa:	b1f9      	cbz	r1, 80a1d3c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 80a1cfc:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 80a1cfe:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 80a1d02:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 80a1d04:	a903      	add	r1, sp, #12
 80a1d06:	a801      	add	r0, sp, #4
 80a1d08:	f7ff ff29 	bl	80a1b5e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 80a1d0c:	4601      	mov	r1, r0
 80a1d0e:	b1a8      	cbz	r0, 80a1d3c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 80a1d10:	f10d 030b 	add.w	r3, sp, #11
 80a1d14:	4620      	mov	r0, r4
 80a1d16:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 80a1d18:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 80a1d1c:	f7ff ffaa 	bl	80a1c74 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 80a1d20:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80a1d24:	b153      	cbz	r3, 80a1d3c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 80a1d26:	2314      	movs	r3, #20
 80a1d28:	6824      	ldr	r4, [r4, #0]
 80a1d2a:	fb03 4400 	mla	r4, r3, r0, r4
            if (node.level >= 0) {
 80a1d2e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 80a1d32:	3408      	adds	r4, #8
            if (node.level >= 0) {
 80a1d34:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 80a1d36:	bfa8      	it	ge
 80a1d38:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
 80a1d3a:	e7e3      	b.n	80a1d04 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 80a1d3c:	4630      	mov	r0, r6
 80a1d3e:	b004      	add	sp, #16
 80a1d40:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1d44 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 80a1d44:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 80a1d46:	4c09      	ldr	r4, [pc, #36]	; (80a1d6c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 80a1d48:	7823      	ldrb	r3, [r4, #0]
 80a1d4a:	f3bf 8f5b 	dmb	ish
 80a1d4e:	07db      	lsls	r3, r3, #31
 80a1d50:	d409      	bmi.n	80a1d66 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
 80a1d52:	4620      	mov	r0, r4
 80a1d54:	f7fe f9b4 	bl	80a00c0 <__cxa_guard_acquire>
 80a1d58:	b128      	cbz	r0, 80a1d66 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
 80a1d5a:	4620      	mov	r0, r4
 80a1d5c:	f7fe f9b5 	bl	80a00ca <__cxa_guard_release>
 80a1d60:	4803      	ldr	r0, [pc, #12]	; (80a1d70 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 80a1d62:	f002 fd59 	bl	80a4818 <atexit>
}
 80a1d66:	4803      	ldr	r0, [pc, #12]	; (80a1d74 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
 80a1d68:	bd10      	pop	{r4, pc}
 80a1d6a:	bf00      	nop
 80a1d6c:	20000194 	.word	0x20000194
 80a1d70:	080a1b57 	.word	0x080a1b57
 80a1d74:	20000000 	.word	0x20000000

080a1d78 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 80a1d78:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 80a1d7a:	4c09      	ldr	r4, [pc, #36]	; (80a1da0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 80a1d7c:	7823      	ldrb	r3, [r4, #0]
 80a1d7e:	f3bf 8f5b 	dmb	ish
 80a1d82:	07db      	lsls	r3, r3, #31
 80a1d84:	d409      	bmi.n	80a1d9a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
 80a1d86:	4620      	mov	r0, r4
 80a1d88:	f7fe f99a 	bl	80a00c0 <__cxa_guard_acquire>
 80a1d8c:	b128      	cbz	r0, 80a1d9a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
 80a1d8e:	4620      	mov	r0, r4
 80a1d90:	f7fe f99b 	bl	80a00ca <__cxa_guard_release>
 80a1d94:	4803      	ldr	r0, [pc, #12]	; (80a1da4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 80a1d96:	f002 fd3f 	bl	80a4818 <atexit>
    return &factory;
}
 80a1d9a:	4803      	ldr	r0, [pc, #12]	; (80a1da8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
 80a1d9c:	bd10      	pop	{r4, pc}
 80a1d9e:	bf00      	nop
 80a1da0:	20000198 	.word	0x20000198
 80a1da4:	080a1bbb 	.word	0x080a1bbb
 80a1da8:	20000004 	.word	0x20000004

080a1dac <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 80a1dac:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 80a1dae:	2500      	movs	r5, #0
 80a1db0:	4604      	mov	r4, r0
 80a1db2:	e9c0 5500 	strd	r5, r5, [r0]
 80a1db6:	e9c0 5504 	strd	r5, r5, [r0, #16]
 80a1dba:	6085      	str	r5, [r0, #8]
 80a1dbc:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a1dbe:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
 80a1dc2:	f7ff f92d 	bl	80a1020 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 80a1dc6:	f7ff ffbd 	bl	80a1d44 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 80a1dca:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 80a1dcc:	f7ff ffd4 	bl	80a1d78 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 80a1dd0:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 80a1dd2:	6220      	str	r0, [r4, #32]
}
 80a1dd4:	4620      	mov	r0, r4
 80a1dd6:	bd38      	pop	{r3, r4, r5, pc}

080a1dd8 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 80a1dd8:	b510      	push	{r4, lr}
    static LogManager mgr;
 80a1dda:	4c0a      	ldr	r4, [pc, #40]	; (80a1e04 <_ZN5spark10LogManager8instanceEv+0x2c>)
 80a1ddc:	7823      	ldrb	r3, [r4, #0]
 80a1dde:	f3bf 8f5b 	dmb	ish
 80a1de2:	07db      	lsls	r3, r3, #31
 80a1de4:	d40c      	bmi.n	80a1e00 <_ZN5spark10LogManager8instanceEv+0x28>
 80a1de6:	4620      	mov	r0, r4
 80a1de8:	f7fe f96a 	bl	80a00c0 <__cxa_guard_acquire>
 80a1dec:	b140      	cbz	r0, 80a1e00 <_ZN5spark10LogManager8instanceEv+0x28>
 80a1dee:	4806      	ldr	r0, [pc, #24]	; (80a1e08 <_ZN5spark10LogManager8instanceEv+0x30>)
 80a1df0:	f7ff ffdc 	bl	80a1dac <_ZN5spark10LogManagerC1Ev>
 80a1df4:	4620      	mov	r0, r4
 80a1df6:	f7fe f968 	bl	80a00ca <__cxa_guard_release>
 80a1dfa:	4804      	ldr	r0, [pc, #16]	; (80a1e0c <_ZN5spark10LogManager8instanceEv+0x34>)
 80a1dfc:	f002 fd0c 	bl	80a4818 <atexit>
    return &mgr;
}
 80a1e00:	4801      	ldr	r0, [pc, #4]	; (80a1e08 <_ZN5spark10LogManager8instanceEv+0x30>)
 80a1e02:	bd10      	pop	{r4, pc}
 80a1e04:	20000190 	.word	0x20000190
 80a1e08:	200001a0 	.word	0x200001a0
 80a1e0c:	080a22d5 	.word	0x080a22d5

080a1e10 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 80a1e10:	2300      	movs	r3, #0
 80a1e12:	4a02      	ldr	r2, [pc, #8]	; (80a1e1c <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 80a1e14:	4902      	ldr	r1, [pc, #8]	; (80a1e20 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 80a1e16:	4803      	ldr	r0, [pc, #12]	; (80a1e24 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 80a1e18:	f7ff ba86 	b.w	80a1328 <log_set_callbacks>
 80a1e1c:	080a2161 	.word	0x080a2161
 80a1e20:	080a20ed 	.word	0x080a20ed
 80a1e24:	080a206d 	.word	0x080a206d

080a1e28 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 80a1e28:	2300      	movs	r3, #0
 80a1e2a:	461a      	mov	r2, r3
 80a1e2c:	4619      	mov	r1, r3
 80a1e2e:	4618      	mov	r0, r3
 80a1e30:	f7ff ba7a 	b.w	80a1328 <log_set_callbacks>

080a1e34 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 80a1e34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1e36:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 80a1e38:	690d      	ldr	r5, [r1, #16]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1e3a:	f851 3b04 	ldr.w	r3, [r1], #4
 80a1e3e:	a801      	add	r0, sp, #4
 80a1e40:	9300      	str	r3, [sp, #0]
 80a1e42:	f7ff fb4e 	bl	80a14e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a1e46:	466a      	mov	r2, sp
 80a1e48:	4629      	mov	r1, r5
 80a1e4a:	4620      	mov	r0, r4
 80a1e4c:	f7ff fcff 	bl	80a184e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1e50:	a801      	add	r0, sp, #4
 80a1e52:	f7ff fb30 	bl	80a14b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a1e56:	4620      	mov	r0, r4
 80a1e58:	b003      	add	sp, #12
 80a1e5a:	bd30      	pop	{r4, r5, pc}

080a1e5c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 80a1e5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1e5e:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 80a1e60:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1e62:	f851 3b04 	ldr.w	r3, [r1], #4
 80a1e66:	a801      	add	r0, sp, #4
 80a1e68:	9300      	str	r3, [sp, #0]
 80a1e6a:	f7ff fb3a 	bl	80a14e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a1e6e:	466a      	mov	r2, sp
 80a1e70:	4629      	mov	r1, r5
 80a1e72:	4620      	mov	r0, r4
 80a1e74:	f7ff fd68 	bl	80a1948 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 80a1e78:	a801      	add	r0, sp, #4
 80a1e7a:	f7ff fb1c 	bl	80a14b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a1e7e:	4620      	mov	r0, r4
 80a1e80:	b003      	add	sp, #12
 80a1e82:	bd30      	pop	{r4, r5, pc}

080a1e84 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 80a1e84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1e86:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 80a1e88:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1e8a:	f851 3b04 	ldr.w	r3, [r1], #4
 80a1e8e:	a801      	add	r0, sp, #4
 80a1e90:	9300      	str	r3, [sp, #0]
 80a1e92:	f7ff fb26 	bl	80a14e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a1e96:	466a      	mov	r2, sp
 80a1e98:	4629      	mov	r1, r5
 80a1e9a:	4620      	mov	r0, r4
 80a1e9c:	f7ff fd30 	bl	80a1900 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 80a1ea0:	a801      	add	r0, sp, #4
 80a1ea2:	f7ff fb08 	bl	80a14b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a1ea6:	4620      	mov	r0, r4
 80a1ea8:	b003      	add	sp, #12
 80a1eaa:	bd30      	pop	{r4, r5, pc}

080a1eac <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 80a1eac:	b570      	push	{r4, r5, r6, lr}
 80a1eae:	b08a      	sub	sp, #40	; 0x28
 80a1eb0:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 80a1eb2:	4601      	mov	r1, r0
 80a1eb4:	a804      	add	r0, sp, #16
 80a1eb6:	f7ff ffd1 	bl	80a1e5c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 80a1eba:	4e14      	ldr	r6, [pc, #80]	; (80a1f0c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 80a1ebc:	a804      	add	r0, sp, #16
 80a1ebe:	f7ff fd5b 	bl	80a1978 <_ZN5spark18JSONObjectIterator4nextEv>
 80a1ec2:	b1e8      	cbz	r0, 80a1f00 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 80a1ec4:	4668      	mov	r0, sp
 80a1ec6:	a904      	add	r1, sp, #16
 80a1ec8:	f7ff ffdc 	bl	80a1e84 <_ZNK5spark18JSONObjectIterator4nameEv>
 80a1ecc:	4631      	mov	r1, r6
 80a1ece:	9802      	ldr	r0, [sp, #8]
 80a1ed0:	f7ff fe6c 	bl	80a1bac <_ZNK5spark10JSONStringeqEPKc.isra.0>
 80a1ed4:	4604      	mov	r4, r0
 80a1ed6:	b110      	cbz	r0, 80a1ede <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 80a1ed8:	1e2c      	subs	r4, r5, #0
 80a1eda:	bf18      	it	ne
 80a1edc:	2401      	movne	r4, #1
 80a1ede:	a801      	add	r0, sp, #4
 80a1ee0:	f7ff fae9 	bl	80a14b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1ee4:	2c00      	cmp	r4, #0
 80a1ee6:	d0e9      	beq.n	80a1ebc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 80a1ee8:	4668      	mov	r0, sp
 80a1eea:	a904      	add	r1, sp, #16
 80a1eec:	f7ff ffa2 	bl	80a1e34 <_ZNK5spark18JSONObjectIterator5valueEv>
 80a1ef0:	4668      	mov	r0, sp
 80a1ef2:	f7ff fce3 	bl	80a18bc <_ZNK5spark9JSONValue5toIntEv>
 80a1ef6:	6028      	str	r0, [r5, #0]
 80a1ef8:	a801      	add	r0, sp, #4
 80a1efa:	f7ff fadc 	bl	80a14b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1efe:	e7dd      	b.n	80a1ebc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 80a1f00:	a805      	add	r0, sp, #20
 80a1f02:	f7ff fad8 	bl	80a14b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a1f06:	b00a      	add	sp, #40	; 0x28
 80a1f08:	bd70      	pop	{r4, r5, r6, pc}
 80a1f0a:	bf00      	nop
 80a1f0c:	080a4d0c 	.word	0x080a4d0c

080a1f10 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 80a1f10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1f12:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 80a1f14:	4919      	ldr	r1, [pc, #100]	; (80a1f7c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x6c>)
 80a1f16:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 80a1f18:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 80a1f1a:	f002 fcee 	bl	80a48fa <strcmp>
 80a1f1e:	b948      	cbnz	r0, 80a1f34 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
 80a1f20:	f001 fb2a 	bl	80a3578 <_Z16_fetch_usbserialv>
 80a1f24:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a1f28:	f001 fb08 	bl	80a353c <_ZN9USBSerial5beginEl>
        return &Serial;
 80a1f2c:	f001 fb24 	bl	80a3578 <_Z16_fetch_usbserialv>
}
 80a1f30:	b003      	add	sp, #12
 80a1f32:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "USBSerial1") == 0) {
 80a1f34:	4620      	mov	r0, r4
 80a1f36:	4912      	ldr	r1, [pc, #72]	; (80a1f80 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x70>)
 80a1f38:	f002 fcdf 	bl	80a48fa <strcmp>
 80a1f3c:	b940      	cbnz	r0, 80a1f50 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x40>
        USBSerial1.begin();
 80a1f3e:	f001 fb55 	bl	80a35ec <_Z17_fetch_usbserial1v>
 80a1f42:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a1f46:	f001 faf9 	bl	80a353c <_ZN9USBSerial5beginEl>
        return &USBSerial1;
 80a1f4a:	f001 fb4f 	bl	80a35ec <_Z17_fetch_usbserial1v>
 80a1f4e:	e7ef      	b.n	80a1f30 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    if (strcmp(type, "Serial1") == 0) {
 80a1f50:	4620      	mov	r0, r4
 80a1f52:	490c      	ldr	r1, [pc, #48]	; (80a1f84 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x74>)
 80a1f54:	f002 fcd1 	bl	80a48fa <strcmp>
 80a1f58:	b970      	cbnz	r0, 80a1f78 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x68>
        int baud = 9600;
 80a1f5a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 80a1f5e:	a901      	add	r1, sp, #4
 80a1f60:	4628      	mov	r0, r5
        int baud = 9600;
 80a1f62:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 80a1f64:	f7ff ffa2 	bl	80a1eac <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 80a1f68:	f001 fa72 	bl	80a3450 <_Z22__fetch_global_Serial1v>
 80a1f6c:	9901      	ldr	r1, [sp, #4]
 80a1f6e:	f001 fa69 	bl	80a3444 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 80a1f72:	f001 fa6d 	bl	80a3450 <_Z22__fetch_global_Serial1v>
 80a1f76:	e7db      	b.n	80a1f30 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
 80a1f78:	2000      	movs	r0, #0
 80a1f7a:	e7d9      	b.n	80a1f30 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
 80a1f7c:	080a4d11 	.word	0x080a4d11
 80a1f80:	080a4d18 	.word	0x080a4d18
 80a1f84:	080a4d1b 	.word	0x080a4d1b

080a1f88 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a1f88:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 80a1f8a:	2614      	movs	r6, #20
 80a1f8c:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a1f90:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 80a1f92:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80a1f96:	42ae      	cmp	r6, r5
 80a1f98:	d005      	beq.n	80a1fa6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 80a1f9a:	f105 0008 	add.w	r0, r5, #8
 80a1f9e:	f7ff fff3 	bl	80a1f88 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a1fa2:	3514      	adds	r5, #20
 80a1fa4:	e7f7      	b.n	80a1f96 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 80a1fa6:	6820      	ldr	r0, [r4, #0]
 80a1fa8:	f7ff fa62 	bl	80a1470 <free>
}
 80a1fac:	4620      	mov	r0, r4
 80a1fae:	bd70      	pop	{r4, r5, r6, pc}

080a1fb0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a1fb0:	b570      	push	{r4, r5, r6, lr}
 80a1fb2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 80a1fb4:	e9d0 5300 	ldrd	r5, r3, [r0]
 80a1fb8:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 80a1fbc:	42ae      	cmp	r6, r5
 80a1fbe:	d004      	beq.n	80a1fca <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 80a1fc0:	4628      	mov	r0, r5
 80a1fc2:	f000 fe9d 	bl	80a2d00 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 80a1fc6:	3510      	adds	r5, #16
 80a1fc8:	e7f8      	b.n	80a1fbc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 80a1fca:	6820      	ldr	r0, [r4, #0]
 80a1fcc:	f7ff fa50 	bl	80a1470 <free>
}
 80a1fd0:	4620      	mov	r0, r4
 80a1fd2:	bd70      	pop	{r4, r5, r6, pc}

080a1fd4 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 80a1fd4:	b510      	push	{r4, lr}
 80a1fd6:	4604      	mov	r4, r0
 80a1fd8:	300c      	adds	r0, #12
 80a1fda:	f7ff ffd5 	bl	80a1f88 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a1fde:	4620      	mov	r0, r4
 80a1fe0:	f7ff ffe6 	bl	80a1fb0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 80a1fe4:	4620      	mov	r0, r4
 80a1fe6:	bd10      	pop	{r4, pc}

080a1fe8 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 80a1fe8:	b510      	push	{r4, lr}
 80a1fea:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 80a1fec:	4b03      	ldr	r3, [pc, #12]	; (80a1ffc <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 80a1fee:	f840 3b04 	str.w	r3, [r0], #4
 80a1ff2:	f7ff ffef 	bl	80a1fd4 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 80a1ff6:	4620      	mov	r0, r4
 80a1ff8:	bd10      	pop	{r4, pc}
 80a1ffa:	bf00      	nop
 80a1ffc:	080a4bfc 	.word	0x080a4bfc

080a2000 <_ZN5spark16StreamLogHandlerD0Ev>:
 80a2000:	b510      	push	{r4, lr}
 80a2002:	4604      	mov	r4, r0
 80a2004:	f7ff fff0 	bl	80a1fe8 <_ZN5spark16StreamLogHandlerD1Ev>
 80a2008:	4620      	mov	r0, r4
 80a200a:	2124      	movs	r1, #36	; 0x24
 80a200c:	f001 fc6e 	bl	80a38ec <_ZdlPvj>
 80a2010:	4620      	mov	r0, r4
 80a2012:	bd10      	pop	{r4, pc}

080a2014 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 80a2014:	b510      	push	{r4, lr}
 80a2016:	4604      	mov	r4, r0
 80a2018:	4b02      	ldr	r3, [pc, #8]	; (80a2024 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 80a201a:	6003      	str	r3, [r0, #0]
 80a201c:	f7ff ffe4 	bl	80a1fe8 <_ZN5spark16StreamLogHandlerD1Ev>
 80a2020:	4620      	mov	r0, r4
 80a2022:	bd10      	pop	{r4, pc}
 80a2024:	080a4dbc 	.word	0x080a4dbc

080a2028 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 80a2028:	b510      	push	{r4, lr}
 80a202a:	4604      	mov	r4, r0
 80a202c:	f7ff fff2 	bl	80a2014 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 80a2030:	4620      	mov	r0, r4
 80a2032:	2124      	movs	r1, #36	; 0x24
 80a2034:	f001 fc5a 	bl	80a38ec <_ZdlPvj>
 80a2038:	4620      	mov	r0, r4
 80a203a:	bd10      	pop	{r4, pc}

080a203c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 80a203c:	2200      	movs	r2, #0
 80a203e:	e9c0 2200 	strd	r2, r2, [r0]
 80a2042:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 80a2044:	b510      	push	{r4, lr}
      __a = _GLIBCXX_MOVE(__b);
 80a2046:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2048:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a204a:	6004      	str	r4, [r0, #0]
 80a204c:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a204e:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a2050:	6044      	str	r4, [r0, #4]
 80a2052:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2054:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a2056:	6084      	str	r4, [r0, #8]
}
 80a2058:	bd10      	pop	{r4, pc}

080a205a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 80a205a:	b510      	push	{r4, lr}
 80a205c:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 80a205e:	6803      	ldr	r3, [r0, #0]
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a2060:	6818      	ldr	r0, [r3, #0]
 80a2062:	f7fe fff5 	bl	80a1050 <os_mutex_recursive_unlock>
 80a2066:	4620      	mov	r0, r4
 80a2068:	bd10      	pop	{r4, pc}
	...

080a206c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 80a206c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2070:	b087      	sub	sp, #28
 80a2072:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 80a2074:	4b1c      	ldr	r3, [pc, #112]	; (80a20e8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 80a2076:	4680      	mov	r8, r0
 80a2078:	685b      	ldr	r3, [r3, #4]
 80a207a:	4689      	mov	r9, r1
 80a207c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80a2080:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 80a2082:	b96b      	cbnz	r3, 80a20a0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 80a2084:	f7ff fea8 	bl	80a1dd8 <_ZN5spark10LogManager8instanceEv>
 80a2088:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80a208a:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
 80a208e:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80a2090:	9305      	str	r3, [sp, #20]
 80a2092:	f7fe ffd5 	bl	80a1040 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
 80a2096:	7b23      	ldrb	r3, [r4, #12]
 80a2098:	b12b      	cbz	r3, 80a20a6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 80a209a:	a805      	add	r0, sp, #20
 80a209c:	f7ff ffdd 	bl	80a205a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 80a20a0:	b007      	add	sp, #28
 80a20a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 80a20a6:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 80a20a8:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 80a20ac:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 80a20ae:	e9d4 5300 	ldrd	r5, r3, [r4]
 80a20b2:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80a20b6:	45aa      	cmp	sl, r5
 80a20b8:	d012      	beq.n	80a20e0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 80a20ba:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 80a20be:	4631      	mov	r1, r6
 80a20c0:	1d38      	adds	r0, r7, #4
 80a20c2:	f7ff fe15 	bl	80a1cf0 <_ZNK5spark6detail9LogFilter5levelEPKc>
 80a20c6:	4581      	cmp	r9, r0
 80a20c8:	d3f5      	bcc.n	80a20b6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 80a20ca:	9a03      	ldr	r2, [sp, #12]
 80a20cc:	683b      	ldr	r3, [r7, #0]
 80a20ce:	9200      	str	r2, [sp, #0]
 80a20d0:	f8d3 b008 	ldr.w	fp, [r3, #8]
 80a20d4:	464a      	mov	r2, r9
 80a20d6:	4633      	mov	r3, r6
 80a20d8:	4641      	mov	r1, r8
 80a20da:	4638      	mov	r0, r7
 80a20dc:	47d8      	blx	fp
 80a20de:	e7ea      	b.n	80a20b6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 80a20e0:	2300      	movs	r3, #0
 80a20e2:	7323      	strb	r3, [r4, #12]
 80a20e4:	e7d9      	b.n	80a209a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 80a20e6:	bf00      	nop
 80a20e8:	e000ed00 	.word	0xe000ed00

080a20ec <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 80a20ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a20f0:	469b      	mov	fp, r3
 80a20f2:	4b1a      	ldr	r3, [pc, #104]	; (80a215c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 80a20f4:	4680      	mov	r8, r0
 80a20f6:	685b      	ldr	r3, [r3, #4]
 80a20f8:	4689      	mov	r9, r1
 80a20fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80a20fe:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
 80a2100:	b96b      	cbnz	r3, 80a211e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 80a2102:	f7ff fe69 	bl	80a1dd8 <_ZN5spark10LogManager8instanceEv>
 80a2106:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80a2108:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80a210c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80a210e:	9301      	str	r3, [sp, #4]
 80a2110:	f7fe ff96 	bl	80a1040 <os_mutex_recursive_lock>
        if (that->isActive()) {
 80a2114:	7b23      	ldrb	r3, [r4, #12]
 80a2116:	b12b      	cbz	r3, 80a2124 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 80a2118:	a801      	add	r0, sp, #4
 80a211a:	f7ff ff9e 	bl	80a205a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 80a211e:	b003      	add	sp, #12
 80a2120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 80a2124:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 80a2126:	b2f6      	uxtb	r6, r6
 80a2128:	7323      	strb	r3, [r4, #12]
 80a212a:	e9d4 5300 	ldrd	r5, r3, [r4]
 80a212e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80a2132:	4555      	cmp	r5, sl
 80a2134:	d00e      	beq.n	80a2154 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 80a2136:	f855 7b04 	ldr.w	r7, [r5], #4
 80a213a:	4659      	mov	r1, fp
 80a213c:	1d38      	adds	r0, r7, #4
 80a213e:	f7ff fdd7 	bl	80a1cf0 <_ZNK5spark6detail9LogFilter5levelEPKc>
 80a2142:	4286      	cmp	r6, r0
 80a2144:	d3f5      	bcc.n	80a2132 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 80a2146:	683b      	ldr	r3, [r7, #0]
 80a2148:	464a      	mov	r2, r9
 80a214a:	4641      	mov	r1, r8
 80a214c:	4638      	mov	r0, r7
 80a214e:	68db      	ldr	r3, [r3, #12]
 80a2150:	4798      	blx	r3
 80a2152:	e7ee      	b.n	80a2132 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 80a2154:	2300      	movs	r3, #0
 80a2156:	7323      	strb	r3, [r4, #12]
 80a2158:	e7de      	b.n	80a2118 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 80a215a:	bf00      	nop
 80a215c:	e000ed00 	.word	0xe000ed00

080a2160 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 80a2160:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a2164:	4b16      	ldr	r3, [pc, #88]	; (80a21c0 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 80a2166:	4605      	mov	r5, r0
 80a2168:	685b      	ldr	r3, [r3, #4]
 80a216a:	460f      	mov	r7, r1
 80a216c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (HAL_IsISR()) {
 80a2170:	bb1b      	cbnz	r3, 80a21ba <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 80a2172:	f7ff fe31 	bl	80a1dd8 <_ZN5spark10LogManager8instanceEv>
 80a2176:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80a2178:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80a217c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80a217e:	9301      	str	r3, [sp, #4]
 80a2180:	f7fe ff5e 	bl	80a1040 <os_mutex_recursive_lock>
 80a2184:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 80a2188:	2446      	movs	r4, #70	; 0x46
 80a218a:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80a218e:	45b0      	cmp	r8, r6
 80a2190:	d109      	bne.n	80a21a6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 80a2192:	a801      	add	r0, sp, #4
 80a2194:	f7ff ff61 	bl	80a205a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 80a2198:	42a5      	cmp	r5, r4
 80a219a:	bfb4      	ite	lt
 80a219c:	2000      	movlt	r0, #0
 80a219e:	2001      	movge	r0, #1
}
 80a21a0:	b002      	add	sp, #8
 80a21a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 80a21a6:	f856 0b04 	ldr.w	r0, [r6], #4
 80a21aa:	4639      	mov	r1, r7
 80a21ac:	3004      	adds	r0, #4
 80a21ae:	f7ff fd9f 	bl	80a1cf0 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 80a21b2:	4284      	cmp	r4, r0
 80a21b4:	bfa8      	it	ge
 80a21b6:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 80a21b8:	e7e9      	b.n	80a218e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 80a21ba:	2000      	movs	r0, #0
 80a21bc:	e7f0      	b.n	80a21a0 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 80a21be:	bf00      	nop
 80a21c0:	e000ed00 	.word	0xe000ed00

080a21c4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 80a21c4:	460b      	mov	r3, r1
 80a21c6:	b570      	push	{r4, r5, r6, lr}
 80a21c8:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 80a21ca:	c805      	ldmia	r0, {r0, r2}
 80a21cc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 80a21d0:	4282      	cmp	r2, r0
 80a21d2:	d007      	beq.n	80a21e4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x20>
 80a21d4:	4601      	mov	r1, r0
            if (*p == value) {
 80a21d6:	681d      	ldr	r5, [r3, #0]
 80a21d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80a21dc:	42ae      	cmp	r6, r5
 80a21de:	d003      	beq.n	80a21e8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
 80a21e0:	4608      	mov	r0, r1
 80a21e2:	e7f5      	b.n	80a21d0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
        return false;
 80a21e4:	2000      	movs	r0, #0
}
 80a21e6:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
 80a21e8:	1a52      	subs	r2, r2, r1
 80a21ea:	f002 fb29 	bl	80a4840 <memmove>
    --size_;
 80a21ee:	6863      	ldr	r3, [r4, #4]
    return true;
 80a21f0:	2001      	movs	r0, #1
    --size_;
 80a21f2:	3b01      	subs	r3, #1
 80a21f4:	6063      	str	r3, [r4, #4]
    return true;
 80a21f6:	e7f6      	b.n	80a21e6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>

080a21f8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 80a21f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a21fa:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 80a21fc:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80a2200:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 80a2202:	9101      	str	r1, [sp, #4]
 80a2204:	9303      	str	r3, [sp, #12]
 80a2206:	f7fe ff1b 	bl	80a1040 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 80a220a:	4620      	mov	r0, r4
 80a220c:	a901      	add	r1, sp, #4
 80a220e:	f7ff ffd9 	bl	80a21c4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 80a2212:	b118      	cbz	r0, 80a221c <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 80a2214:	6863      	ldr	r3, [r4, #4]
 80a2216:	b90b      	cbnz	r3, 80a221c <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 80a2218:	f7ff fe06 	bl	80a1e28 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 80a221c:	a803      	add	r0, sp, #12
 80a221e:	f7ff ff1c 	bl	80a205a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 80a2222:	b004      	add	sp, #16
 80a2224:	bd10      	pop	{r4, pc}

080a2226 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 80a2226:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 80a2228:	b570      	push	{r4, r5, r6, lr}
 80a222a:	4604      	mov	r4, r0
 80a222c:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 80a2230:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 80a2234:	42ae      	cmp	r6, r5
 80a2236:	d015      	beq.n	80a2264 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 80a2238:	4620      	mov	r0, r4
 80a223a:	f105 0110 	add.w	r1, r5, #16
 80a223e:	f7ff ffc1 	bl	80a21c4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 80a2242:	6863      	ldr	r3, [r4, #4]
 80a2244:	b90b      	cbnz	r3, 80a224a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 80a2246:	f7ff fdef 	bl	80a1e28 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 80a224a:	69e0      	ldr	r0, [r4, #28]
 80a224c:	6929      	ldr	r1, [r5, #16]
 80a224e:	6803      	ldr	r3, [r0, #0]
 80a2250:	68db      	ldr	r3, [r3, #12]
 80a2252:	4798      	blx	r3
        if (h.stream) {
 80a2254:	6969      	ldr	r1, [r5, #20]
 80a2256:	b119      	cbz	r1, 80a2260 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 80a2258:	6a20      	ldr	r0, [r4, #32]
 80a225a:	6803      	ldr	r3, [r0, #0]
 80a225c:	68db      	ldr	r3, [r3, #12]
 80a225e:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 80a2260:	3518      	adds	r5, #24
 80a2262:	e7e7      	b.n	80a2234 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 80a2264:	2618      	movs	r6, #24
 80a2266:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 80a226a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80a226e:	42ae      	cmp	r6, r5
 80a2270:	d004      	beq.n	80a227c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 80a2272:	4628      	mov	r0, r5
 80a2274:	f000 fd44 	bl	80a2d00 <_ZN6StringD1Ev>
 80a2278:	3518      	adds	r5, #24
 80a227a:	e7f8      	b.n	80a226e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 80a227c:	2300      	movs	r3, #0
 80a227e:	6163      	str	r3, [r4, #20]
}
 80a2280:	bd70      	pop	{r4, r5, r6, pc}

080a2282 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 80a2282:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a2284:	4604      	mov	r4, r0
    resetSystemCallbacks();
 80a2286:	f7ff fdcf 	bl	80a1e28 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 80a228a:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80a228e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a2290:	9301      	str	r3, [sp, #4]
 80a2292:	f7fe fed5 	bl	80a1040 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
 80a2296:	4620      	mov	r0, r4
 80a2298:	f7ff ffc5 	bl	80a2226 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 80a229c:	a801      	add	r0, sp, #4
 80a229e:	f7ff fedc 	bl	80a205a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 80a22a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a22a4:	b108      	cbz	r0, 80a22aa <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 80a22a6:	f7fe fec3 	bl	80a1030 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 80a22aa:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 80a22ae:	2618      	movs	r6, #24
 80a22b0:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80a22b4:	42ae      	cmp	r6, r5
 80a22b6:	d004      	beq.n	80a22c2 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 80a22b8:	4628      	mov	r0, r5
 80a22ba:	f000 fd21 	bl	80a2d00 <_ZN6StringD1Ev>
 80a22be:	3518      	adds	r5, #24
 80a22c0:	e7f8      	b.n	80a22b4 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 80a22c2:	6920      	ldr	r0, [r4, #16]
 80a22c4:	f7ff f8d4 	bl	80a1470 <free>
 80a22c8:	6820      	ldr	r0, [r4, #0]
 80a22ca:	f7ff f8d1 	bl	80a1470 <free>
}
 80a22ce:	4620      	mov	r0, r4
 80a22d0:	b002      	add	sp, #8
 80a22d2:	bd70      	pop	{r4, r5, r6, pc}

080a22d4 <__tcf_2>:
    static LogManager mgr;
 80a22d4:	4801      	ldr	r0, [pc, #4]	; (80a22dc <__tcf_2+0x8>)
 80a22d6:	f7ff bfd4 	b.w	80a2282 <_ZN5spark10LogManagerD1Ev>
 80a22da:	bf00      	nop
 80a22dc:	200001a0 	.word	0x200001a0

080a22e0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 80a22e0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 80a22e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a22e4:	4606      	mov	r6, r0
 80a22e6:	460c      	mov	r4, r1
 80a22e8:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
 80a22ea:	d927      	bls.n	80a233c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
 80a22ec:	4290      	cmp	r0, r2
 80a22ee:	d226      	bcs.n	80a233e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
        capacity_(0) {
 80a22f0:	2600      	movs	r6, #0
            --end;
 80a22f2:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
 80a22f6:	1a6c      	subs	r4, r5, r1
 80a22f8:	f1a1 0714 	sub.w	r7, r1, #20
 80a22fc:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 80a22fe:	42af      	cmp	r7, r5
 80a2300:	d03d      	beq.n	80a237e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
 80a2302:	b1a4      	cbz	r4, 80a232e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
 80a2304:	682b      	ldr	r3, [r5, #0]
 80a2306:	6023      	str	r3, [r4, #0]
 80a2308:	88ab      	ldrh	r3, [r5, #4]
 80a230a:	80a3      	strh	r3, [r4, #4]
 80a230c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
        capacity_(0) {
 80a2310:	e9c4 6602 	strd	r6, r6, [r4, #8]
 80a2314:	6126      	str	r6, [r4, #16]
 80a2316:	80e3      	strh	r3, [r4, #6]
 80a2318:	68ab      	ldr	r3, [r5, #8]
 80a231a:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a231c:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a231e:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a2320:	68ea      	ldr	r2, [r5, #12]
 80a2322:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2324:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2326:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a2328:	692a      	ldr	r2, [r5, #16]
 80a232a:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a232c:	612b      	str	r3, [r5, #16]
 80a232e:	f105 0008 	add.w	r0, r5, #8
 80a2332:	f7ff fe29 	bl	80a1f88 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 80a2336:	3d14      	subs	r5, #20
 80a2338:	3c14      	subs	r4, #20
 80a233a:	e7e0      	b.n	80a22fe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
 80a233c:	d01f      	beq.n	80a237e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
 80a233e:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
 80a2340:	42ac      	cmp	r4, r5
 80a2342:	d01c      	beq.n	80a237e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
 80a2344:	b1a6      	cbz	r6, 80a2370 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
 80a2346:	6823      	ldr	r3, [r4, #0]
 80a2348:	6033      	str	r3, [r6, #0]
 80a234a:	88a3      	ldrh	r3, [r4, #4]
 80a234c:	80b3      	strh	r3, [r6, #4]
 80a234e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
        capacity_(0) {
 80a2352:	e9c6 7702 	strd	r7, r7, [r6, #8]
 80a2356:	6137      	str	r7, [r6, #16]
 80a2358:	80f3      	strh	r3, [r6, #6]
      __a = _GLIBCXX_MOVE(__b);
 80a235a:	68a3      	ldr	r3, [r4, #8]
 80a235c:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a235e:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2360:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a2362:	68e2      	ldr	r2, [r4, #12]
 80a2364:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2366:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2368:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a236a:	6922      	ldr	r2, [r4, #16]
 80a236c:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a236e:	6123      	str	r3, [r4, #16]
 80a2370:	f104 0008 	add.w	r0, r4, #8
 80a2374:	f7ff fe08 	bl	80a1f88 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 80a2378:	3414      	adds	r4, #20
 80a237a:	3614      	adds	r6, #20
 80a237c:	e7e0      	b.n	80a2340 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
 80a237e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2380 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 80a2380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a2382:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 80a2386:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 80a2388:	4604      	mov	r4, r0
 80a238a:	460e      	mov	r6, r1
 80a238c:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a238e:	db0d      	blt.n	80a23ac <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
 80a2390:	3501      	adds	r5, #1
        if (n > 0) {
 80a2392:	2d00      	cmp	r5, #0
 80a2394:	6800      	ldr	r0, [r0, #0]
 80a2396:	dd04      	ble.n	80a23a2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
 80a2398:	00a9      	lsls	r1, r5, #2
 80a239a:	f7ff f871 	bl	80a1480 <realloc>
            if (!d) {
 80a239e:	b918      	cbnz	r0, 80a23a8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
 80a23a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 80a23a2:	f7ff f865 	bl	80a1470 <free>
        T* d = nullptr;
 80a23a6:	2000      	movs	r0, #0
        data_ = d;
 80a23a8:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 80a23aa:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
 80a23ac:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
 80a23ae:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 80a23b0:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
 80a23b4:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 80a23b6:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
 80a23ba:	1d08      	adds	r0, r1, #4
 80a23bc:	f002 fa40 	bl	80a4840 <memmove>
    new(p) T(std::move(value));
 80a23c0:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
 80a23c4:	6863      	ldr	r3, [r4, #4]
    return true;
 80a23c6:	2001      	movs	r0, #1
    ++size_;
 80a23c8:	3301      	adds	r3, #1
 80a23ca:	6063      	str	r3, [r4, #4]
    return true;
 80a23cc:	e7e8      	b.n	80a23a0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

080a23ce <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 80a23ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a23d0:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 80a23d2:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
 80a23d6:	6a40      	ldr	r0, [r0, #36]	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
 80a23d8:	460d      	mov	r5, r1
 80a23da:	9301      	str	r3, [sp, #4]
 80a23dc:	f7fe fe30 	bl	80a1040 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
 80a23e0:	e9d4 3100 	ldrd	r3, r1, [r4]
 80a23e4:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
 80a23e8:	4283      	cmp	r3, r0
 80a23ea:	461a      	mov	r2, r3
 80a23ec:	d00a      	beq.n	80a2404 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 80a23ee:	6812      	ldr	r2, [r2, #0]
 80a23f0:	3304      	adds	r3, #4
 80a23f2:	42aa      	cmp	r2, r5
 80a23f4:	d1f8      	bne.n	80a23e8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
 80a23f6:	a801      	add	r0, sp, #4
 80a23f8:	f7ff fe2f 	bl	80a205a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
 80a23fc:	2500      	movs	r5, #0
}
 80a23fe:	4628      	mov	r0, r5
 80a2400:	b003      	add	sp, #12
 80a2402:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
 80a2404:	462a      	mov	r2, r5
 80a2406:	4620      	mov	r0, r4
 80a2408:	f7ff ffba 	bl	80a2380 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 80a240c:	4605      	mov	r5, r0
 80a240e:	2800      	cmp	r0, #0
 80a2410:	d0f1      	beq.n	80a23f6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 80a2412:	6863      	ldr	r3, [r4, #4]
 80a2414:	2b01      	cmp	r3, #1
 80a2416:	d101      	bne.n	80a241c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 80a2418:	f7ff fcfa 	bl	80a1e10 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 80a241c:	a801      	add	r0, sp, #4
 80a241e:	f7ff fe1c 	bl	80a205a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 80a2422:	e7ec      	b.n	80a23fe <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

080a2424 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 80a2424:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 80a2426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2428:	4604      	mov	r4, r0
 80a242a:	460d      	mov	r5, r1
 80a242c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 80a242e:	d914      	bls.n	80a245a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 80a2430:	4290      	cmp	r0, r2
 80a2432:	d213      	bcs.n	80a245c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 80a2434:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 80a2438:	1a75      	subs	r5, r6, r1
 80a243a:	f1a1 0710 	sub.w	r7, r1, #16
 80a243e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 80a2440:	42b7      	cmp	r7, r6
 80a2442:	d018      	beq.n	80a2476 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 80a2444:	b11c      	cbz	r4, 80a244e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 80a2446:	4631      	mov	r1, r6
 80a2448:	4620      	mov	r0, r4
 80a244a:	f000 fcd3 	bl	80a2df4 <_ZN6StringC1EOS_>
                end->~T();
 80a244e:	4630      	mov	r0, r6
 80a2450:	f000 fc56 	bl	80a2d00 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 80a2454:	3e10      	subs	r6, #16
 80a2456:	3c10      	subs	r4, #16
 80a2458:	e7f2      	b.n	80a2440 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 80a245a:	d00c      	beq.n	80a2476 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 80a245c:	42b5      	cmp	r5, r6
 80a245e:	d00a      	beq.n	80a2476 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 80a2460:	b11c      	cbz	r4, 80a246a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 80a2462:	4629      	mov	r1, r5
 80a2464:	4620      	mov	r0, r4
 80a2466:	f000 fcc5 	bl	80a2df4 <_ZN6StringC1EOS_>
                p->~T();
 80a246a:	4628      	mov	r0, r5
 80a246c:	f000 fc48 	bl	80a2d00 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 80a2470:	3510      	adds	r5, #16
 80a2472:	3410      	adds	r4, #16
 80a2474:	e7f2      	b.n	80a245c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 80a2476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2478 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 80a2478:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 80a247a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 80a247c:	4605      	mov	r5, r0
        if (n > 0) {
 80a247e:	dd11      	ble.n	80a24a4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 80a2480:	0130      	lsls	r0, r6, #4
 80a2482:	f7fe ffed 	bl	80a1460 <malloc>
            if (!d) {
 80a2486:	4604      	mov	r4, r0
 80a2488:	b158      	cbz	r0, 80a24a2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 80a248a:	e9d5 1200 	ldrd	r1, r2, [r5]
 80a248e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 80a2492:	f7ff ffc7 	bl	80a2424 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 80a2496:	6828      	ldr	r0, [r5, #0]
 80a2498:	f7fe ffea 	bl	80a1470 <free>
        return true;
 80a249c:	2001      	movs	r0, #1
        data_ = d;
 80a249e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 80a24a0:	60ae      	str	r6, [r5, #8]
    }
 80a24a2:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 80a24a4:	2400      	movs	r4, #0
 80a24a6:	e7f6      	b.n	80a2496 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

080a24a8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80a24a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a24ac:	4691      	mov	r9, r2
        capacity_(0) {
 80a24ae:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 80a24b0:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80a24b2:	b097      	sub	sp, #92	; 0x5c
 80a24b4:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
 80a24b6:	f8d9 1004 	ldr.w	r1, [r9, #4]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80a24ba:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 80a24bc:	4299      	cmp	r1, r3
        capacity_(0) {
 80a24be:	e9c0 3300 	strd	r3, r3, [r0]
 80a24c2:	e9c0 3302 	strd	r3, r3, [r0, #8]
 80a24c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80a24ca:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 80a24ce:	7602      	strb	r2, [r0, #24]
 80a24d0:	930c      	str	r3, [sp, #48]	; 0x30
    if (n > capacity_ && !realloc(n)) {
 80a24d2:	dc23      	bgt.n	80a251c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 80a24d4:	e9d9 5700 	ldrd	r5, r7, [r9]
 80a24d8:	2314      	movs	r3, #20
 80a24da:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 80a24de:	42af      	cmp	r7, r5
 80a24e0:	d03b      	beq.n	80a255a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 80a24e2:	4629      	mov	r1, r5
 80a24e4:	a80d      	add	r0, sp, #52	; 0x34
 80a24e6:	f000 fc85 	bl	80a2df4 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 80a24ea:	a90d      	add	r1, sp, #52	; 0x34
 80a24ec:	a811      	add	r0, sp, #68	; 0x44
 80a24ee:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80a24f0:	f000 fc80 	bl	80a2df4 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a24f4:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
 80a24f8:	4299      	cmp	r1, r3
 80a24fa:	da1b      	bge.n	80a2534 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 80a24fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
 80a24fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
 80a2500:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 80a2504:	4631      	mov	r1, r6
 80a2506:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80a250a:	f106 0010 	add.w	r0, r6, #16
 80a250e:	f7ff ff89 	bl	80a2424 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 80a2512:	b9ee      	cbnz	r6, 80a2550 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 80a2514:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a2516:	3301      	adds	r3, #1
 80a2518:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
 80a251a:	e011      	b.n	80a2540 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 80a251c:	a80a      	add	r0, sp, #40	; 0x28
 80a251e:	f7ff ffab 	bl	80a2478 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 80a2522:	2800      	cmp	r0, #0
 80a2524:	d1d6      	bne.n	80a24d4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
 80a2526:	a80a      	add	r0, sp, #40	; 0x28
 80a2528:	f7ff fd42 	bl	80a1fb0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 80a252c:	4620      	mov	r0, r4
 80a252e:	b017      	add	sp, #92	; 0x5c
 80a2530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a2534:	3101      	adds	r1, #1
 80a2536:	a80a      	add	r0, sp, #40	; 0x28
 80a2538:	f7ff ff9e 	bl	80a2478 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 80a253c:	2800      	cmp	r0, #0
 80a253e:	d1dd      	bne.n	80a24fc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 80a2540:	a811      	add	r0, sp, #68	; 0x44
 80a2542:	f000 fbdd 	bl	80a2d00 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 80a2546:	a80d      	add	r0, sp, #52	; 0x34
 80a2548:	f000 fbda 	bl	80a2d00 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 80a254c:	3514      	adds	r5, #20
 80a254e:	e7c6      	b.n	80a24de <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 80a2550:	4630      	mov	r0, r6
 80a2552:	a911      	add	r1, sp, #68	; 0x44
 80a2554:	f000 fc4e 	bl	80a2df4 <_ZN6StringC1EOS_>
 80a2558:	e7dc      	b.n	80a2514 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 80a255a:	2600      	movs	r6, #0
 80a255c:	f04f 0a14 	mov.w	sl, #20
        size_t size = 0; // Name length
 80a2560:	4637      	mov	r7, r6
 80a2562:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
 80a2566:	960f      	str	r6, [sp, #60]	; 0x3c
    for (int i = 0; i < cats.size(); ++i) {
 80a2568:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a256c:	429e      	cmp	r6, r3
 80a256e:	f280 8097 	bge.w	80a26a0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
 80a2572:	0133      	lsls	r3, r6, #4
 80a2574:	58d3      	ldr	r3, [r2, r3]
 80a2576:	9308      	str	r3, [sp, #32]
        if (!category) {
 80a2578:	b90b      	cbnz	r3, 80a257e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
 80a257a:	3601      	adds	r6, #1
 80a257c:	e7f4      	b.n	80a2568 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
 80a257e:	fb0a f306 	mul.w	r3, sl, r6
 80a2582:	9709      	str	r7, [sp, #36]	; 0x24
 80a2584:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
 80a2586:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
 80a2588:	a909      	add	r1, sp, #36	; 0x24
 80a258a:	a808      	add	r0, sp, #32
 80a258c:	f7ff fae7 	bl	80a1b5e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 80a2590:	4683      	mov	fp, r0
 80a2592:	2800      	cmp	r0, #0
 80a2594:	d0f1      	beq.n	80a257a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
 80a2596:	4601      	mov	r1, r0
 80a2598:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a259a:	4628      	mov	r0, r5
 80a259c:	f10d 031f 	add.w	r3, sp, #31
            bool found = false;
 80a25a0:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
 80a25a4:	f7ff fb66 	bl	80a1c74 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a25a8:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
 80a25ac:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a25ae:	f1b8 0f00 	cmp.w	r8, #0
 80a25b2:	d166      	bne.n	80a2682 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
 80a25b4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80a25b8:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
            level(-1) {
 80a25bc:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 80a25c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a25c4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80a25c8:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 80a25cc:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a25d0:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 80a25d4:	4293      	cmp	r3, r2
 80a25d6:	db1a      	blt.n	80a260e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
 80a25d8:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
 80a25dc:	f1bb 0f00 	cmp.w	fp, #0
 80a25e0:	dd4a      	ble.n	80a2678 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
 80a25e2:	fb0a f00b 	mul.w	r0, sl, fp
 80a25e6:	f7fe ff3b 	bl	80a1460 <malloc>
            if (!d) {
 80a25ea:	9004      	str	r0, [sp, #16]
 80a25ec:	2800      	cmp	r0, #0
 80a25ee:	d045      	beq.n	80a267c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
 80a25f0:	e9d5 1200 	ldrd	r1, r2, [r5]
 80a25f4:	fb0a 1202 	mla	r2, sl, r2, r1
 80a25f8:	f7ff fe72 	bl	80a22e0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
 80a25fc:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
 80a25fe:	6828      	ldr	r0, [r5, #0]
 80a2600:	9304      	str	r3, [sp, #16]
 80a2602:	f7fe ff35 	bl	80a1470 <free>
        data_ = d;
 80a2606:	9b04      	ldr	r3, [sp, #16]
        capacity_ = n;
 80a2608:	f8c5 b008 	str.w	fp, [r5, #8]
        data_ = d;
 80a260c:	602b      	str	r3, [r5, #0]
    T* const p = data_ + i;
 80a260e:	9b01      	ldr	r3, [sp, #4]
 80a2610:	f8d5 b000 	ldr.w	fp, [r5]
 80a2614:	fb0a f303 	mul.w	r3, sl, r3
    move(p + 1, p, data_ + size_);
 80a2618:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
 80a261a:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
 80a261e:	f101 0014 	add.w	r0, r1, #20
 80a2622:	fb0a b202 	mla	r2, sl, r2, fp
 80a2626:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
 80a2628:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
 80a262a:	f7ff fe59 	bl	80a22e0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 80a262e:	9904      	ldr	r1, [sp, #16]
 80a2630:	b1a9      	cbz	r1, 80a265e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
 80a2632:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80a2634:	9b05      	ldr	r3, [sp, #20]
 80a2636:	f84b 2003 	str.w	r2, [fp, r3]
 80a263a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80a263e:	808b      	strh	r3, [r1, #4]
 80a2640:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
        capacity_(0) {
 80a2644:	e9c1 7702 	strd	r7, r7, [r1, #8]
 80a2648:	610f      	str	r7, [r1, #16]
 80a264a:	80cb      	strh	r3, [r1, #6]
      __a = _GLIBCXX_MOVE(__b);
 80a264c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a264e:	608b      	str	r3, [r1, #8]
 80a2650:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
 80a2652:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
 80a2654:	60cb      	str	r3, [r1, #12]
 80a2656:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
 80a2658:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
 80a265a:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a265c:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
 80a265e:	686b      	ldr	r3, [r5, #4]
 80a2660:	3301      	adds	r3, #1
 80a2662:	606b      	str	r3, [r5, #4]
 80a2664:	a813      	add	r0, sp, #76	; 0x4c
 80a2666:	f7ff fc8f 	bl	80a1f88 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a266a:	f1b8 0f00 	cmp.w	r8, #0
 80a266e:	d008      	beq.n	80a2682 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
 80a2670:	a80d      	add	r0, sp, #52	; 0x34
 80a2672:	f7ff fc89 	bl	80a1f88 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a2676:	e756      	b.n	80a2526 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 80a2678:	4643      	mov	r3, r8
 80a267a:	e7c0      	b.n	80a25fe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a267c:	f04f 0801 	mov.w	r8, #1
 80a2680:	e7f0      	b.n	80a2664 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
 80a2682:	9b01      	ldr	r3, [sp, #4]
 80a2684:	682d      	ldr	r5, [r5, #0]
 80a2686:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
 80a268a:	9b08      	ldr	r3, [sp, #32]
 80a268c:	781b      	ldrb	r3, [r3, #0]
 80a268e:	b92b      	cbnz	r3, 80a269c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
 80a2690:	f8d9 3000 	ldr.w	r3, [r9]
 80a2694:	9a02      	ldr	r2, [sp, #8]
 80a2696:	4413      	add	r3, r2
 80a2698:	7c1b      	ldrb	r3, [r3, #16]
 80a269a:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 80a269c:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 80a269e:	e773      	b.n	80a2588 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a26a0:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a26a2:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a26a4:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a26a6:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a26a8:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a26aa:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
 80a26ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 80a26ae:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a26b0:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a26b2:	60a2      	str	r2, [r4, #8]
 80a26b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 80a26b6:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a26b8:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a26ba:	60e2      	str	r2, [r4, #12]
 80a26bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
 80a26be:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a26c0:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a26c2:	6122      	str	r2, [r4, #16]
 80a26c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
 80a26c6:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
 80a26c8:	9b03      	ldr	r3, [sp, #12]
 80a26ca:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
 80a26cc:	6162      	str	r2, [r4, #20]
 80a26ce:	7623      	strb	r3, [r4, #24]
 80a26d0:	e7ce      	b.n	80a2670 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>
	...

080a26d4 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 80a26d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
 80a26d6:	4605      	mov	r5, r0
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 80a26d8:	460e      	mov	r6, r1
 80a26da:	4604      	mov	r4, r0
        filter_(level, filters) {
 80a26dc:	4b08      	ldr	r3, [pc, #32]	; (80a2700 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
 80a26de:	4611      	mov	r1, r2
 80a26e0:	f845 3b04 	str.w	r3, [r5], #4
 80a26e4:	a801      	add	r0, sp, #4
 80a26e6:	f7fd fe51 	bl	80a038c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a26ea:	4631      	mov	r1, r6
 80a26ec:	aa01      	add	r2, sp, #4
 80a26ee:	4628      	mov	r0, r5
 80a26f0:	f7ff feda 	bl	80a24a8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a26f4:	a801      	add	r0, sp, #4
 80a26f6:	f7fd fe08 	bl	80a030a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 80a26fa:	4620      	mov	r0, r4
 80a26fc:	b004      	add	sp, #16
 80a26fe:	bd70      	pop	{r4, r5, r6, pc}
 80a2700:	080a4bfc 	.word	0x080a4bfc

080a2704 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 80a2704:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2706:	460f      	mov	r7, r1
 80a2708:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 80a270a:	4638      	mov	r0, r7
 80a270c:	4925      	ldr	r1, [pc, #148]	; (80a27a4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
 80a270e:	4616      	mov	r6, r2
 80a2710:	461d      	mov	r5, r3
 80a2712:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 80a2714:	f002 f8f1 	bl	80a48fa <strcmp>
 80a2718:	bb00      	cbnz	r0, 80a275c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
 80a271a:	b1e4      	cbz	r4, 80a2756 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 80a271c:	4629      	mov	r1, r5
 80a271e:	4668      	mov	r0, sp
 80a2720:	f7ff fc8c 	bl	80a203c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 80a2724:	2024      	movs	r0, #36	; 0x24
 80a2726:	4920      	ldr	r1, [pc, #128]	; (80a27a8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
 80a2728:	f001 f8e2 	bl	80a38f0 <_ZnwjRKSt9nothrow_t>
 80a272c:	4605      	mov	r5, r0
 80a272e:	b170      	cbz	r0, 80a274e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
 80a2730:	4669      	mov	r1, sp
 80a2732:	a803      	add	r0, sp, #12
 80a2734:	f7fd fe2a 	bl	80a038c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a2738:	4631      	mov	r1, r6
 80a273a:	aa03      	add	r2, sp, #12
 80a273c:	4628      	mov	r0, r5
 80a273e:	f7ff ffc9 	bl	80a26d4 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a2742:	a803      	add	r0, sp, #12
 80a2744:	f7fd fde1 	bl	80a030a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
 80a2748:	4b18      	ldr	r3, [pc, #96]	; (80a27ac <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
 80a274a:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
 80a274c:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 80a274e:	4668      	mov	r0, sp
 80a2750:	f7fd fddb 	bl	80a030a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a2754:	462c      	mov	r4, r5
}
 80a2756:	4620      	mov	r0, r4
 80a2758:	b007      	add	sp, #28
 80a275a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 80a275c:	4638      	mov	r0, r7
 80a275e:	4914      	ldr	r1, [pc, #80]	; (80a27b0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
 80a2760:	f002 f8cb 	bl	80a48fa <strcmp>
 80a2764:	b9e0      	cbnz	r0, 80a27a0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
 80a2766:	2c00      	cmp	r4, #0
 80a2768:	d0f5      	beq.n	80a2756 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 80a276a:	4629      	mov	r1, r5
 80a276c:	4668      	mov	r0, sp
 80a276e:	f7ff fc65 	bl	80a203c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 80a2772:	2024      	movs	r0, #36	; 0x24
 80a2774:	490c      	ldr	r1, [pc, #48]	; (80a27a8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
 80a2776:	f001 f8bb 	bl	80a38f0 <_ZnwjRKSt9nothrow_t>
 80a277a:	4605      	mov	r5, r0
 80a277c:	2800      	cmp	r0, #0
 80a277e:	d0e6      	beq.n	80a274e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
 80a2780:	4669      	mov	r1, sp
 80a2782:	a803      	add	r0, sp, #12
 80a2784:	f7fd fe02 	bl	80a038c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a2788:	4631      	mov	r1, r6
 80a278a:	aa03      	add	r2, sp, #12
 80a278c:	4628      	mov	r0, r5
 80a278e:	f7ff ffa1 	bl	80a26d4 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a2792:	a803      	add	r0, sp, #12
 80a2794:	f7fd fdb9 	bl	80a030a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a2798:	4b06      	ldr	r3, [pc, #24]	; (80a27b4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
 80a279a:	622c      	str	r4, [r5, #32]
 80a279c:	602b      	str	r3, [r5, #0]
}
 80a279e:	e7d6      	b.n	80a274e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
 80a27a0:	2400      	movs	r4, #0
 80a27a2:	e7d8      	b.n	80a2756 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
 80a27a4:	080a4d23 	.word	0x080a4d23
 80a27a8:	080a4f7c 	.word	0x080a4f7c
 80a27ac:	080a4dbc 	.word	0x080a4dbc
 80a27b0:	080a4d27 	.word	0x080a4d27
 80a27b4:	080a4da4 	.word	0x080a4da4

080a27b8 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 80a27b8:	4b01      	ldr	r3, [pc, #4]	; (80a27c0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a27ba:	4a02      	ldr	r2, [pc, #8]	; (80a27c4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a27bc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a27be:	4770      	bx	lr
 80a27c0:	2000019c 	.word	0x2000019c
 80a27c4:	080a4d38 	.word	0x080a4d38

080a27c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a27c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a27cc:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 80a27ce:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a27d2:	4604      	mov	r4, r0
 80a27d4:	460e      	mov	r6, r1
 80a27d6:	4617      	mov	r7, r2
 80a27d8:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 80a27da:	f000 fecd 	bl	80a3578 <_Z16_fetch_usbserialv>
 80a27de:	4581      	cmp	r9, r0
 80a27e0:	d04d      	beq.n	80a287e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 80a27e2:	792b      	ldrb	r3, [r5, #4]
 80a27e4:	0719      	lsls	r1, r3, #28
 80a27e6:	d504      	bpl.n	80a27f2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 80a27e8:	4620      	mov	r0, r4
 80a27ea:	696a      	ldr	r2, [r5, #20]
 80a27ec:	4954      	ldr	r1, [pc, #336]	; (80a2940 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 80a27ee:	f7ff fa31 	bl	80a1c54 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 80a27f2:	f1b8 0f00 	cmp.w	r8, #0
 80a27f6:	d00d      	beq.n	80a2814 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 80a27f8:	215b      	movs	r1, #91	; 0x5b
 80a27fa:	4620      	mov	r0, r4
 80a27fc:	f7ff fa1e 	bl	80a1c3c <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 80a2800:	4641      	mov	r1, r8
 80a2802:	4620      	mov	r0, r4
 80a2804:	f7ff fa0c 	bl	80a1c20 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 80a2808:	6823      	ldr	r3, [r4, #0]
 80a280a:	2202      	movs	r2, #2
 80a280c:	4620      	mov	r0, r4
 80a280e:	68db      	ldr	r3, [r3, #12]
 80a2810:	494c      	ldr	r1, [pc, #304]	; (80a2944 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 80a2812:	4798      	blx	r3
    if (attr.has_file) {
 80a2814:	792b      	ldrb	r3, [r5, #4]
 80a2816:	07da      	lsls	r2, r3, #31
 80a2818:	d524      	bpl.n	80a2864 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 80a281a:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 80a281e:	212f      	movs	r1, #47	; 0x2f
 80a2820:	4640      	mov	r0, r8
 80a2822:	f002 f896 	bl	80a4952 <strrchr>
    if (s1) {
 80a2826:	b108      	cbz	r0, 80a282c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 80a2828:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 80a282c:	4641      	mov	r1, r8
 80a282e:	4620      	mov	r0, r4
 80a2830:	f7ff f9f6 	bl	80a1c20 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 80a2834:	792b      	ldrb	r3, [r5, #4]
 80a2836:	079b      	lsls	r3, r3, #30
 80a2838:	d508      	bpl.n	80a284c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 80a283a:	213a      	movs	r1, #58	; 0x3a
 80a283c:	4620      	mov	r0, r4
 80a283e:	f7ff f9fd 	bl	80a1c3c <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 80a2842:	4620      	mov	r0, r4
 80a2844:	68ea      	ldr	r2, [r5, #12]
 80a2846:	4940      	ldr	r1, [pc, #256]	; (80a2948 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 80a2848:	f7ff fa04 	bl	80a1c54 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 80a284c:	792a      	ldrb	r2, [r5, #4]
 80a284e:	6823      	ldr	r3, [r4, #0]
 80a2850:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 80a2854:	4620      	mov	r0, r4
            write(", ", 2);
 80a2856:	f04f 0202 	mov.w	r2, #2
 80a285a:	68db      	ldr	r3, [r3, #12]
 80a285c:	bf14      	ite	ne
 80a285e:	493b      	ldrne	r1, [pc, #236]	; (80a294c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 80a2860:	493b      	ldreq	r1, [pc, #236]	; (80a2950 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 80a2862:	4798      	blx	r3
    if (attr.has_function) {
 80a2864:	792b      	ldrb	r3, [r5, #4]
 80a2866:	0758      	lsls	r0, r3, #29
 80a2868:	d51d      	bpl.n	80a28a6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 80a286a:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 80a286c:	460b      	mov	r3, r1
 80a286e:	461a      	mov	r2, r3
    for (; *s; ++s) {
 80a2870:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a2874:	b160      	cbz	r0, 80a2890 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 80a2876:	2820      	cmp	r0, #32
 80a2878:	d108      	bne.n	80a288c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 80a287a:	4619      	mov	r1, r3
 80a287c:	e7f7      	b.n	80a286e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 80a287e:	4835      	ldr	r0, [pc, #212]	; (80a2954 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 80a2880:	f000 f967 	bl	80a2b52 <_ZN5spark12NetworkClass9listeningEv>
 80a2884:	2800      	cmp	r0, #0
 80a2886:	d0ac      	beq.n	80a27e2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 80a2888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 80a288c:	2828      	cmp	r0, #40	; 0x28
 80a288e:	d1ee      	bne.n	80a286e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 80a2890:	6823      	ldr	r3, [r4, #0]
 80a2892:	1a52      	subs	r2, r2, r1
 80a2894:	4620      	mov	r0, r4
 80a2896:	68db      	ldr	r3, [r3, #12]
 80a2898:	4798      	blx	r3
        write("(): ", 4);
 80a289a:	6823      	ldr	r3, [r4, #0]
 80a289c:	2204      	movs	r2, #4
 80a289e:	4620      	mov	r0, r4
 80a28a0:	68db      	ldr	r3, [r3, #12]
 80a28a2:	492d      	ldr	r1, [pc, #180]	; (80a2958 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 80a28a4:	4798      	blx	r3
    return log_level_name(level, nullptr);
 80a28a6:	2100      	movs	r1, #0
 80a28a8:	4638      	mov	r0, r7
 80a28aa:	f7fe fd35 	bl	80a1318 <log_level_name>
 80a28ae:	4601      	mov	r1, r0
    write(s);
 80a28b0:	4620      	mov	r0, r4
 80a28b2:	f7ff f9b5 	bl	80a1c20 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 80a28b6:	6823      	ldr	r3, [r4, #0]
 80a28b8:	2202      	movs	r2, #2
 80a28ba:	4620      	mov	r0, r4
 80a28bc:	68db      	ldr	r3, [r3, #12]
 80a28be:	4924      	ldr	r1, [pc, #144]	; (80a2950 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 80a28c0:	4798      	blx	r3
    if (msg) {
 80a28c2:	b11e      	cbz	r6, 80a28cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 80a28c4:	4631      	mov	r1, r6
 80a28c6:	4620      	mov	r0, r4
 80a28c8:	f7ff f9aa 	bl	80a1c20 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 80a28cc:	792b      	ldrb	r3, [r5, #4]
 80a28ce:	f013 0f30 	tst.w	r3, #48	; 0x30
 80a28d2:	d02c      	beq.n	80a292e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 80a28d4:	6823      	ldr	r3, [r4, #0]
 80a28d6:	4921      	ldr	r1, [pc, #132]	; (80a295c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 80a28d8:	68db      	ldr	r3, [r3, #12]
 80a28da:	2202      	movs	r2, #2
 80a28dc:	4620      	mov	r0, r4
 80a28de:	4798      	blx	r3
        if (attr.has_code) {
 80a28e0:	792b      	ldrb	r3, [r5, #4]
 80a28e2:	06d9      	lsls	r1, r3, #27
 80a28e4:	d50a      	bpl.n	80a28fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 80a28e6:	6823      	ldr	r3, [r4, #0]
 80a28e8:	2207      	movs	r2, #7
 80a28ea:	4620      	mov	r0, r4
 80a28ec:	491c      	ldr	r1, [pc, #112]	; (80a2960 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 80a28ee:	68db      	ldr	r3, [r3, #12]
 80a28f0:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 80a28f2:	4620      	mov	r0, r4
 80a28f4:	69aa      	ldr	r2, [r5, #24]
 80a28f6:	491b      	ldr	r1, [pc, #108]	; (80a2964 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 80a28f8:	f7ff f9ac 	bl	80a1c54 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 80a28fc:	792b      	ldrb	r3, [r5, #4]
 80a28fe:	069a      	lsls	r2, r3, #26
 80a2900:	d511      	bpl.n	80a2926 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 80a2902:	06db      	lsls	r3, r3, #27
 80a2904:	d505      	bpl.n	80a2912 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 80a2906:	6823      	ldr	r3, [r4, #0]
 80a2908:	2202      	movs	r2, #2
 80a290a:	4620      	mov	r0, r4
 80a290c:	68db      	ldr	r3, [r3, #12]
 80a290e:	490f      	ldr	r1, [pc, #60]	; (80a294c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 80a2910:	4798      	blx	r3
            write("details = ", 10);
 80a2912:	6823      	ldr	r3, [r4, #0]
 80a2914:	4620      	mov	r0, r4
 80a2916:	4914      	ldr	r1, [pc, #80]	; (80a2968 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 80a2918:	220a      	movs	r2, #10
 80a291a:	68db      	ldr	r3, [r3, #12]
 80a291c:	4798      	blx	r3
            write(attr.details);
 80a291e:	4620      	mov	r0, r4
 80a2920:	69e9      	ldr	r1, [r5, #28]
 80a2922:	f7ff f97d 	bl	80a1c20 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 80a2926:	215d      	movs	r1, #93	; 0x5d
 80a2928:	4620      	mov	r0, r4
 80a292a:	f7ff f987 	bl	80a1c3c <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 80a292e:	6823      	ldr	r3, [r4, #0]
 80a2930:	4620      	mov	r0, r4
}
 80a2932:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 80a2936:	2202      	movs	r2, #2
 80a2938:	68db      	ldr	r3, [r3, #12]
 80a293a:	490c      	ldr	r1, [pc, #48]	; (80a296c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 80a293c:	4718      	bx	r3
 80a293e:	bf00      	nop
 80a2940:	080a4d3c 	.word	0x080a4d3c
 80a2944:	080a4d43 	.word	0x080a4d43
 80a2948:	080a4ce4 	.word	0x080a4ce4
 80a294c:	080a4d46 	.word	0x080a4d46
 80a2950:	080a4d4b 	.word	0x080a4d4b
 80a2954:	200001c8 	.word	0x200001c8
 80a2958:	080a4d49 	.word	0x080a4d49
 80a295c:	080a4d4e 	.word	0x080a4d4e
 80a2960:	080a4d51 	.word	0x080a4d51
 80a2964:	080a4d59 	.word	0x080a4d59
 80a2968:	080a4d5c 	.word	0x080a4d5c
 80a296c:	080a4d67 	.word	0x080a4d67

080a2970 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a2970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a2974:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
 80a2976:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a297a:	4605      	mov	r5, r0
 80a297c:	460f      	mov	r7, r1
 80a297e:	4690      	mov	r8, r2
 80a2980:	461e      	mov	r6, r3
 80a2982:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 80a2984:	f000 fdf8 	bl	80a3578 <_Z16_fetch_usbserialv>
 80a2988:	4581      	cmp	r9, r0
 80a298a:	d105      	bne.n	80a2998 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 80a298c:	4849      	ldr	r0, [pc, #292]	; (80a2ab4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 80a298e:	f000 f8e0 	bl	80a2b52 <_ZN5spark12NetworkClass9listeningEv>
 80a2992:	2800      	cmp	r0, #0
 80a2994:	f040 808a 	bne.w	80a2aac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 80a2998:	f04f 0900 	mov.w	r9, #0
    JSONStreamWriter json(*this->stream());
 80a299c:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 80a299e:	4a46      	ldr	r2, [pc, #280]	; (80a2ab8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 80a29a0:	a801      	add	r0, sp, #4
 80a29a2:	9201      	str	r2, [sp, #4]
 80a29a4:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 80a29a6:	f88d 9008 	strb.w	r9, [sp, #8]
 80a29aa:	f7ff f80e 	bl	80a19ca <_ZN5spark10JSONWriter11beginObjectEv>
 80a29ae:	4649      	mov	r1, r9
 80a29b0:	4640      	mov	r0, r8
 80a29b2:	f7fe fcb1 	bl	80a1318 <log_level_name>
 80a29b6:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 80a29b8:	4940      	ldr	r1, [pc, #256]	; (80a2abc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 80a29ba:	2201      	movs	r2, #1
 80a29bc:	a801      	add	r0, sp, #4
 80a29be:	f7ff f8a1 	bl	80a1b04 <_ZN5spark10JSONWriter4nameEPKcj>
 80a29c2:	4641      	mov	r1, r8
 80a29c4:	f7ff f91f 	bl	80a1c06 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 80a29c8:	b13f      	cbz	r7, 80a29da <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 80a29ca:	493d      	ldr	r1, [pc, #244]	; (80a2ac0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 80a29cc:	2201      	movs	r2, #1
 80a29ce:	a801      	add	r0, sp, #4
 80a29d0:	f7ff f898 	bl	80a1b04 <_ZN5spark10JSONWriter4nameEPKcj>
 80a29d4:	4639      	mov	r1, r7
 80a29d6:	f7ff f916 	bl	80a1c06 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 80a29da:	b13e      	cbz	r6, 80a29ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 80a29dc:	4939      	ldr	r1, [pc, #228]	; (80a2ac4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 80a29de:	2201      	movs	r2, #1
 80a29e0:	a801      	add	r0, sp, #4
 80a29e2:	f7ff f88f 	bl	80a1b04 <_ZN5spark10JSONWriter4nameEPKcj>
 80a29e6:	4631      	mov	r1, r6
 80a29e8:	f7ff f90d 	bl	80a1c06 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 80a29ec:	7923      	ldrb	r3, [r4, #4]
 80a29ee:	07df      	lsls	r7, r3, #31
 80a29f0:	d50e      	bpl.n	80a2a10 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 80a29f2:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 80a29f4:	212f      	movs	r1, #47	; 0x2f
 80a29f6:	4630      	mov	r0, r6
 80a29f8:	f001 ffab 	bl	80a4952 <strrchr>
    if (s1) {
 80a29fc:	b100      	cbz	r0, 80a2a00 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 80a29fe:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 80a2a00:	4931      	ldr	r1, [pc, #196]	; (80a2ac8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 80a2a02:	2201      	movs	r2, #1
 80a2a04:	a801      	add	r0, sp, #4
 80a2a06:	f7ff f87d 	bl	80a1b04 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2a0a:	4631      	mov	r1, r6
 80a2a0c:	f7ff f8fb 	bl	80a1c06 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 80a2a10:	7923      	ldrb	r3, [r4, #4]
 80a2a12:	079e      	lsls	r6, r3, #30
 80a2a14:	d507      	bpl.n	80a2a26 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 80a2a16:	492d      	ldr	r1, [pc, #180]	; (80a2acc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 80a2a18:	2202      	movs	r2, #2
 80a2a1a:	a801      	add	r0, sp, #4
 80a2a1c:	f7ff f872 	bl	80a1b04 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2a20:	68e1      	ldr	r1, [r4, #12]
 80a2a22:	f7fe ffdf 	bl	80a19e4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 80a2a26:	7923      	ldrb	r3, [r4, #4]
 80a2a28:	0758      	lsls	r0, r3, #29
 80a2a2a:	d514      	bpl.n	80a2a56 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 80a2a2c:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 80a2a2e:	4633      	mov	r3, r6
 80a2a30:	461f      	mov	r7, r3
    for (; *s; ++s) {
 80a2a32:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2a36:	b12a      	cbz	r2, 80a2a44 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 80a2a38:	2a20      	cmp	r2, #32
 80a2a3a:	d101      	bne.n	80a2a40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 80a2a3c:	461e      	mov	r6, r3
 80a2a3e:	e7f7      	b.n	80a2a30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 80a2a40:	2a28      	cmp	r2, #40	; 0x28
 80a2a42:	d1f5      	bne.n	80a2a30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 80a2a44:	2202      	movs	r2, #2
 80a2a46:	4922      	ldr	r1, [pc, #136]	; (80a2ad0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 80a2a48:	a801      	add	r0, sp, #4
 80a2a4a:	f7ff f85b 	bl	80a1b04 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2a4e:	4631      	mov	r1, r6
 80a2a50:	1bba      	subs	r2, r7, r6
 80a2a52:	f7ff f866 	bl	80a1b22 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 80a2a56:	7923      	ldrb	r3, [r4, #4]
 80a2a58:	0719      	lsls	r1, r3, #28
 80a2a5a:	d507      	bpl.n	80a2a6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 80a2a5c:	491d      	ldr	r1, [pc, #116]	; (80a2ad4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 80a2a5e:	2201      	movs	r2, #1
 80a2a60:	a801      	add	r0, sp, #4
 80a2a62:	f7ff f84f 	bl	80a1b04 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2a66:	6961      	ldr	r1, [r4, #20]
 80a2a68:	f7fe ffce 	bl	80a1a08 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 80a2a6c:	7923      	ldrb	r3, [r4, #4]
 80a2a6e:	06da      	lsls	r2, r3, #27
 80a2a70:	d508      	bpl.n	80a2a84 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 80a2a72:	2204      	movs	r2, #4
 80a2a74:	4918      	ldr	r1, [pc, #96]	; (80a2ad8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 80a2a76:	eb0d 0002 	add.w	r0, sp, r2
 80a2a7a:	f7ff f843 	bl	80a1b04 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2a7e:	69a1      	ldr	r1, [r4, #24]
 80a2a80:	f7fe ffb0 	bl	80a19e4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 80a2a84:	7923      	ldrb	r3, [r4, #4]
 80a2a86:	069b      	lsls	r3, r3, #26
 80a2a88:	d507      	bpl.n	80a2a9a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 80a2a8a:	4914      	ldr	r1, [pc, #80]	; (80a2adc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 80a2a8c:	2206      	movs	r2, #6
 80a2a8e:	a801      	add	r0, sp, #4
 80a2a90:	f7ff f838 	bl	80a1b04 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2a94:	69e1      	ldr	r1, [r4, #28]
 80a2a96:	f7ff f8b6 	bl	80a1c06 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 80a2a9a:	a801      	add	r0, sp, #4
 80a2a9c:	f7fe ff7f 	bl	80a199e <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
 80a2aa0:	6a28      	ldr	r0, [r5, #32]
 80a2aa2:	2202      	movs	r2, #2
 80a2aa4:	6803      	ldr	r3, [r0, #0]
 80a2aa6:	490e      	ldr	r1, [pc, #56]	; (80a2ae0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 80a2aa8:	68db      	ldr	r3, [r3, #12]
 80a2aaa:	4798      	blx	r3
}
 80a2aac:	b005      	add	sp, #20
 80a2aae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a2ab2:	bf00      	nop
 80a2ab4:	200001c8 	.word	0x200001c8
 80a2ab8:	080a4d8c 	.word	0x080a4d8c
 80a2abc:	080a4d16 	.word	0x080a4d16
 80a2ac0:	080a4bf2 	.word	0x080a4bf2
 80a2ac4:	080a4d6a 	.word	0x080a4d6a
 80a2ac8:	080a4d6c 	.word	0x080a4d6c
 80a2acc:	080a4d6e 	.word	0x080a4d6e
 80a2ad0:	080a4d71 	.word	0x080a4d71
 80a2ad4:	080a4d74 	.word	0x080a4d74
 80a2ad8:	080a4d76 	.word	0x080a4d76
 80a2adc:	080a4d7b 	.word	0x080a4d7b
 80a2ae0:	080a4d67 	.word	0x080a4d67

080a2ae4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a2ae4:	2300      	movs	r3, #0
 80a2ae6:	6840      	ldr	r0, [r0, #4]
 80a2ae8:	461a      	mov	r2, r3
 80a2aea:	f7fe bc59 	b.w	80a13a0 <network_connect>

080a2aee <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a2aee:	2200      	movs	r2, #0
 80a2af0:	2102      	movs	r1, #2
 80a2af2:	6840      	ldr	r0, [r0, #4]
 80a2af4:	f7fe bc64 	b.w	80a13c0 <network_disconnect>

080a2af8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a2af8:	2200      	movs	r2, #0
 80a2afa:	6840      	ldr	r0, [r0, #4]
 80a2afc:	4611      	mov	r1, r2
 80a2afe:	f7fe bc57 	b.w	80a13b0 <network_connecting>

080a2b02 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a2b02:	2200      	movs	r2, #0
 80a2b04:	6840      	ldr	r0, [r0, #4]
 80a2b06:	4611      	mov	r1, r2
 80a2b08:	f7fe bc62 	b.w	80a13d0 <network_ready>

080a2b0c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a2b0c:	2300      	movs	r3, #0
 80a2b0e:	6840      	ldr	r0, [r0, #4]
 80a2b10:	461a      	mov	r2, r3
 80a2b12:	4619      	mov	r1, r3
 80a2b14:	f7fe bc64 	b.w	80a13e0 <network_on>

080a2b18 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a2b18:	2300      	movs	r3, #0
 80a2b1a:	6840      	ldr	r0, [r0, #4]
 80a2b1c:	461a      	mov	r2, r3
 80a2b1e:	4619      	mov	r1, r3
 80a2b20:	f7fe bc66 	b.w	80a13f0 <network_off>

080a2b24 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a2b24:	2100      	movs	r1, #0
 80a2b26:	6840      	ldr	r0, [r0, #4]
 80a2b28:	f7fe bc8a 	b.w	80a1440 <network_is_on>

080a2b2c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a2b2c:	2100      	movs	r1, #0
 80a2b2e:	6840      	ldr	r0, [r0, #4]
 80a2b30:	f7fe bc8e 	b.w	80a1450 <network_is_off>

080a2b34 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a2b34:	2200      	movs	r2, #0
 80a2b36:	6840      	ldr	r0, [r0, #4]
 80a2b38:	f081 0101 	eor.w	r1, r1, #1
 80a2b3c:	f7fe bc60 	b.w	80a1400 <network_listen>

080a2b40 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a2b40:	2200      	movs	r2, #0
 80a2b42:	6840      	ldr	r0, [r0, #4]
 80a2b44:	f7fe bc6c 	b.w	80a1420 <network_set_listen_timeout>

080a2b48 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a2b48:	2200      	movs	r2, #0
 80a2b4a:	6840      	ldr	r0, [r0, #4]
 80a2b4c:	4611      	mov	r1, r2
 80a2b4e:	f7fe bc6f 	b.w	80a1430 <network_get_listen_timeout>

080a2b52 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a2b52:	2200      	movs	r2, #0
 80a2b54:	6840      	ldr	r0, [r0, #4]
 80a2b56:	4611      	mov	r1, r2
 80a2b58:	f7fe bc5a 	b.w	80a1410 <network_listening>

080a2b5c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2b5c:	b570      	push	{r4, r5, r6, lr}
 80a2b5e:	4615      	mov	r5, r2
 80a2b60:	b08e      	sub	sp, #56	; 0x38
 80a2b62:	4604      	mov	r4, r0
    IPAddress addr;
 80a2b64:	a808      	add	r0, sp, #32
 80a2b66:	f7fe fd63 	bl	80a1630 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a2b6a:	2211      	movs	r2, #17
 80a2b6c:	2100      	movs	r1, #0
 80a2b6e:	a803      	add	r0, sp, #12
 80a2b70:	f001 fe80 	bl	80a4874 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2b74:	2600      	movs	r6, #0
 80a2b76:	4628      	mov	r0, r5
 80a2b78:	f001 fed1 	bl	80a491e <strlen>
 80a2b7c:	4b0a      	ldr	r3, [pc, #40]	; (80a2ba8 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a2b7e:	9600      	str	r6, [sp, #0]
 80a2b80:	b281      	uxth	r1, r0
 80a2b82:	685b      	ldr	r3, [r3, #4]
 80a2b84:	4628      	mov	r0, r5
 80a2b86:	aa03      	add	r2, sp, #12
 80a2b88:	f7fe fba6 	bl	80a12d8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2b8c:	b130      	cbz	r0, 80a2b9c <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a2b8e:	4631      	mov	r1, r6
 80a2b90:	4620      	mov	r0, r4
 80a2b92:	f7fe fd6d 	bl	80a1670 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a2b96:	4620      	mov	r0, r4
 80a2b98:	b00e      	add	sp, #56	; 0x38
 80a2b9a:	bd70      	pop	{r4, r5, r6, pc}
 80a2b9c:	4620      	mov	r0, r4
 80a2b9e:	a903      	add	r1, sp, #12
 80a2ba0:	f7fe fd54 	bl	80a164c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a2ba4:	e7f7      	b.n	80a2b96 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a2ba6:	bf00      	nop
 80a2ba8:	20000648 	.word	0x20000648

080a2bac <_ZN5spark12NetworkClass4fromEm>:
}
 80a2bac:	4a03      	ldr	r2, [pc, #12]	; (80a2bbc <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a2bae:	4b04      	ldr	r3, [pc, #16]	; (80a2bc0 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a2bb0:	2804      	cmp	r0, #4
 80a2bb2:	bf14      	ite	ne
 80a2bb4:	4610      	movne	r0, r2
 80a2bb6:	4618      	moveq	r0, r3
 80a2bb8:	4770      	bx	lr
 80a2bba:	bf00      	nop
 80a2bbc:	200001c8 	.word	0x200001c8
 80a2bc0:	20000648 	.word	0x20000648

080a2bc4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a2bc4:	4b02      	ldr	r3, [pc, #8]	; (80a2bd0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a2bc6:	4a03      	ldr	r2, [pc, #12]	; (80a2bd4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2bc8:	601a      	str	r2, [r3, #0]
 80a2bca:	2200      	movs	r2, #0
 80a2bcc:	605a      	str	r2, [r3, #4]

} // spark
 80a2bce:	4770      	bx	lr
 80a2bd0:	200001c8 	.word	0x200001c8
 80a2bd4:	080a4e04 	.word	0x080a4e04

080a2bd8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a2bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2bda:	4606      	mov	r6, r0
 80a2bdc:	460d      	mov	r5, r1
  size_t n = 0;
 80a2bde:	2400      	movs	r4, #0
 80a2be0:	188f      	adds	r7, r1, r2
  while (size--) {
 80a2be2:	42bd      	cmp	r5, r7
 80a2be4:	d00c      	beq.n	80a2c00 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a2be6:	6833      	ldr	r3, [r6, #0]
 80a2be8:	4630      	mov	r0, r6
 80a2bea:	689b      	ldr	r3, [r3, #8]
 80a2bec:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a2bf0:	4798      	blx	r3
     if (chunk>=0)
 80a2bf2:	1e03      	subs	r3, r0, #0
 80a2bf4:	db01      	blt.n	80a2bfa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a2bf6:	441c      	add	r4, r3
  while (size--) {
 80a2bf8:	e7f3      	b.n	80a2be2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a2bfa:	2c00      	cmp	r4, #0
 80a2bfc:	bf08      	it	eq
 80a2bfe:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a2c00:	4620      	mov	r0, r4
 80a2c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2c04 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80a2c04:	b570      	push	{r4, r5, r6, lr}
 80a2c06:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a2c08:	460c      	mov	r4, r1
    }
 80a2c0a:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a2c0c:	b149      	cbz	r1, 80a2c22 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a2c0e:	f001 fe86 	bl	80a491e <strlen>
 80a2c12:	682b      	ldr	r3, [r5, #0]
 80a2c14:	4602      	mov	r2, r0
 80a2c16:	4621      	mov	r1, r4
 80a2c18:	4628      	mov	r0, r5
    }
 80a2c1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a2c1e:	68db      	ldr	r3, [r3, #12]
 80a2c20:	4718      	bx	r3
    }
 80a2c22:	bd70      	pop	{r4, r5, r6, pc}

080a2c24 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a2c24:	6803      	ldr	r3, [r0, #0]
 80a2c26:	689b      	ldr	r3, [r3, #8]
 80a2c28:	4718      	bx	r3

080a2c2a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a2c2a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a2c2c:	210d      	movs	r1, #13
{
 80a2c2e:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a2c30:	f7ff fff8 	bl	80a2c24 <_ZN5Print5printEc>
  n += print('\n');
 80a2c34:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a2c36:	4604      	mov	r4, r0
  n += print('\n');
 80a2c38:	4628      	mov	r0, r5
 80a2c3a:	f7ff fff3 	bl	80a2c24 <_ZN5Print5printEc>
  return n;
}
 80a2c3e:	4420      	add	r0, r4
 80a2c40:	bd38      	pop	{r3, r4, r5, pc}

080a2c42 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a2c42:	b538      	push	{r3, r4, r5, lr}
 80a2c44:	4605      	mov	r5, r0
  return write(str);
 80a2c46:	f7ff ffdd 	bl	80a2c04 <_ZN5Print5writeEPKc>
 80a2c4a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a2c4c:	4628      	mov	r0, r5
 80a2c4e:	f7ff ffec 	bl	80a2c2a <_ZN5Print7printlnEv>
  return n;
}
 80a2c52:	4420      	add	r0, r4
 80a2c54:	bd38      	pop	{r3, r4, r5, pc}

080a2c56 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a2c56:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a2c58:	2a01      	cmp	r2, #1
 80a2c5a:	bf98      	it	ls
 80a2c5c:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a2c5e:	b530      	push	{r4, r5, lr}
 80a2c60:	b08b      	sub	sp, #44	; 0x2c
 80a2c62:	460c      	mov	r4, r1
  *str = '\0';
 80a2c64:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a2c68:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a2c6a:	4625      	mov	r5, r4
 80a2c6c:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a2c70:	fb04 5312 	mls	r3, r4, r2, r5
 80a2c74:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a2c76:	2b09      	cmp	r3, #9
 80a2c78:	bf94      	ite	ls
 80a2c7a:	3330      	addls	r3, #48	; 0x30
 80a2c7c:	3337      	addhi	r3, #55	; 0x37
 80a2c7e:	b2db      	uxtb	r3, r3
  } while(n);
 80a2c80:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a2c82:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a2c86:	d9f0      	bls.n	80a2c6a <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a2c88:	f7ff ffbc 	bl	80a2c04 <_ZN5Print5writeEPKc>
}
 80a2c8c:	b00b      	add	sp, #44	; 0x2c
 80a2c8e:	bd30      	pop	{r4, r5, pc}

080a2c90 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 80a2c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2c94:	b086      	sub	sp, #24
 80a2c96:	af00      	add	r7, sp, #0
 80a2c98:	4605      	mov	r5, r0
 80a2c9a:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 80a2c9c:	1d38      	adds	r0, r7, #4
 80a2c9e:	2114      	movs	r1, #20
{
 80a2ca0:	4614      	mov	r4, r2
    va_copy(args2, args);
 80a2ca2:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 80a2ca4:	f7fe fbf4 	bl	80a1490 <vsnprintf>

    if (n<bufsize)
 80a2ca8:	2813      	cmp	r0, #19
 80a2caa:	d80e      	bhi.n	80a2cca <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 80a2cac:	4628      	mov	r0, r5
 80a2cae:	1d39      	adds	r1, r7, #4
 80a2cb0:	f7ff ffa8 	bl	80a2c04 <_ZN5Print5writeEPKc>
 80a2cb4:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 80a2cb6:	b11e      	cbz	r6, 80a2cc0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 80a2cb8:	4628      	mov	r0, r5
 80a2cba:	f7ff ffb6 	bl	80a2c2a <_ZN5Print7printlnEv>
 80a2cbe:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 80a2cc0:	4620      	mov	r0, r4
 80a2cc2:	3718      	adds	r7, #24
 80a2cc4:	46bd      	mov	sp, r7
 80a2cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 80a2cca:	f100 0308 	add.w	r3, r0, #8
 80a2cce:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 80a2cd2:	46e8      	mov	r8, sp
        char bigger[n+1];
 80a2cd4:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 80a2cd8:	4622      	mov	r2, r4
 80a2cda:	1c41      	adds	r1, r0, #1
 80a2cdc:	683b      	ldr	r3, [r7, #0]
 80a2cde:	4668      	mov	r0, sp
 80a2ce0:	f7fe fbd6 	bl	80a1490 <vsnprintf>
  return write(str);
 80a2ce4:	4669      	mov	r1, sp
 80a2ce6:	4628      	mov	r0, r5
 80a2ce8:	f7ff ff8c 	bl	80a2c04 <_ZN5Print5writeEPKc>
 80a2cec:	4604      	mov	r4, r0
 80a2cee:	46c5      	mov	sp, r8
 80a2cf0:	e7e1      	b.n	80a2cb6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>
	...

080a2cf4 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2cf4:	2200      	movs	r2, #0
 80a2cf6:	4b01      	ldr	r3, [pc, #4]	; (80a2cfc <_GLOBAL__sub_I_RGB+0x8>)
 80a2cf8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a2cfa:	4770      	bx	lr
 80a2cfc:	200001d0 	.word	0x200001d0

080a2d00 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a2d00:	b510      	push	{r4, lr}
 80a2d02:	4604      	mov	r4, r0
{
	free(buffer);
 80a2d04:	6800      	ldr	r0, [r0, #0]
 80a2d06:	f7fe fbb3 	bl	80a1470 <free>
}
 80a2d0a:	4620      	mov	r0, r4
 80a2d0c:	bd10      	pop	{r4, pc}

080a2d0e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a2d0e:	b510      	push	{r4, lr}
 80a2d10:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a2d12:	6800      	ldr	r0, [r0, #0]
 80a2d14:	b108      	cbz	r0, 80a2d1a <_ZN6String10invalidateEv+0xc>
 80a2d16:	f7fe fbab 	bl	80a1470 <free>
	buffer = NULL;
 80a2d1a:	2300      	movs	r3, #0
	capacity = len = 0;
 80a2d1c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a2d20:	6023      	str	r3, [r4, #0]
}
 80a2d22:	bd10      	pop	{r4, pc}

080a2d24 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a2d24:	b538      	push	{r3, r4, r5, lr}
 80a2d26:	4604      	mov	r4, r0
 80a2d28:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a2d2a:	6800      	ldr	r0, [r0, #0]
 80a2d2c:	3101      	adds	r1, #1
 80a2d2e:	f7fe fba7 	bl	80a1480 <realloc>
	if (newbuffer) {
 80a2d32:	b110      	cbz	r0, 80a2d3a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a2d34:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a2d38:	2001      	movs	r0, #1
	}
	return 0;
}
 80a2d3a:	bd38      	pop	{r3, r4, r5, pc}

080a2d3c <_ZN6String7reserveEj>:
{
 80a2d3c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a2d3e:	6803      	ldr	r3, [r0, #0]
{
 80a2d40:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a2d42:	b123      	cbz	r3, 80a2d4e <_ZN6String7reserveEj+0x12>
 80a2d44:	6843      	ldr	r3, [r0, #4]
 80a2d46:	428b      	cmp	r3, r1
 80a2d48:	d301      	bcc.n	80a2d4e <_ZN6String7reserveEj+0x12>
 80a2d4a:	2001      	movs	r0, #1
}
 80a2d4c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a2d4e:	4620      	mov	r0, r4
 80a2d50:	f7ff ffe8 	bl	80a2d24 <_ZN6String12changeBufferEj>
 80a2d54:	2800      	cmp	r0, #0
 80a2d56:	d0f9      	beq.n	80a2d4c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a2d58:	68a3      	ldr	r3, [r4, #8]
 80a2d5a:	2b00      	cmp	r3, #0
 80a2d5c:	d1f5      	bne.n	80a2d4a <_ZN6String7reserveEj+0xe>
 80a2d5e:	6822      	ldr	r2, [r4, #0]
 80a2d60:	7013      	strb	r3, [r2, #0]
 80a2d62:	e7f2      	b.n	80a2d4a <_ZN6String7reserveEj+0xe>

080a2d64 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a2d64:	b570      	push	{r4, r5, r6, lr}
 80a2d66:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a2d68:	4611      	mov	r1, r2
{
 80a2d6a:	4604      	mov	r4, r0
 80a2d6c:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a2d6e:	f7ff ffe5 	bl	80a2d3c <_ZN6String7reserveEj>
 80a2d72:	b920      	cbnz	r0, 80a2d7e <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a2d74:	4620      	mov	r0, r4
 80a2d76:	f7ff ffca 	bl	80a2d0e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a2d7a:	4620      	mov	r0, r4
 80a2d7c:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a2d7e:	462a      	mov	r2, r5
 80a2d80:	4631      	mov	r1, r6
 80a2d82:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a2d84:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a2d86:	f001 fd4d 	bl	80a4824 <memcpy>
	buffer[len] = 0;
 80a2d8a:	2100      	movs	r1, #0
 80a2d8c:	6822      	ldr	r2, [r4, #0]
 80a2d8e:	68a3      	ldr	r3, [r4, #8]
 80a2d90:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a2d92:	e7f2      	b.n	80a2d7a <_ZN6String4copyEPKcj+0x16>

080a2d94 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80a2d94:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a2d96:	2300      	movs	r3, #0
String::String(const char *cstr)
 80a2d98:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a2d9a:	460d      	mov	r5, r1
	capacity = 0;
 80a2d9c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a2da0:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a2da2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a2da4:	b139      	cbz	r1, 80a2db6 <_ZN6StringC1EPKc+0x22>
 80a2da6:	4608      	mov	r0, r1
 80a2da8:	f001 fdb9 	bl	80a491e <strlen>
 80a2dac:	4629      	mov	r1, r5
 80a2dae:	4602      	mov	r2, r0
 80a2db0:	4620      	mov	r0, r4
 80a2db2:	f7ff ffd7 	bl	80a2d64 <_ZN6String4copyEPKcj>
}
 80a2db6:	4620      	mov	r0, r4
 80a2db8:	bd38      	pop	{r3, r4, r5, pc}

080a2dba <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a2dba:	b538      	push	{r3, r4, r5, lr}
 80a2dbc:	4605      	mov	r5, r0
	if (buffer) {
 80a2dbe:	6800      	ldr	r0, [r0, #0]
{
 80a2dc0:	460c      	mov	r4, r1
	if (buffer) {
 80a2dc2:	b168      	cbz	r0, 80a2de0 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 80a2dc4:	686a      	ldr	r2, [r5, #4]
 80a2dc6:	688b      	ldr	r3, [r1, #8]
 80a2dc8:	429a      	cmp	r2, r3
 80a2dca:	d307      	bcc.n	80a2ddc <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 80a2dcc:	6809      	ldr	r1, [r1, #0]
 80a2dce:	f001 fd9e 	bl	80a490e <strcpy>
			len = rhs.len;
 80a2dd2:	68a3      	ldr	r3, [r4, #8]
 80a2dd4:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a2dd6:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 80a2dd8:	60a3      	str	r3, [r4, #8]
}
 80a2dda:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 80a2ddc:	f7fe fb48 	bl	80a1470 <free>
	buffer = rhs.buffer;
 80a2de0:	6823      	ldr	r3, [r4, #0]
 80a2de2:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a2de4:	6863      	ldr	r3, [r4, #4]
 80a2de6:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a2de8:	68a3      	ldr	r3, [r4, #8]
 80a2dea:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a2dec:	2300      	movs	r3, #0
	rhs.capacity = 0;
 80a2dee:	e9c4 3300 	strd	r3, r3, [r4]
 80a2df2:	e7f1      	b.n	80a2dd8 <_ZN6String4moveERS_+0x1e>

080a2df4 <_ZN6StringC1EOS_>:
	buffer = NULL;
 80a2df4:	2300      	movs	r3, #0
String::String(String &&rval)
 80a2df6:	b510      	push	{r4, lr}
 80a2df8:	4604      	mov	r4, r0
	capacity = 0;
 80a2dfa:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a2dfe:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a2e00:	7303      	strb	r3, [r0, #12]
	move(rval);
 80a2e02:	f7ff ffda 	bl	80a2dba <_ZN6String4moveERS_>
}
 80a2e06:	4620      	mov	r0, r4
 80a2e08:	bd10      	pop	{r4, pc}

080a2e0a <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a2e0a:	4288      	cmp	r0, r1
{
 80a2e0c:	b510      	push	{r4, lr}
 80a2e0e:	460b      	mov	r3, r1
 80a2e10:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a2e12:	d004      	beq.n	80a2e1e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a2e14:	6809      	ldr	r1, [r1, #0]
 80a2e16:	b121      	cbz	r1, 80a2e22 <_ZN6StringaSERKS_+0x18>
 80a2e18:	689a      	ldr	r2, [r3, #8]
 80a2e1a:	f7ff ffa3 	bl	80a2d64 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a2e1e:	4620      	mov	r0, r4
 80a2e20:	bd10      	pop	{r4, pc}
	else invalidate();
 80a2e22:	f7ff ff74 	bl	80a2d0e <_ZN6String10invalidateEv>
 80a2e26:	e7fa      	b.n	80a2e1e <_ZN6StringaSERKS_+0x14>

080a2e28 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a2e28:	2300      	movs	r3, #0
String::String(const String &value)
 80a2e2a:	b510      	push	{r4, lr}
 80a2e2c:	4604      	mov	r4, r0
	capacity = 0;
 80a2e2e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a2e32:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a2e34:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a2e36:	f7ff ffe8 	bl	80a2e0a <_ZN6StringaSERKS_>
}
 80a2e3a:	4620      	mov	r0, r4
 80a2e3c:	bd10      	pop	{r4, pc}

080a2e3e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a2e3e:	b538      	push	{r3, r4, r5, lr}
 80a2e40:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a2e42:	460c      	mov	r4, r1
 80a2e44:	b149      	cbz	r1, 80a2e5a <_ZN6StringaSEPKc+0x1c>
 80a2e46:	4608      	mov	r0, r1
 80a2e48:	f001 fd69 	bl	80a491e <strlen>
 80a2e4c:	4621      	mov	r1, r4
 80a2e4e:	4602      	mov	r2, r0
 80a2e50:	4628      	mov	r0, r5
 80a2e52:	f7ff ff87 	bl	80a2d64 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a2e56:	4628      	mov	r0, r5
 80a2e58:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a2e5a:	f7ff ff58 	bl	80a2d0e <_ZN6String10invalidateEv>
 80a2e5e:	e7fa      	b.n	80a2e56 <_ZN6StringaSEPKc+0x18>

080a2e60 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a2e60:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a2e62:	2000      	movs	r0, #0
 80a2e64:	4b04      	ldr	r3, [pc, #16]	; (80a2e78 <_GLOBAL__sub_I_System+0x18>)
 80a2e66:	601a      	str	r2, [r3, #0]
 80a2e68:	4b04      	ldr	r3, [pc, #16]	; (80a2e7c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a2e6a:	4a05      	ldr	r2, [pc, #20]	; (80a2e80 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a2e6c:	6018      	str	r0, [r3, #0]
 80a2e6e:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
 80a2e70:	7198      	strb	r0, [r3, #6]
 80a2e72:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a2e74:	f7fe ba60 	b.w	80a1338 <set_system_mode>
 80a2e78:	200001ec 	.word	0x200001ec
 80a2e7c:	200001e0 	.word	0x200001e0
 80a2e80:	ffff0000 	.word	0xffff0000

080a2e84 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a2e84:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a2e86:	6803      	ldr	r3, [r0, #0]
{
 80a2e88:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a2e8c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a2e8e:	2201      	movs	r2, #1
 80a2e90:	f247 5330 	movw	r3, #30000	; 0x7530
 80a2e94:	f10d 0107 	add.w	r1, sp, #7
 80a2e98:	47a0      	blx	r4
}
 80a2e9a:	b002      	add	sp, #8
 80a2e9c:	bd10      	pop	{r4, pc}

080a2e9e <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a2e9e:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a2ea0:	6803      	ldr	r3, [r0, #0]
 80a2ea2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a2ea4:	f247 5330 	movw	r3, #30000	; 0x7530
 80a2ea8:	46a4      	mov	ip, r4
}
 80a2eaa:	bc10      	pop	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a2eac:	4760      	bx	ip

080a2eae <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a2eae:	b513      	push	{r0, r1, r4, lr}
 80a2eb0:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
 80a2eb2:	6802      	ldr	r2, [r0, #0]
{
 80a2eb4:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
 80a2eb8:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 80a2eba:	f10d 0107 	add.w	r1, sp, #7
 80a2ebe:	2201      	movs	r2, #1
 80a2ec0:	47a0      	blx	r4
}
 80a2ec2:	b002      	add	sp, #8
 80a2ec4:	bd10      	pop	{r4, pc}

080a2ec6 <_ZN9TCPClient5flushEv>:
  d_->total = 0;
}

void TCPClient::flush()
{
}
 80a2ec6:	4770      	bx	lr

080a2ec8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a2ec8:	4770      	bx	lr
	...

080a2ecc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a2ecc:	b510      	push	{r4, lr}
 80a2ece:	4604      	mov	r4, r0
	    ||
 80a2ed0:	4b06      	ldr	r3, [pc, #24]	; (80a2eec <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x20>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a2ed2:	4608      	mov	r0, r1
	    ||
 80a2ed4:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 80a2ed6:	f104 040c 	add.w	r4, r4, #12
 80a2eda:	d004      	beq.n	80a2ee6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 80a2edc:	f000 fd0c 	bl	80a38f8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
 80a2ee0:	2800      	cmp	r0, #0
	return nullptr;
 80a2ee2:	bf08      	it	eq
 80a2ee4:	2400      	moveq	r4, #0
      }
 80a2ee6:	4620      	mov	r0, r4
 80a2ee8:	bd10      	pop	{r4, pc}
 80a2eea:	bf00      	nop
 80a2eec:	080a4e70 	.word	0x080a4e70

080a2ef0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a2ef0:	b510      	push	{r4, lr}
 80a2ef2:	4604      	mov	r4, r0
 80a2ef4:	21ac      	movs	r1, #172	; 0xac
 80a2ef6:	f000 fcf9 	bl	80a38ec <_ZdlPvj>
 80a2efa:	4620      	mov	r0, r4
 80a2efc:	bd10      	pop	{r4, pc}

080a2efe <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 80a2efe:	f7fd b8d0 	b.w	80a00a2 <_ZdlPv>
	...

080a2f04 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a2f04:	b538      	push	{r3, r4, r5, lr}
 80a2f06:	4b0b      	ldr	r3, [pc, #44]	; (80a2f34 <_ZN9TCPClientD1Ev+0x30>)
	if (_M_pi != nullptr)
 80a2f08:	6984      	ldr	r4, [r0, #24]
 80a2f0a:	4605      	mov	r5, r0
 80a2f0c:	6003      	str	r3, [r0, #0]
 80a2f0e:	b17c      	cbz	r4, 80a2f30 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
 80a2f10:	6863      	ldr	r3, [r4, #4]
 80a2f12:	3b01      	subs	r3, #1
 80a2f14:	6063      	str	r3, [r4, #4]
 80a2f16:	b95b      	cbnz	r3, 80a2f30 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
 80a2f18:	6823      	ldr	r3, [r4, #0]
 80a2f1a:	4620      	mov	r0, r4
 80a2f1c:	689b      	ldr	r3, [r3, #8]
 80a2f1e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a2f20:	68a3      	ldr	r3, [r4, #8]
 80a2f22:	3b01      	subs	r3, #1
 80a2f24:	60a3      	str	r3, [r4, #8]
 80a2f26:	b91b      	cbnz	r3, 80a2f30 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a2f28:	6823      	ldr	r3, [r4, #0]
 80a2f2a:	4620      	mov	r0, r4
 80a2f2c:	68db      	ldr	r3, [r3, #12]
 80a2f2e:	4798      	blx	r3
 80a2f30:	4628      	mov	r0, r5
 80a2f32:	bd38      	pop	{r3, r4, r5, pc}
 80a2f34:	080a4e80 	.word	0x080a4e80

080a2f38 <_ZN9TCPClientD0Ev>:
 80a2f38:	b510      	push	{r4, lr}
 80a2f3a:	4604      	mov	r4, r0
 80a2f3c:	f7ff ffe2 	bl	80a2f04 <_ZN9TCPClientD1Ev>
 80a2f40:	4620      	mov	r0, r4
 80a2f42:	211c      	movs	r1, #28
 80a2f44:	f000 fcd2 	bl	80a38ec <_ZdlPvj>
 80a2f48:	4620      	mov	r0, r4
 80a2f4a:	bd10      	pop	{r4, pc}

080a2f4c <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a2f4c:	b570      	push	{r4, r5, r6, lr}
class IPAddress : public Printable {
 80a2f4e:	4604      	mov	r4, r0
 80a2f50:	4606      	mov	r6, r0
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a2f52:	694d      	ldr	r5, [r1, #20]
 80a2f54:	4b04      	ldr	r3, [pc, #16]	; (80a2f68 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a2f56:	358c      	adds	r5, #140	; 0x8c
 80a2f58:	f844 3b04 	str.w	r3, [r4], #4
 80a2f5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a2f5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a2f60:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a2f62:	4630      	mov	r0, r6
 80a2f64:	7023      	strb	r3, [r4, #0]
 80a2f66:	bd70      	pop	{r4, r5, r6, pc}
 80a2f68:	080a4cd8 	.word	0x080a4cd8

080a2f6c <_ZN9TCPClient4peekEv>:
{
 80a2f6c:	b510      	push	{r4, lr}
 80a2f6e:	6943      	ldr	r3, [r0, #20]
 80a2f70:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a2f72:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a2f76:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a2f7a:	429a      	cmp	r2, r3
 80a2f7c:	d005      	beq.n	80a2f8a <_ZN9TCPClient4peekEv+0x1e>
 80a2f7e:	6963      	ldr	r3, [r4, #20]
 80a2f80:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a2f84:	4413      	add	r3, r2
 80a2f86:	7918      	ldrb	r0, [r3, #4]
}
 80a2f88:	bd10      	pop	{r4, pc}
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a2f8a:	6803      	ldr	r3, [r0, #0]
 80a2f8c:	691b      	ldr	r3, [r3, #16]
 80a2f8e:	4798      	blx	r3
 80a2f90:	2800      	cmp	r0, #0
 80a2f92:	d1f4      	bne.n	80a2f7e <_ZN9TCPClient4peekEv+0x12>
 80a2f94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a2f98:	e7f6      	b.n	80a2f88 <_ZN9TCPClient4peekEv+0x1c>

080a2f9a <_ZN9TCPClient4readEv>:
{
 80a2f9a:	b510      	push	{r4, lr}
 80a2f9c:	6943      	ldr	r3, [r0, #20]
 80a2f9e:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a2fa0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a2fa4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a2fa8:	429a      	cmp	r2, r3
 80a2faa:	d008      	beq.n	80a2fbe <_ZN9TCPClient4readEv+0x24>
 80a2fac:	6963      	ldr	r3, [r4, #20]
 80a2fae:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a2fb2:	1c51      	adds	r1, r2, #1
 80a2fb4:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
 80a2fb8:	4413      	add	r3, r2
 80a2fba:	7918      	ldrb	r0, [r3, #4]
}
 80a2fbc:	bd10      	pop	{r4, pc}
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a2fbe:	6803      	ldr	r3, [r0, #0]
 80a2fc0:	691b      	ldr	r3, [r3, #16]
 80a2fc2:	4798      	blx	r3
 80a2fc4:	2800      	cmp	r0, #0
 80a2fc6:	d1f1      	bne.n	80a2fac <_ZN9TCPClient4readEv+0x12>
 80a2fc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a2fcc:	e7f6      	b.n	80a2fbc <_ZN9TCPClient4readEv+0x22>

080a2fce <_ZN9TCPClient4readEPhj>:
{
 80a2fce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2fd0:	6943      	ldr	r3, [r0, #20]
 80a2fd2:	4617      	mov	r7, r2
        if (bufferCount() || available())
 80a2fd4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a2fd8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
 80a2fdc:	4605      	mov	r5, r0
        if (bufferCount() || available())
 80a2fde:	429a      	cmp	r2, r3
{
 80a2fe0:	460e      	mov	r6, r1
        if (bufferCount() || available())
 80a2fe2:	d016      	beq.n	80a3012 <_ZN9TCPClient4readEPhj+0x44>
 80a2fe4:	6969      	ldr	r1, [r5, #20]
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a2fe6:	4630      	mov	r0, r6
  return d_->total - d_->offset;
 80a2fe8:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a2fec:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
 80a2ff0:	1ae4      	subs	r4, r4, r3
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a2ff2:	42bc      	cmp	r4, r7
 80a2ff4:	bf28      	it	cs
 80a2ff6:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a2ff8:	3304      	adds	r3, #4
 80a2ffa:	4622      	mov	r2, r4
 80a2ffc:	4419      	add	r1, r3
 80a2ffe:	f001 fc11 	bl	80a4824 <memcpy>
 80a3002:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a3004:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a3008:	4423      	add	r3, r4
 80a300a:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
 80a300e:	4620      	mov	r0, r4
 80a3010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (bufferCount() || available())
 80a3012:	6803      	ldr	r3, [r0, #0]
 80a3014:	691b      	ldr	r3, [r3, #16]
 80a3016:	4798      	blx	r3
 80a3018:	2800      	cmp	r0, #0
 80a301a:	d1e3      	bne.n	80a2fe4 <_ZN9TCPClient4readEPhj+0x16>
        int read = -1;
 80a301c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80a3020:	e7f5      	b.n	80a300e <_ZN9TCPClient4readEPhj+0x40>

080a3022 <_ZN9TCPClient12flush_bufferEv>:
  d_->offset = 0;
 80a3022:	2300      	movs	r3, #0
 80a3024:	6942      	ldr	r2, [r0, #20]
 80a3026:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a302a:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a302c:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
 80a3030:	4770      	bx	lr
	...

080a3034 <_ZN9TCPClient7connectE9IPAddresstm>:
{
 80a3034:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a3038:	461f      	mov	r7, r3
    stop();
 80a303a:	6803      	ldr	r3, [r0, #0]
{
 80a303c:	b08b      	sub	sp, #44	; 0x2c
    stop();
 80a303e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a3040:	4605      	mov	r5, r0
 80a3042:	460c      	mov	r4, r1
 80a3044:	4616      	mov	r6, r2
    stop();
 80a3046:	4798      	blx	r3
        if(Network.from(nif).ready())
 80a3048:	4638      	mov	r0, r7
 80a304a:	f7ff fdaf 	bl	80a2bac <_ZN5spark12NetworkClass4fromEm>
 80a304e:	6803      	ldr	r3, [r0, #0]
 80a3050:	68db      	ldr	r3, [r3, #12]
 80a3052:	4798      	blx	r3
 80a3054:	2800      	cmp	r0, #0
 80a3056:	d054      	beq.n	80a3102 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a3058:	4633      	mov	r3, r6
 80a305a:	2206      	movs	r2, #6
 80a305c:	2101      	movs	r1, #1
 80a305e:	2002      	movs	r0, #2
 80a3060:	9700      	str	r7, [sp, #0]
 80a3062:	f8d5 8014 	ldr.w	r8, [r5, #20]
 80a3066:	f7fe f877 	bl	80a1158 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a306a:	2320      	movs	r3, #32
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a306c:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a3070:	f04f 0800 	mov.w	r8, #0
 80a3074:	e9cd 3802 	strd	r3, r8, [sp, #8]
 80a3078:	696b      	ldr	r3, [r5, #20]
 80a307a:	2001      	movs	r0, #1
 80a307c:	681b      	ldr	r3, [r3, #0]
 80a307e:	4923      	ldr	r1, [pc, #140]	; (80a310c <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a3080:	9301      	str	r3, [sp, #4]
 80a3082:	4b23      	ldr	r3, [pc, #140]	; (80a3110 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a3084:	aa02      	add	r2, sp, #8
 80a3086:	9300      	str	r3, [sp, #0]
 80a3088:	4643      	mov	r3, r8
 80a308a:	f7fe f935 	bl	80a12f8 <log_message>
          if (socket_handle_valid(d_->sock))
 80a308e:	696b      	ldr	r3, [r5, #20]
 80a3090:	6818      	ldr	r0, [r3, #0]
 80a3092:	f7fe f859 	bl	80a1148 <socket_handle_valid>
 80a3096:	2800      	cmp	r0, #0
 80a3098:	d033      	beq.n	80a3102 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
            flush_buffer();
 80a309a:	4628      	mov	r0, r5
 80a309c:	f7ff ffc1 	bl	80a3022 <_ZN9TCPClient12flush_bufferEv>
            tSocketAddr.sa_family = AF_INET;
 80a30a0:	2302      	movs	r3, #2
 80a30a2:	f8ad 3008 	strh.w	r3, [sp, #8]
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a30a6:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a30a8:	ba76      	rev16	r6, r6
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a30aa:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a30ae:	79a3      	ldrb	r3, [r4, #6]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a30b0:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_data[3] = ip[1];
 80a30b4:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a30b8:	7963      	ldrb	r3, [r4, #5]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a30ba:	f8ad 600a 	strh.w	r6, [sp, #10]
            tSocketAddr.sa_data[4] = ip[2];
 80a30be:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a30c2:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a30c6:	f88d 300f 	strb.w	r3, [sp, #15]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a30ca:	f7fe f8fd 	bl	80a12c8 <HAL_NET_SetNetWatchDog>
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a30ce:	696b      	ldr	r3, [r5, #20]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a30d0:	4606      	mov	r6, r0
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a30d2:	2210      	movs	r2, #16
 80a30d4:	6818      	ldr	r0, [r3, #0]
 80a30d6:	a902      	add	r1, sp, #8
 80a30d8:	f7fe f846 	bl	80a1168 <socket_connect>
 80a30dc:	4681      	mov	r9, r0
            HAL_NET_SetNetWatchDog(ot);
 80a30de:	4630      	mov	r0, r6
 80a30e0:	f7fe f8f2 	bl	80a12c8 <HAL_NET_SetNetWatchDog>
 80a30e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a30e6:	696e      	ldr	r6, [r5, #20]
 80a30e8:	368c      	adds	r6, #140	; 0x8c
 80a30ea:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a30ec:	6823      	ldr	r3, [r4, #0]
 80a30ee:	7033      	strb	r3, [r6, #0]
            nif_ = nif;
 80a30f0:	612f      	str	r7, [r5, #16]
            if(!connected)
 80a30f2:	f1b9 0f00 	cmp.w	r9, #0
 80a30f6:	d007      	beq.n	80a3108 <_ZN9TCPClient7connectE9IPAddresstm+0xd4>
                stop();
 80a30f8:	682b      	ldr	r3, [r5, #0]
 80a30fa:	4628      	mov	r0, r5
 80a30fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a30fe:	4798      	blx	r3
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a3100:	4640      	mov	r0, r8
}
 80a3102:	b00b      	add	sp, #44	; 0x2c
 80a3104:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a3108:	2001      	movs	r0, #1
        return connected;
 80a310a:	e7fa      	b.n	80a3102 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
 80a310c:	080a4e38 	.word	0x080a4e38
 80a3110:	080a4e3f 	.word	0x080a4e3f

080a3114 <_ZN9TCPClient9availableEv>:
{
 80a3114:	b538      	push	{r3, r4, r5, lr}
 80a3116:	6942      	ldr	r2, [r0, #20]
 80a3118:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total))
 80a311a:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a311e:	b12b      	cbz	r3, 80a312c <_ZN9TCPClient9availableEv+0x18>
 80a3120:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a3124:	429a      	cmp	r2, r3
 80a3126:	d101      	bne.n	80a312c <_ZN9TCPClient9availableEv+0x18>
        flush_buffer();
 80a3128:	f7ff ff7b 	bl	80a3022 <_ZN9TCPClient12flush_bufferEv>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a312c:	6920      	ldr	r0, [r4, #16]
 80a312e:	f7ff fd3d 	bl	80a2bac <_ZN5spark12NetworkClass4fromEm>
 80a3132:	6803      	ldr	r3, [r0, #0]
 80a3134:	68db      	ldr	r3, [r3, #12]
 80a3136:	4798      	blx	r3
 80a3138:	b1f8      	cbz	r0, 80a317a <_ZN9TCPClient9availableEv+0x66>
 80a313a:	6963      	ldr	r3, [r4, #20]
   return socket_handle_valid(sd);
 80a313c:	6818      	ldr	r0, [r3, #0]
 80a313e:	f7fe f803 	bl	80a1148 <socket_handle_valid>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a3142:	b1d0      	cbz	r0, 80a317a <_ZN9TCPClient9availableEv+0x66>
 80a3144:	6960      	ldr	r0, [r4, #20]
        if ( d_->total < arraySize(d_->buffer))
 80a3146:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a314a:	297f      	cmp	r1, #127	; 0x7f
 80a314c:	d815      	bhi.n	80a317a <_ZN9TCPClient9availableEv+0x66>
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a314e:	1d05      	adds	r5, r0, #4
 80a3150:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a3154:	2300      	movs	r3, #0
 80a3156:	6800      	ldr	r0, [r0, #0]
 80a3158:	4429      	add	r1, r5
 80a315a:	f7fe f80d 	bl	80a1178 <socket_receive>
            if (ret > 0)
 80a315e:	2800      	cmp	r0, #0
 80a3160:	dd0b      	ble.n	80a317a <_ZN9TCPClient9availableEv+0x66>
 80a3162:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) d_->offset = 0;
 80a3164:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3168:	b90a      	cbnz	r2, 80a316e <_ZN9TCPClient9availableEv+0x5a>
 80a316a:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a316e:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
 80a3170:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3174:	4410      	add	r0, r2
 80a3176:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
 80a317a:	6963      	ldr	r3, [r4, #20]
  return d_->total - d_->offset;
 80a317c:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
 80a3180:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
 80a3184:	1ac0      	subs	r0, r0, r3
 80a3186:	bd38      	pop	{r3, r4, r5, pc}

080a3188 <_ZN9TCPClient4stopEv>:
{
 80a3188:	b538      	push	{r3, r4, r5, lr}
  if (isOpen(d_->sock))
 80a318a:	6943      	ldr	r3, [r0, #20]
{
 80a318c:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a318e:	6818      	ldr	r0, [r3, #0]
 80a3190:	f7fd ffda 	bl	80a1148 <socket_handle_valid>
  if (isOpen(d_->sock))
 80a3194:	b118      	cbz	r0, 80a319e <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a3196:	6963      	ldr	r3, [r4, #20]
 80a3198:	6818      	ldr	r0, [r3, #0]
 80a319a:	f7fd fff5 	bl	80a1188 <socket_close>
 80a319e:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a31a0:	f7fd fffa 	bl	80a1198 <socket_handle_invalid>
 80a31a4:	6028      	str	r0, [r5, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
 80a31a6:	6960      	ldr	r0, [r4, #20]
 80a31a8:	2211      	movs	r2, #17
 80a31aa:	2100      	movs	r1, #0
 80a31ac:	308c      	adds	r0, #140	; 0x8c
 80a31ae:	f001 fb61 	bl	80a4874 <memset>
  flush_buffer();
 80a31b2:	4620      	mov	r0, r4
}
 80a31b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  flush_buffer();
 80a31b8:	f7ff bf33 	b.w	80a3022 <_ZN9TCPClient12flush_bufferEv>

080a31bc <_ZN9TCPClient6statusEv>:
{
 80a31bc:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a31be:	6943      	ldr	r3, [r0, #20]
{
 80a31c0:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a31c2:	6818      	ldr	r0, [r3, #0]
 80a31c4:	f7fd ffc0 	bl	80a1148 <socket_handle_valid>
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a31c8:	b908      	cbnz	r0, 80a31ce <_ZN9TCPClient6statusEv+0x12>
 80a31ca:	2000      	movs	r0, #0
}
 80a31cc:	bd10      	pop	{r4, pc}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a31ce:	6920      	ldr	r0, [r4, #16]
 80a31d0:	f7ff fcec 	bl	80a2bac <_ZN5spark12NetworkClass4fromEm>
 80a31d4:	6803      	ldr	r3, [r0, #0]
 80a31d6:	68db      	ldr	r3, [r3, #12]
 80a31d8:	4798      	blx	r3
 80a31da:	2800      	cmp	r0, #0
 80a31dc:	d0f5      	beq.n	80a31ca <_ZN9TCPClient6statusEv+0xe>
 80a31de:	6963      	ldr	r3, [r4, #20]
 80a31e0:	6818      	ldr	r0, [r3, #0]
 80a31e2:	f7fd ffa9 	bl	80a1138 <socket_active_status>
 80a31e6:	fab0 f080 	clz	r0, r0
 80a31ea:	0940      	lsrs	r0, r0, #5
 80a31ec:	e7ee      	b.n	80a31cc <_ZN9TCPClient6statusEv+0x10>

080a31ee <_ZN9TCPClientcvbEv>:
{
 80a31ee:	b508      	push	{r3, lr}
   return (status()!=0);
 80a31f0:	f7ff ffe4 	bl	80a31bc <_ZN9TCPClient6statusEv>
}
 80a31f4:	3800      	subs	r0, #0
 80a31f6:	bf18      	it	ne
 80a31f8:	2001      	movne	r0, #1
 80a31fa:	bd08      	pop	{r3, pc}

080a31fc <_ZN9TCPClient5writeEPKhjm>:
{
 80a31fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
 80a3200:	2700      	movs	r7, #0
 80a3202:	6047      	str	r7, [r0, #4]
 80a3204:	4604      	mov	r4, r0
 80a3206:	460d      	mov	r5, r1
 80a3208:	4616      	mov	r6, r2
 80a320a:	4698      	mov	r8, r3
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a320c:	f7ff ffd6 	bl	80a31bc <_ZN9TCPClient6statusEv>
 80a3210:	b170      	cbz	r0, 80a3230 <_ZN9TCPClient5writeEPKhjm+0x34>
 80a3212:	e9cd 8700 	strd	r8, r7, [sp]
 80a3216:	6960      	ldr	r0, [r4, #20]
 80a3218:	463b      	mov	r3, r7
 80a321a:	4632      	mov	r2, r6
 80a321c:	4629      	mov	r1, r5
 80a321e:	6800      	ldr	r0, [r0, #0]
 80a3220:	f7fd ffc2 	bl	80a11a8 <socket_send_ex>
    if (ret < 0) {
 80a3224:	2800      	cmp	r0, #0
 80a3226:	da00      	bge.n	80a322a <_ZN9TCPClient5writeEPKhjm+0x2e>
 80a3228:	6060      	str	r0, [r4, #4]
}
 80a322a:	b002      	add	sp, #8
 80a322c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a3230:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a3234:	e7f8      	b.n	80a3228 <_ZN9TCPClient5writeEPKhjm+0x2c>

080a3236 <_ZN9TCPClient9connectedEv>:
{
 80a3236:	b570      	push	{r4, r5, r6, lr}
 80a3238:	4605      	mov	r5, r0
  bool rv = (status() || bufferCount());
 80a323a:	f7ff ffbf 	bl	80a31bc <_ZN9TCPClient6statusEv>
 80a323e:	b9e8      	cbnz	r0, 80a327c <_ZN9TCPClient9connectedEv+0x46>
 80a3240:	696b      	ldr	r3, [r5, #20]
 80a3242:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a3246:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a324a:	4291      	cmp	r1, r2
 80a324c:	d116      	bne.n	80a327c <_ZN9TCPClient9connectedEv+0x46>
   return socket_handle_valid(sd);
 80a324e:	6818      	ldr	r0, [r3, #0]
 80a3250:	f7fd ff7a 	bl	80a1148 <socket_handle_valid>
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a3254:	b908      	cbnz	r0, 80a325a <_ZN9TCPClient9connectedEv+0x24>
  bool rv = (status() || bufferCount());
 80a3256:	2000      	movs	r0, #0
}
 80a3258:	bd70      	pop	{r4, r5, r6, pc}
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a325a:	696b      	ldr	r3, [r5, #20]
 80a325c:	6818      	ldr	r0, [r3, #0]
 80a325e:	f7fd ff6b 	bl	80a1138 <socket_active_status>
 80a3262:	2801      	cmp	r0, #1
 80a3264:	4604      	mov	r4, r0
 80a3266:	d1f6      	bne.n	80a3256 <_ZN9TCPClient9connectedEv+0x20>
      rv = available(); // Try CC3000
 80a3268:	682b      	ldr	r3, [r5, #0]
 80a326a:	4628      	mov	r0, r5
 80a326c:	691b      	ldr	r3, [r3, #16]
 80a326e:	4798      	blx	r3
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a3270:	b930      	cbnz	r0, 80a3280 <_ZN9TCPClient9connectedEv+0x4a>
          stop();       // Close our side
 80a3272:	682b      	ldr	r3, [r5, #0]
 80a3274:	4628      	mov	r0, r5
 80a3276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3278:	4798      	blx	r3
 80a327a:	e7ec      	b.n	80a3256 <_ZN9TCPClient9connectedEv+0x20>
  bool rv = (status() || bufferCount());
 80a327c:	2001      	movs	r0, #1
 80a327e:	e7eb      	b.n	80a3258 <_ZN9TCPClient9connectedEv+0x22>
      rv = available(); // Try CC3000
 80a3280:	4620      	mov	r0, r4
 80a3282:	e7e9      	b.n	80a3258 <_ZN9TCPClient9connectedEv+0x22>

080a3284 <_ZN9TCPClient4DataC1Em>:

TCPClient::Data::Data(sock_handle_t sock)
        : sock(sock),
          offset(0),
          total(0) {
 80a3284:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
 80a3286:	b510      	push	{r4, lr}
 80a3288:	4604      	mov	r4, r0
          total(0) {
 80a328a:	6001      	str	r1, [r0, #0]
 80a328c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 80a3290:	3088      	adds	r0, #136	; 0x88
 80a3292:	f7fe f9cd 	bl	80a1630 <_ZN9IPAddressC1Ev>
}
 80a3296:	4620      	mov	r0, r4
 80a3298:	bd10      	pop	{r4, pc}
	...

080a329c <_ZN9TCPClientC1Em>:
TCPClient::TCPClient(sock_handle_t sock) :
 80a329c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a329e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a32a2:	2300      	movs	r3, #0
 80a32a4:	e9c0 3201 	strd	r3, r2, [r0, #4]
        d_(std::make_shared<Data>(sock))
 80a32a8:	4a0d      	ldr	r2, [pc, #52]	; (80a32e0 <_ZN9TCPClientC1Em+0x44>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 80a32aa:	6103      	str	r3, [r0, #16]
 80a32ac:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 80a32ae:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock) :
 80a32b0:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a32b2:	20ac      	movs	r0, #172	; 0xac
 80a32b4:	460e      	mov	r6, r1
 80a32b6:	f7fc fef0 	bl	80a009a <_Znwj>
	  auto __pi = ::new (__mem)
 80a32ba:	1e05      	subs	r5, r0, #0
 80a32bc:	f105 070c 	add.w	r7, r5, #12
 80a32c0:	d008      	beq.n	80a32d4 <_ZN9TCPClientC1Em+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
 80a32c2:	2301      	movs	r3, #1
 80a32c4:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
 80a32c8:	4b06      	ldr	r3, [pc, #24]	; (80a32e4 <_ZN9TCPClientC1Em+0x48>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a32ca:	4631      	mov	r1, r6
 80a32cc:	4638      	mov	r0, r7
 80a32ce:	602b      	str	r3, [r5, #0]
 80a32d0:	f7ff ffd8 	bl	80a3284 <_ZN9TCPClient4DataC1Em>
  flush_buffer();
 80a32d4:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
 80a32d6:	e9c4 7505 	strd	r7, r5, [r4, #20]
 80a32da:	f7ff fea2 	bl	80a3022 <_ZN9TCPClient12flush_bufferEv>
}
 80a32de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a32e0:	080a4e80 	.word	0x080a4e80
 80a32e4:	080a4e5c 	.word	0x080a4e5c

080a32e8 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a32e8:	b510      	push	{r4, lr}
 80a32ea:	4604      	mov	r4, r0
 80a32ec:	f7fd ff54 	bl	80a1198 <socket_handle_invalid>
 80a32f0:	4601      	mov	r1, r0
 80a32f2:	4620      	mov	r0, r4
 80a32f4:	f7ff ffd2 	bl	80a329c <_ZN9TCPClientC1Em>
}
 80a32f8:	4620      	mov	r0, r4
 80a32fa:	bd10      	pop	{r4, pc}

080a32fc <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
 80a32fc:	b510      	push	{r4, lr}
 80a32fe:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a3300:	6800      	ldr	r0, [r0, #0]
 80a3302:	f7fd ff21 	bl	80a1148 <socket_handle_valid>
 80a3306:	b110      	cbz	r0, 80a330e <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a3308:	6820      	ldr	r0, [r4, #0]
 80a330a:	f7fd ff3d 	bl	80a1188 <socket_close>
    }
}
 80a330e:	4620      	mov	r0, r4
 80a3310:	bd10      	pop	{r4, pc}

080a3312 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 80a3312:	300c      	adds	r0, #12
 80a3314:	f7ff bff2 	b.w	80a32fc <_ZN9TCPClient4DataD1Ev>

080a3318 <_ZN9TCPClient7connectEPKctm>:
{
 80a3318:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a331c:	461f      	mov	r7, r3
    stop();
 80a331e:	6803      	ldr	r3, [r0, #0]
{
 80a3320:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a3322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a3324:	4606      	mov	r6, r0
 80a3326:	460d      	mov	r5, r1
 80a3328:	4690      	mov	r8, r2
    stop();
 80a332a:	4798      	blx	r3
    if (Network.ready())
 80a332c:	4813      	ldr	r0, [pc, #76]	; (80a337c <_ZN9TCPClient7connectEPKctm+0x64>)
 80a332e:	f7ff fbe8 	bl	80a2b02 <_ZN5spark12NetworkClass5readyEv>
 80a3332:	b1f0      	cbz	r0, 80a3372 <_ZN9TCPClient7connectEPKctm+0x5a>
        IPAddress ip_addr;
 80a3334:	a802      	add	r0, sp, #8
 80a3336:	f7fe f97b 	bl	80a1630 <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a333a:	4628      	mov	r0, r5
 80a333c:	f001 faef 	bl	80a491e <strlen>
 80a3340:	2400      	movs	r4, #0
 80a3342:	b281      	uxth	r1, r0
 80a3344:	463b      	mov	r3, r7
 80a3346:	4628      	mov	r0, r5
 80a3348:	9400      	str	r4, [sp, #0]
 80a334a:	aa03      	add	r2, sp, #12
 80a334c:	f7fd ffc4 	bl	80a12d8 <inet_gethostbyname>
 80a3350:	b990      	cbnz	r0, 80a3378 <_ZN9TCPClient7connectEPKctm+0x60>
            return connect(ip_addr, port, nif);
 80a3352:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
 80a3354:	ad09      	add	r5, sp, #36	; 0x24
 80a3356:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a335a:	4b09      	ldr	r3, [pc, #36]	; (80a3380 <_ZN9TCPClient7connectEPKctm+0x68>)
 80a335c:	ac03      	add	r4, sp, #12
 80a335e:	9308      	str	r3, [sp, #32]
 80a3360:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a3362:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a3364:	6823      	ldr	r3, [r4, #0]
 80a3366:	4642      	mov	r2, r8
 80a3368:	702b      	strb	r3, [r5, #0]
 80a336a:	4630      	mov	r0, r6
 80a336c:	463b      	mov	r3, r7
 80a336e:	a908      	add	r1, sp, #32
 80a3370:	47c8      	blx	r9
}
 80a3372:	b00f      	add	sp, #60	; 0x3c
 80a3374:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0; // error, could not connect
 80a3378:	4620      	mov	r0, r4
 80a337a:	e7fa      	b.n	80a3372 <_ZN9TCPClient7connectEPKctm+0x5a>
 80a337c:	200001c8 	.word	0x200001c8
 80a3380:	080a4cd8 	.word	0x080a4cd8

080a3384 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a3384:	4b02      	ldr	r3, [pc, #8]	; (80a3390 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a3386:	681a      	ldr	r2, [r3, #0]
 80a3388:	4b02      	ldr	r3, [pc, #8]	; (80a3394 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a338a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a338c:	4770      	bx	lr
 80a338e:	bf00      	nop
 80a3390:	20000008 	.word	0x20000008
 80a3394:	200001f0 	.word	0x200001f0

080a3398 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a3398:	4770      	bx	lr

080a339a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a339a:	7441      	strb	r1, [r0, #17]
}
 80a339c:	4770      	bx	lr

080a339e <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a339e:	4770      	bx	lr

080a33a0 <_ZN11USARTSerial17availableForWriteEv>:
{
 80a33a0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a33a2:	7c00      	ldrb	r0, [r0, #16]
 80a33a4:	f7fd ff40 	bl	80a1228 <hal_usart_available_data_for_write>
}
 80a33a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a33ac:	bd08      	pop	{r3, pc}

080a33ae <_ZN11USARTSerial9availableEv>:
{
 80a33ae:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a33b0:	7c00      	ldrb	r0, [r0, #16]
 80a33b2:	f7fd ff19 	bl	80a11e8 <hal_usart_available>
}
 80a33b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a33ba:	bd08      	pop	{r3, pc}

080a33bc <_ZN11USARTSerial4peekEv>:
{
 80a33bc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a33be:	7c00      	ldrb	r0, [r0, #16]
 80a33c0:	f7fd ff22 	bl	80a1208 <hal_usart_peek>
}
 80a33c4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a33c8:	bd08      	pop	{r3, pc}

080a33ca <_ZN11USARTSerial4readEv>:
{
 80a33ca:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a33cc:	7c00      	ldrb	r0, [r0, #16]
 80a33ce:	f7fd ff13 	bl	80a11f8 <hal_usart_read>
}
 80a33d2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a33d6:	bd08      	pop	{r3, pc}

080a33d8 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
 80a33d8:	7c00      	ldrb	r0, [r0, #16]
 80a33da:	f7fd bf1d 	b.w	80a1218 <hal_usart_flush>

080a33de <_ZN11USARTSerial5writeEh>:
{
 80a33de:	b570      	push	{r4, r5, r6, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a33e0:	7c46      	ldrb	r6, [r0, #17]
{
 80a33e2:	4604      	mov	r4, r0
 80a33e4:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a33e6:	b12e      	cbz	r6, 80a33f4 <_ZN11USARTSerial5writeEh+0x16>
	  return hal_usart_write(_serial, c);
 80a33e8:	4629      	mov	r1, r5
 80a33ea:	7c20      	ldrb	r0, [r4, #16]
}
 80a33ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a33f0:	f7fd bef2 	b.w	80a11d8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a33f4:	7c00      	ldrb	r0, [r0, #16]
 80a33f6:	f7fd ff17 	bl	80a1228 <hal_usart_available_data_for_write>
 80a33fa:	2800      	cmp	r0, #0
 80a33fc:	dcf4      	bgt.n	80a33e8 <_ZN11USARTSerial5writeEh+0xa>
}
 80a33fe:	4630      	mov	r0, r6
 80a3400:	bd70      	pop	{r4, r5, r6, pc}

080a3402 <_ZN11USARTSerialD0Ev>:
 80a3402:	b510      	push	{r4, lr}
 80a3404:	4604      	mov	r4, r0
 80a3406:	2114      	movs	r1, #20
 80a3408:	f000 fa70 	bl	80a38ec <_ZdlPvj>
 80a340c:	4620      	mov	r0, r4
 80a340e:	bd10      	pop	{r4, pc}

080a3410 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a3410:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a3414:	b510      	push	{r4, lr}
 80a3416:	4604      	mov	r4, r0
 80a3418:	4608      	mov	r0, r1
 80a341a:	4611      	mov	r1, r2
 80a341c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a3420:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a3424:	4a04      	ldr	r2, [pc, #16]	; (80a3438 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a3426:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a3428:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a342a:	2201      	movs	r2, #1
 80a342c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a342e:	461a      	mov	r2, r3
 80a3430:	f7fd fec2 	bl	80a11b8 <hal_usart_init>
}
 80a3434:	4620      	mov	r0, r4
 80a3436:	bd10      	pop	{r4, pc}
 80a3438:	080a4ee8 	.word	0x080a4ee8

080a343c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 80a343c:	2300      	movs	r3, #0
 80a343e:	7c00      	ldrb	r0, [r0, #16]
 80a3440:	f7fd befa 	b.w	80a1238 <hal_usart_begin_config>

080a3444 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 80a3444:	2200      	movs	r2, #0
 80a3446:	f7ff bff9 	b.w	80a343c <_ZN11USARTSerial5beginEmm>

080a344a <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 80a344a:	7c00      	ldrb	r0, [r0, #16]
 80a344c:	f7fd bebc 	b.w	80a11c8 <hal_usart_end>

080a3450 <_Z22__fetch_global_Serial1v>:
{
 80a3450:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a3452:	4d0c      	ldr	r5, [pc, #48]	; (80a3484 <_Z22__fetch_global_Serial1v+0x34>)
 80a3454:	7829      	ldrb	r1, [r5, #0]
 80a3456:	f3bf 8f5b 	dmb	ish
 80a345a:	f011 0401 	ands.w	r4, r1, #1
 80a345e:	d10f      	bne.n	80a3480 <_Z22__fetch_global_Serial1v+0x30>
 80a3460:	4628      	mov	r0, r5
 80a3462:	f7fc fe2d 	bl	80a00c0 <__cxa_guard_acquire>
 80a3466:	b158      	cbz	r0, 80a3480 <_Z22__fetch_global_Serial1v+0x30>
 80a3468:	4621      	mov	r1, r4
 80a346a:	4b07      	ldr	r3, [pc, #28]	; (80a3488 <_Z22__fetch_global_Serial1v+0x38>)
 80a346c:	4a07      	ldr	r2, [pc, #28]	; (80a348c <_Z22__fetch_global_Serial1v+0x3c>)
 80a346e:	4808      	ldr	r0, [pc, #32]	; (80a3490 <_Z22__fetch_global_Serial1v+0x40>)
 80a3470:	f7ff ffce 	bl	80a3410 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a3474:	4628      	mov	r0, r5
 80a3476:	f7fc fe28 	bl	80a00ca <__cxa_guard_release>
 80a347a:	4806      	ldr	r0, [pc, #24]	; (80a3494 <_Z22__fetch_global_Serial1v+0x44>)
 80a347c:	f001 f9cc 	bl	80a4818 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a3480:	4803      	ldr	r0, [pc, #12]	; (80a3490 <_Z22__fetch_global_Serial1v+0x40>)
 80a3482:	bd38      	pop	{r3, r4, r5, pc}
 80a3484:	200001f4 	.word	0x200001f4
 80a3488:	2000027c 	.word	0x2000027c
 80a348c:	200001f8 	.word	0x200001f8
 80a3490:	20000300 	.word	0x20000300
 80a3494:	080a339f 	.word	0x080a339f

080a3498 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a3498:	7441      	strb	r1, [r0, #17]
}
 80a349a:	4770      	bx	lr

080a349c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a349c:	4770      	bx	lr

080a349e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a349e:	4770      	bx	lr

080a34a0 <_ZN9USBSerial4readEv>:
{
 80a34a0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a34a2:	2100      	movs	r1, #0
 80a34a4:	7c00      	ldrb	r0, [r0, #16]
 80a34a6:	f7fd fef7 	bl	80a1298 <HAL_USB_USART_Receive_Data>
}
 80a34aa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a34ae:	bd08      	pop	{r3, pc}

080a34b0 <_ZN9USBSerial4peekEv>:
{
 80a34b0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a34b2:	2101      	movs	r1, #1
 80a34b4:	7c00      	ldrb	r0, [r0, #16]
 80a34b6:	f7fd feef 	bl	80a1298 <HAL_USB_USART_Receive_Data>
}
 80a34ba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a34be:	bd08      	pop	{r3, pc}

080a34c0 <_ZN9USBSerial17availableForWriteEv>:
{
 80a34c0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a34c2:	7c00      	ldrb	r0, [r0, #16]
 80a34c4:	f7fd fee0 	bl	80a1288 <HAL_USB_USART_Available_Data_For_Write>
}
 80a34c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a34cc:	bd08      	pop	{r3, pc}

080a34ce <_ZN9USBSerial9availableEv>:
{
 80a34ce:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a34d0:	7c00      	ldrb	r0, [r0, #16]
 80a34d2:	f7fd fed1 	bl	80a1278 <HAL_USB_USART_Available_Data>
}
 80a34d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a34da:	bd08      	pop	{r3, pc}

080a34dc <_ZN9USBSerial5writeEh>:
{
 80a34dc:	b538      	push	{r3, r4, r5, lr}
 80a34de:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a34e0:	7c00      	ldrb	r0, [r0, #16]
{
 80a34e2:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a34e4:	f7fd fed0 	bl	80a1288 <HAL_USB_USART_Available_Data_For_Write>
 80a34e8:	2800      	cmp	r0, #0
 80a34ea:	dc01      	bgt.n	80a34f0 <_ZN9USBSerial5writeEh+0x14>
 80a34ec:	7c60      	ldrb	r0, [r4, #17]
 80a34ee:	b128      	cbz	r0, 80a34fc <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a34f0:	4629      	mov	r1, r5
 80a34f2:	7c20      	ldrb	r0, [r4, #16]
 80a34f4:	f7fd fed8 	bl	80a12a8 <HAL_USB_USART_Send_Data>
 80a34f8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a34fc:	bd38      	pop	{r3, r4, r5, pc}

080a34fe <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a34fe:	7c00      	ldrb	r0, [r0, #16]
 80a3500:	f7fd beda 	b.w	80a12b8 <HAL_USB_USART_Flush_Data>

080a3504 <_ZN9USBSerialD0Ev>:
 80a3504:	b510      	push	{r4, lr}
 80a3506:	4604      	mov	r4, r0
 80a3508:	2114      	movs	r1, #20
 80a350a:	f000 f9ef 	bl	80a38ec <_ZdlPvj>
 80a350e:	4620      	mov	r0, r4
 80a3510:	bd10      	pop	{r4, pc}

080a3512 <__tcf_1>:
 80a3512:	4770      	bx	lr

080a3514 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a3514:	b510      	push	{r4, lr}
 80a3516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a351a:	4604      	mov	r4, r0
 80a351c:	4608      	mov	r0, r1
 80a351e:	2100      	movs	r1, #0
 80a3520:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a3524:	4b04      	ldr	r3, [pc, #16]	; (80a3538 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a3526:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a3528:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a352a:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a352c:	4611      	mov	r1, r2
  _blocking = true;
 80a352e:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a3530:	f7fd fe8a 	bl	80a1248 <HAL_USB_USART_Init>
}
 80a3534:	4620      	mov	r0, r4
 80a3536:	bd10      	pop	{r4, pc}
 80a3538:	080a4f18 	.word	0x080a4f18

080a353c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a353c:	2200      	movs	r2, #0
 80a353e:	7c00      	ldrb	r0, [r0, #16]
 80a3540:	f7fd be8a 	b.w	80a1258 <HAL_USB_USART_Begin>

080a3544 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 80a3544:	7c00      	ldrb	r0, [r0, #16]
 80a3546:	f7fd be8f 	b.w	80a1268 <HAL_USB_USART_End>
	...

080a354c <_Z19acquireSerialBufferv>:
{
 80a354c:	b510      	push	{r4, lr}
 80a354e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a3550:	2214      	movs	r2, #20
 80a3552:	2100      	movs	r1, #0
 80a3554:	f001 f98e 	bl	80a4874 <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a3558:	4b05      	ldr	r3, [pc, #20]	; (80a3570 <_Z19acquireSerialBufferv+0x24>)
}
 80a355a:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a355c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a355e:	4b05      	ldr	r3, [pc, #20]	; (80a3574 <_Z19acquireSerialBufferv+0x28>)
 80a3560:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a3562:	f240 1301 	movw	r3, #257	; 0x101
 80a3566:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a3568:	2381      	movs	r3, #129	; 0x81
 80a356a:	8223      	strh	r3, [r4, #16]
}
 80a356c:	bd10      	pop	{r4, pc}
 80a356e:	bf00      	nop
 80a3570:	20000344 	.word	0x20000344
 80a3574:	20000445 	.word	0x20000445

080a3578 <_Z16_fetch_usbserialv>:
{
 80a3578:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a357a:	4d0e      	ldr	r5, [pc, #56]	; (80a35b4 <_Z16_fetch_usbserialv+0x3c>)
{
 80a357c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a357e:	a801      	add	r0, sp, #4
 80a3580:	f7ff ffe4 	bl	80a354c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3584:	7829      	ldrb	r1, [r5, #0]
 80a3586:	f3bf 8f5b 	dmb	ish
 80a358a:	f011 0401 	ands.w	r4, r1, #1
 80a358e:	d10e      	bne.n	80a35ae <_Z16_fetch_usbserialv+0x36>
 80a3590:	4628      	mov	r0, r5
 80a3592:	f7fc fd95 	bl	80a00c0 <__cxa_guard_acquire>
 80a3596:	b150      	cbz	r0, 80a35ae <_Z16_fetch_usbserialv+0x36>
 80a3598:	4621      	mov	r1, r4
 80a359a:	aa01      	add	r2, sp, #4
 80a359c:	4806      	ldr	r0, [pc, #24]	; (80a35b8 <_Z16_fetch_usbserialv+0x40>)
 80a359e:	f7ff ffb9 	bl	80a3514 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a35a2:	4628      	mov	r0, r5
 80a35a4:	f7fc fd91 	bl	80a00ca <__cxa_guard_release>
 80a35a8:	4804      	ldr	r0, [pc, #16]	; (80a35bc <_Z16_fetch_usbserialv+0x44>)
 80a35aa:	f001 f935 	bl	80a4818 <atexit>
	return _usbserial;
}
 80a35ae:	4802      	ldr	r0, [pc, #8]	; (80a35b8 <_Z16_fetch_usbserialv+0x40>)
 80a35b0:	b007      	add	sp, #28
 80a35b2:	bd30      	pop	{r4, r5, pc}
 80a35b4:	20000314 	.word	0x20000314
 80a35b8:	2000031c 	.word	0x2000031c
 80a35bc:	080a349d 	.word	0x080a349d

080a35c0 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a35c0:	b510      	push	{r4, lr}
 80a35c2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a35c4:	2214      	movs	r2, #20
 80a35c6:	2100      	movs	r1, #0
 80a35c8:	f001 f954 	bl	80a4874 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a35cc:	4b05      	ldr	r3, [pc, #20]	; (80a35e4 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a35ce:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a35d0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a35d2:	4b05      	ldr	r3, [pc, #20]	; (80a35e8 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a35d4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a35d6:	f240 1301 	movw	r3, #257	; 0x101
 80a35da:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a35dc:	2381      	movs	r3, #129	; 0x81
 80a35de:	8223      	strh	r3, [r4, #16]
}
 80a35e0:	bd10      	pop	{r4, pc}
 80a35e2:	bf00      	nop
 80a35e4:	200004c6 	.word	0x200004c6
 80a35e8:	200005c7 	.word	0x200005c7

080a35ec <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a35ec:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a35ee:	4c0e      	ldr	r4, [pc, #56]	; (80a3628 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a35f0:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a35f2:	a801      	add	r0, sp, #4
 80a35f4:	f7ff ffe4 	bl	80a35c0 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a35f8:	7823      	ldrb	r3, [r4, #0]
 80a35fa:	f3bf 8f5b 	dmb	ish
 80a35fe:	07db      	lsls	r3, r3, #31
 80a3600:	d40e      	bmi.n	80a3620 <_Z17_fetch_usbserial1v+0x34>
 80a3602:	4620      	mov	r0, r4
 80a3604:	f7fc fd5c 	bl	80a00c0 <__cxa_guard_acquire>
 80a3608:	b150      	cbz	r0, 80a3620 <_Z17_fetch_usbserial1v+0x34>
 80a360a:	2101      	movs	r1, #1
 80a360c:	aa01      	add	r2, sp, #4
 80a360e:	4807      	ldr	r0, [pc, #28]	; (80a362c <_Z17_fetch_usbserial1v+0x40>)
 80a3610:	f7ff ff80 	bl	80a3514 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3614:	4620      	mov	r0, r4
 80a3616:	f7fc fd58 	bl	80a00ca <__cxa_guard_release>
 80a361a:	4805      	ldr	r0, [pc, #20]	; (80a3630 <_Z17_fetch_usbserial1v+0x44>)
 80a361c:	f001 f8fc 	bl	80a4818 <atexit>
  return _usbserial1;
}
 80a3620:	4802      	ldr	r0, [pc, #8]	; (80a362c <_Z17_fetch_usbserial1v+0x40>)
 80a3622:	b006      	add	sp, #24
 80a3624:	bd10      	pop	{r4, pc}
 80a3626:	bf00      	nop
 80a3628:	20000318 	.word	0x20000318
 80a362c:	20000330 	.word	0x20000330
 80a3630:	080a3513 	.word	0x080a3513

080a3634 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a3634:	2200      	movs	r2, #0
 80a3636:	6840      	ldr	r0, [r0, #4]
 80a3638:	4611      	mov	r1, r2
 80a363a:	f7fd bec9 	b.w	80a13d0 <network_ready>

080a363e <_ZN5spark9WiFiClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80a363e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3640:	4615      	mov	r5, r2
 80a3642:	b089      	sub	sp, #36	; 0x24
        HAL_IPAddress ip = {};
 80a3644:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a3646:	460e      	mov	r6, r1
 80a3648:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a364a:	2100      	movs	r1, #0
 80a364c:	a803      	add	r0, sp, #12
 80a364e:	f001 f911 	bl	80a4874 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a3652:	4628      	mov	r0, r5
 80a3654:	f001 f963 	bl	80a491e <strlen>
 80a3658:	2700      	movs	r7, #0
 80a365a:	b281      	uxth	r1, r0
 80a365c:	6873      	ldr	r3, [r6, #4]
 80a365e:	4628      	mov	r0, r5
 80a3660:	9700      	str	r7, [sp, #0]
 80a3662:	aa03      	add	r2, sp, #12
 80a3664:	f7fd fe38 	bl	80a12d8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a3668:	b130      	cbz	r0, 80a3678 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a366a:	4639      	mov	r1, r7
 80a366c:	4620      	mov	r0, r4
 80a366e:	f7fd ffff 	bl	80a1670 <_ZN9IPAddressC1Em>
    }
 80a3672:	4620      	mov	r0, r4
 80a3674:	b009      	add	sp, #36	; 0x24
 80a3676:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a3678:	4620      	mov	r0, r4
 80a367a:	a903      	add	r1, sp, #12
 80a367c:	f7fd ffe6 	bl	80a164c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a3680:	e7f7      	b.n	80a3672 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a3682 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a3682:	2200      	movs	r2, #0
 80a3684:	6840      	ldr	r0, [r0, #4]
 80a3686:	4611      	mov	r1, r2
 80a3688:	f7fd bec2 	b.w	80a1410 <network_listening>

080a368c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a368c:	2200      	movs	r2, #0
 80a368e:	6840      	ldr	r0, [r0, #4]
 80a3690:	4611      	mov	r1, r2
 80a3692:	f7fd becd 	b.w	80a1430 <network_get_listen_timeout>

080a3696 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a3696:	2200      	movs	r2, #0
 80a3698:	6840      	ldr	r0, [r0, #4]
 80a369a:	f7fd bec1 	b.w	80a1420 <network_set_listen_timeout>

080a369e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a369e:	2200      	movs	r2, #0
 80a36a0:	6840      	ldr	r0, [r0, #4]
 80a36a2:	f081 0101 	eor.w	r1, r1, #1
 80a36a6:	f7fd beab 	b.w	80a1400 <network_listen>

080a36aa <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a36aa:	2300      	movs	r3, #0
 80a36ac:	6840      	ldr	r0, [r0, #4]
 80a36ae:	461a      	mov	r2, r3
 80a36b0:	4619      	mov	r1, r3
 80a36b2:	f7fd be9d 	b.w	80a13f0 <network_off>

080a36b6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a36b6:	2300      	movs	r3, #0
 80a36b8:	6840      	ldr	r0, [r0, #4]
 80a36ba:	461a      	mov	r2, r3
 80a36bc:	4619      	mov	r1, r3
 80a36be:	f7fd be8f 	b.w	80a13e0 <network_on>

080a36c2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a36c2:	2200      	movs	r2, #0
 80a36c4:	6840      	ldr	r0, [r0, #4]
 80a36c6:	4611      	mov	r1, r2
 80a36c8:	f7fd be72 	b.w	80a13b0 <network_connecting>

080a36cc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a36cc:	2200      	movs	r2, #0
 80a36ce:	2102      	movs	r1, #2
 80a36d0:	6840      	ldr	r0, [r0, #4]
 80a36d2:	f7fd be75 	b.w	80a13c0 <network_disconnect>

080a36d6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a36d6:	2300      	movs	r3, #0
 80a36d8:	6840      	ldr	r0, [r0, #4]
 80a36da:	461a      	mov	r2, r3
 80a36dc:	f7fd be60 	b.w	80a13a0 <network_connect>

080a36e0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a36e0:	2204      	movs	r2, #4
 80a36e2:	4b02      	ldr	r3, [pc, #8]	; (80a36ec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a36e4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a36e6:	4a02      	ldr	r2, [pc, #8]	; (80a36f0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a36e8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a36ea:	4770      	bx	lr
 80a36ec:	20000648 	.word	0x20000648
 80a36f0:	080a4f48 	.word	0x080a4f48

080a36f4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a36f4:	4b01      	ldr	r3, [pc, #4]	; (80a36fc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a36f6:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a36f8:	4770      	bx	lr
 80a36fa:	bf00      	nop
 80a36fc:	2000000c 	.word	0x2000000c

080a3700 <serialEventRun>:
{
 80a3700:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a3702:	4b13      	ldr	r3, [pc, #76]	; (80a3750 <serialEventRun+0x50>)
 80a3704:	b143      	cbz	r3, 80a3718 <serialEventRun+0x18>
 80a3706:	f7ff ff37 	bl	80a3578 <_Z16_fetch_usbserialv>
 80a370a:	6803      	ldr	r3, [r0, #0]
 80a370c:	691b      	ldr	r3, [r3, #16]
 80a370e:	4798      	blx	r3
 80a3710:	2800      	cmp	r0, #0
 80a3712:	dd01      	ble.n	80a3718 <serialEventRun+0x18>
        serialEvent();
 80a3714:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a3718:	4b0e      	ldr	r3, [pc, #56]	; (80a3754 <serialEventRun+0x54>)
 80a371a:	b143      	cbz	r3, 80a372e <serialEventRun+0x2e>
 80a371c:	f7ff fe98 	bl	80a3450 <_Z22__fetch_global_Serial1v>
 80a3720:	6803      	ldr	r3, [r0, #0]
 80a3722:	691b      	ldr	r3, [r3, #16]
 80a3724:	4798      	blx	r3
 80a3726:	2800      	cmp	r0, #0
 80a3728:	dd01      	ble.n	80a372e <serialEventRun+0x2e>
        serialEvent1();
 80a372a:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a372e:	4b0a      	ldr	r3, [pc, #40]	; (80a3758 <serialEventRun+0x58>)
 80a3730:	b10b      	cbz	r3, 80a3736 <serialEventRun+0x36>
 80a3732:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a3736:	4b09      	ldr	r3, [pc, #36]	; (80a375c <serialEventRun+0x5c>)
 80a3738:	b143      	cbz	r3, 80a374c <serialEventRun+0x4c>
 80a373a:	f7ff ff57 	bl	80a35ec <_Z17_fetch_usbserial1v>
 80a373e:	6803      	ldr	r3, [r0, #0]
 80a3740:	691b      	ldr	r3, [r3, #16]
 80a3742:	4798      	blx	r3
 80a3744:	2800      	cmp	r0, #0
 80a3746:	dd01      	ble.n	80a374c <serialEventRun+0x4c>
        usbSerialEvent1();
 80a3748:	f3af 8000 	nop.w
}
 80a374c:	bd08      	pop	{r3, pc}
 80a374e:	bf00      	nop
	...

080a3760 <_post_loop>:
{
 80a3760:	b508      	push	{r3, lr}
	serialEventRun();
 80a3762:	f7ff ffcd 	bl	80a3700 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a3766:	f7fd fc8b 	bl	80a1080 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a376a:	4b01      	ldr	r3, [pc, #4]	; (80a3770 <_post_loop+0x10>)
 80a376c:	6018      	str	r0, [r3, #0]
}
 80a376e:	bd08      	pop	{r3, pc}
 80a3770:	20000658 	.word	0x20000658

080a3774 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a3774:	4805      	ldr	r0, [pc, #20]	; (80a378c <_Z33system_initialize_user_backup_ramv+0x18>)
 80a3776:	4a06      	ldr	r2, [pc, #24]	; (80a3790 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a3778:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a377a:	1a12      	subs	r2, r2, r0
 80a377c:	4905      	ldr	r1, [pc, #20]	; (80a3794 <_Z33system_initialize_user_backup_ramv+0x20>)
 80a377e:	f001 f851 	bl	80a4824 <memcpy>
    __backup_sram_signature = signature;
 80a3782:	4b05      	ldr	r3, [pc, #20]	; (80a3798 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a3784:	4a05      	ldr	r2, [pc, #20]	; (80a379c <_Z33system_initialize_user_backup_ramv+0x28>)
 80a3786:	601a      	str	r2, [r3, #0]
}
 80a3788:	bd08      	pop	{r3, pc}
 80a378a:	bf00      	nop
 80a378c:	40024000 	.word	0x40024000
 80a3790:	40024004 	.word	0x40024004
 80a3794:	080a51a0 	.word	0x080a51a0
 80a3798:	40024000 	.word	0x40024000
 80a379c:	9a271c1e 	.word	0x9a271c1e

080a37a0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a37a0:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a37a2:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a37a4:	461a      	mov	r2, r3
 80a37a6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a37aa:	9300      	str	r3, [sp, #0]
 80a37ac:	f7fd fde6 	bl	80a137c <system_ctrl_set_result>
}
 80a37b0:	b003      	add	sp, #12
 80a37b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a37b8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a37b8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a37ba:	8843      	ldrh	r3, [r0, #2]
 80a37bc:	2b0a      	cmp	r3, #10
 80a37be:	d008      	beq.n	80a37d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a37c0:	2b50      	cmp	r3, #80	; 0x50
 80a37c2:	d10b      	bne.n	80a37dc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a37c4:	4b09      	ldr	r3, [pc, #36]	; (80a37ec <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a37c6:	681b      	ldr	r3, [r3, #0]
 80a37c8:	b14b      	cbz	r3, 80a37de <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a37ca:	b003      	add	sp, #12
 80a37cc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a37d0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a37d2:	f7ff ffe5 	bl	80a37a0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a37d6:	b003      	add	sp, #12
 80a37d8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a37dc:	2300      	movs	r3, #0
 80a37de:	461a      	mov	r2, r3
 80a37e0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a37e4:	9300      	str	r3, [sp, #0]
 80a37e6:	f7fd fdc9 	bl	80a137c <system_ctrl_set_result>
}
 80a37ea:	e7f4      	b.n	80a37d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a37ec:	20000654 	.word	0x20000654

080a37f0 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a37f0:	2100      	movs	r1, #0
{
 80a37f2:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a37f4:	4811      	ldr	r0, [pc, #68]	; (80a383c <module_user_init_hook+0x4c>)
 80a37f6:	f7fd fe53 	bl	80a14a0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a37fa:	4b11      	ldr	r3, [pc, #68]	; (80a3840 <module_user_init_hook+0x50>)
 80a37fc:	681a      	ldr	r2, [r3, #0]
 80a37fe:	4b11      	ldr	r3, [pc, #68]	; (80a3844 <module_user_init_hook+0x54>)
 80a3800:	429a      	cmp	r2, r3
 80a3802:	bf0c      	ite	eq
 80a3804:	2201      	moveq	r2, #1
 80a3806:	2200      	movne	r2, #0
 80a3808:	4b0f      	ldr	r3, [pc, #60]	; (80a3848 <module_user_init_hook+0x58>)
 80a380a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a380c:	d001      	beq.n	80a3812 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a380e:	f7ff ffb1 	bl	80a3774 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a3812:	f7fd fc25 	bl	80a1060 <HAL_RNG_GetRandomNumber>
 80a3816:	4604      	mov	r4, r0
    srand(seed);
 80a3818:	f001 f834 	bl	80a4884 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a381c:	4b0b      	ldr	r3, [pc, #44]	; (80a384c <module_user_init_hook+0x5c>)
 80a381e:	b113      	cbz	r3, 80a3826 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a3820:	4620      	mov	r0, r4
 80a3822:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a3826:	2100      	movs	r1, #0
 80a3828:	4808      	ldr	r0, [pc, #32]	; (80a384c <module_user_init_hook+0x5c>)
 80a382a:	f7fd fdb1 	bl	80a1390 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a382e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a3832:	2100      	movs	r1, #0
 80a3834:	4806      	ldr	r0, [pc, #24]	; (80a3850 <module_user_init_hook+0x60>)
 80a3836:	f7fd bd97 	b.w	80a1368 <system_ctrl_set_app_request_handler>
 80a383a:	bf00      	nop
 80a383c:	080a36f5 	.word	0x080a36f5
 80a3840:	40024000 	.word	0x40024000
 80a3844:	9a271c1e 	.word	0x9a271c1e
 80a3848:	20000650 	.word	0x20000650
 80a384c:	00000000 	.word	0x00000000
 80a3850:	080a37b9 	.word	0x080a37b9

080a3854 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a3854:	4770      	bx	lr
	...

080a3858 <_Z17acquireWireBufferv>:
	hal_i2c_config_t config = {
 80a3858:	2300      	movs	r3, #0
{
 80a385a:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a385c:	2520      	movs	r5, #32
 80a385e:	8043      	strh	r3, [r0, #2]
 80a3860:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3862:	4e08      	ldr	r6, [pc, #32]	; (80a3884 <_Z17acquireWireBufferv+0x2c>)
{
 80a3864:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a3866:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3868:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a386a:	6085      	str	r5, [r0, #8]
 80a386c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a386e:	4628      	mov	r0, r5
 80a3870:	f000 f840 	bl	80a38f4 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3874:	4631      	mov	r1, r6
	};
 80a3876:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3878:	4628      	mov	r0, r5
 80a387a:	f000 f83b 	bl	80a38f4 <_ZnajRKSt9nothrow_t>
	};
 80a387e:	60e0      	str	r0, [r4, #12]
}
 80a3880:	4620      	mov	r0, r4
 80a3882:	bd70      	pop	{r4, r5, r6, pc}
 80a3884:	080a4f7c 	.word	0x080a4f7c

080a3888 <_Z19__fetch_global_Wirev>:
{
 80a3888:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a388a:	4d0e      	ldr	r5, [pc, #56]	; (80a38c4 <_Z19__fetch_global_Wirev+0x3c>)
{
 80a388c:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a388e:	7829      	ldrb	r1, [r5, #0]
 80a3890:	f3bf 8f5b 	dmb	ish
 80a3894:	f011 0401 	ands.w	r4, r1, #1
 80a3898:	d111      	bne.n	80a38be <_Z19__fetch_global_Wirev+0x36>
 80a389a:	4628      	mov	r0, r5
 80a389c:	f7fc fc10 	bl	80a00c0 <__cxa_guard_acquire>
 80a38a0:	b168      	cbz	r0, 80a38be <_Z19__fetch_global_Wirev+0x36>
 80a38a2:	a801      	add	r0, sp, #4
 80a38a4:	f7ff ffd8 	bl	80a3858 <_Z17acquireWireBufferv>
 80a38a8:	4621      	mov	r1, r4
 80a38aa:	aa01      	add	r2, sp, #4
 80a38ac:	4806      	ldr	r0, [pc, #24]	; (80a38c8 <_Z19__fetch_global_Wirev+0x40>)
 80a38ae:	f7fd fe4b 	bl	80a1548 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a38b2:	4628      	mov	r0, r5
 80a38b4:	f7fc fc09 	bl	80a00ca <__cxa_guard_release>
 80a38b8:	4804      	ldr	r0, [pc, #16]	; (80a38cc <_Z19__fetch_global_Wirev+0x44>)
 80a38ba:	f000 ffad 	bl	80a4818 <atexit>
	return wire;
}
 80a38be:	4802      	ldr	r0, [pc, #8]	; (80a38c8 <_Z19__fetch_global_Wirev+0x40>)
 80a38c0:	b007      	add	sp, #28
 80a38c2:	bd30      	pop	{r4, r5, pc}
 80a38c4:	2000065c 	.word	0x2000065c
 80a38c8:	20000660 	.word	0x20000660
 80a38cc:	080a3855 	.word	0x080a3855

080a38d0 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a38d0:	2300      	movs	r3, #0
 80a38d2:	b507      	push	{r0, r1, r2, lr}
 80a38d4:	461a      	mov	r2, r3
 80a38d6:	4619      	mov	r1, r3
 80a38d8:	9300      	str	r3, [sp, #0]
 80a38da:	4803      	ldr	r0, [pc, #12]	; (80a38e8 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a38dc:	f7fd fede 	bl	80a169c <_ZN9IPAddressC1Ehhhh>
 80a38e0:	b003      	add	sp, #12
 80a38e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80a38e6:	bf00      	nop
 80a38e8:	20000674 	.word	0x20000674

080a38ec <_ZdlPvj>:
 80a38ec:	f7fc bbd9 	b.w	80a00a2 <_ZdlPv>

080a38f0 <_ZnwjRKSt9nothrow_t>:
 80a38f0:	f7fc bbd3 	b.w	80a009a <_Znwj>

080a38f4 <_ZnajRKSt9nothrow_t>:
 80a38f4:	f7fc bbd3 	b.w	80a009e <_Znaj>

080a38f8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 80a38f8:	4901      	ldr	r1, [pc, #4]	; (80a3900 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 80a38fa:	f000 b8fb 	b.w	80a3af4 <_ZNKSt9type_infoeqERKS_>
 80a38fe:	bf00      	nop
 80a3900:	080a4f98 	.word	0x080a4f98

080a3904 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80a3904:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a3906:	2400      	movs	r4, #0
 80a3908:	2310      	movs	r3, #16
 80a390a:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80a390e:	6803      	ldr	r3, [r0, #0]
 80a3910:	4615      	mov	r5, r2
 80a3912:	699e      	ldr	r6, [r3, #24]
 80a3914:	6812      	ldr	r2, [r2, #0]
 80a3916:	466b      	mov	r3, sp
 80a3918:	9400      	str	r4, [sp, #0]
 80a391a:	f88d 4004 	strb.w	r4, [sp, #4]
 80a391e:	47b0      	blx	r6
 80a3920:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a3924:	f003 0306 	and.w	r3, r3, #6
 80a3928:	2b06      	cmp	r3, #6
 80a392a:	bf09      	itett	eq
 80a392c:	2001      	moveq	r0, #1
 80a392e:	4620      	movne	r0, r4
 80a3930:	9b00      	ldreq	r3, [sp, #0]
 80a3932:	602b      	streq	r3, [r5, #0]
 80a3934:	b004      	add	sp, #16
 80a3936:	bd70      	pop	{r4, r5, r6, pc}

080a3938 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80a3938:	9800      	ldr	r0, [sp, #0]
 80a393a:	4290      	cmp	r0, r2
 80a393c:	bf14      	ite	ne
 80a393e:	2001      	movne	r0, #1
 80a3940:	2006      	moveq	r0, #6
 80a3942:	4770      	bx	lr

080a3944 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80a3944:	b510      	push	{r4, lr}
 80a3946:	4604      	mov	r4, r0
 80a3948:	4b02      	ldr	r3, [pc, #8]	; (80a3954 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80a394a:	6003      	str	r3, [r0, #0]
 80a394c:	f000 f8cf 	bl	80a3aee <_ZNSt9type_infoD1Ev>
 80a3950:	4620      	mov	r0, r4
 80a3952:	bd10      	pop	{r4, pc}
 80a3954:	080a4fd8 	.word	0x080a4fd8

080a3958 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80a3958:	b510      	push	{r4, lr}
 80a395a:	4604      	mov	r4, r0
 80a395c:	f7ff fff2 	bl	80a3944 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a3960:	4620      	mov	r0, r4
 80a3962:	2108      	movs	r1, #8
 80a3964:	f7ff ffc2 	bl	80a38ec <_ZdlPvj>
 80a3968:	4620      	mov	r0, r4
 80a396a:	bd10      	pop	{r4, pc}

080a396c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80a396c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3970:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a3974:	461f      	mov	r7, r3
 80a3976:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80a397a:	4598      	cmp	r8, r3
 80a397c:	4606      	mov	r6, r0
 80a397e:	4615      	mov	r5, r2
 80a3980:	d107      	bne.n	80a3992 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a3982:	9907      	ldr	r1, [sp, #28]
 80a3984:	f000 f8b6 	bl	80a3af4 <_ZNKSt9type_infoeqERKS_>
 80a3988:	b118      	cbz	r0, 80a3992 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a398a:	7165      	strb	r5, [r4, #5]
 80a398c:	2000      	movs	r0, #0
 80a398e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a3992:	4639      	mov	r1, r7
 80a3994:	4630      	mov	r0, r6
 80a3996:	f000 f8ad 	bl	80a3af4 <_ZNKSt9type_infoeqERKS_>
 80a399a:	2800      	cmp	r0, #0
 80a399c:	d0f6      	beq.n	80a398c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 80a399e:	2301      	movs	r3, #1
 80a39a0:	f8c4 8000 	str.w	r8, [r4]
 80a39a4:	7125      	strb	r5, [r4, #4]
 80a39a6:	71a3      	strb	r3, [r4, #6]
 80a39a8:	e7f0      	b.n	80a398c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

080a39aa <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80a39aa:	b538      	push	{r3, r4, r5, lr}
 80a39ac:	4615      	mov	r5, r2
 80a39ae:	461c      	mov	r4, r3
 80a39b0:	f000 f8a0 	bl	80a3af4 <_ZNKSt9type_infoeqERKS_>
 80a39b4:	b120      	cbz	r0, 80a39c0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80a39b6:	2308      	movs	r3, #8
 80a39b8:	60e3      	str	r3, [r4, #12]
 80a39ba:	2306      	movs	r3, #6
 80a39bc:	6025      	str	r5, [r4, #0]
 80a39be:	7123      	strb	r3, [r4, #4]
 80a39c0:	bd38      	pop	{r3, r4, r5, pc}

080a39c2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80a39c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a39c6:	4605      	mov	r5, r0
 80a39c8:	460c      	mov	r4, r1
 80a39ca:	4616      	mov	r6, r2
 80a39cc:	461f      	mov	r7, r3
 80a39ce:	f000 f891 	bl	80a3af4 <_ZNKSt9type_infoeqERKS_>
 80a39d2:	b948      	cbnz	r0, 80a39e8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a39d4:	2f03      	cmp	r7, #3
 80a39d6:	d807      	bhi.n	80a39e8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a39d8:	6823      	ldr	r3, [r4, #0]
 80a39da:	4632      	mov	r2, r6
 80a39dc:	4629      	mov	r1, r5
 80a39de:	4620      	mov	r0, r4
 80a39e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a39e4:	695b      	ldr	r3, [r3, #20]
 80a39e6:	4718      	bx	r3
 80a39e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a39ec <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80a39ec:	b510      	push	{r4, lr}
 80a39ee:	4604      	mov	r4, r0
 80a39f0:	4b02      	ldr	r3, [pc, #8]	; (80a39fc <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 80a39f2:	6003      	str	r3, [r0, #0]
 80a39f4:	f7ff ffa6 	bl	80a3944 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a39f8:	4620      	mov	r0, r4
 80a39fa:	bd10      	pop	{r4, pc}
 80a39fc:	080a5038 	.word	0x080a5038

080a3a00 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80a3a00:	b510      	push	{r4, lr}
 80a3a02:	4604      	mov	r4, r0
 80a3a04:	f7ff fff2 	bl	80a39ec <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80a3a08:	4620      	mov	r0, r4
 80a3a0a:	210c      	movs	r1, #12
 80a3a0c:	f7ff ff6e 	bl	80a38ec <_ZdlPvj>
 80a3a10:	4620      	mov	r0, r4
 80a3a12:	bd10      	pop	{r4, pc}

080a3a14 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80a3a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3a18:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a3a1c:	4606      	mov	r6, r0
 80a3a1e:	4590      	cmp	r8, r2
 80a3a20:	460f      	mov	r7, r1
 80a3a22:	4615      	mov	r5, r2
 80a3a24:	461c      	mov	r4, r3
 80a3a26:	d00b      	beq.n	80a3a40 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 80a3a28:	68b0      	ldr	r0, [r6, #8]
 80a3a2a:	462a      	mov	r2, r5
 80a3a2c:	6803      	ldr	r3, [r0, #0]
 80a3a2e:	f8cd 8018 	str.w	r8, [sp, #24]
 80a3a32:	6a1e      	ldr	r6, [r3, #32]
 80a3a34:	4639      	mov	r1, r7
 80a3a36:	4623      	mov	r3, r4
 80a3a38:	46b4      	mov	ip, r6
 80a3a3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a3a3e:	4760      	bx	ip
 80a3a40:	4619      	mov	r1, r3
 80a3a42:	f000 f857 	bl	80a3af4 <_ZNKSt9type_infoeqERKS_>
 80a3a46:	2800      	cmp	r0, #0
 80a3a48:	d0ee      	beq.n	80a3a28 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 80a3a4a:	2006      	movs	r0, #6
 80a3a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a3a50 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80a3a50:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3a54:	460d      	mov	r5, r1
 80a3a56:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 80a3a5a:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 80a3a5e:	4619      	mov	r1, r3
 80a3a60:	4681      	mov	r9, r0
 80a3a62:	4617      	mov	r7, r2
 80a3a64:	4698      	mov	r8, r3
 80a3a66:	f000 f845 	bl	80a3af4 <_ZNKSt9type_infoeqERKS_>
 80a3a6a:	b190      	cbz	r0, 80a3a92 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 80a3a6c:	2d00      	cmp	r5, #0
 80a3a6e:	6034      	str	r4, [r6, #0]
 80a3a70:	7137      	strb	r7, [r6, #4]
 80a3a72:	db09      	blt.n	80a3a88 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 80a3a74:	442c      	add	r4, r5
 80a3a76:	45a2      	cmp	sl, r4
 80a3a78:	bf0c      	ite	eq
 80a3a7a:	2406      	moveq	r4, #6
 80a3a7c:	2401      	movne	r4, #1
 80a3a7e:	71b4      	strb	r4, [r6, #6]
 80a3a80:	2000      	movs	r0, #0
 80a3a82:	b001      	add	sp, #4
 80a3a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3a88:	3502      	adds	r5, #2
 80a3a8a:	d1f9      	bne.n	80a3a80 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a3a8c:	2301      	movs	r3, #1
 80a3a8e:	71b3      	strb	r3, [r6, #6]
 80a3a90:	e7f6      	b.n	80a3a80 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a3a92:	4554      	cmp	r4, sl
 80a3a94:	d106      	bne.n	80a3aa4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a3a96:	4659      	mov	r1, fp
 80a3a98:	4648      	mov	r0, r9
 80a3a9a:	f000 f82b 	bl	80a3af4 <_ZNKSt9type_infoeqERKS_>
 80a3a9e:	b108      	cbz	r0, 80a3aa4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a3aa0:	7177      	strb	r7, [r6, #5]
 80a3aa2:	e7ed      	b.n	80a3a80 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a3aa4:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80a3aa8:	463a      	mov	r2, r7
 80a3aaa:	6803      	ldr	r3, [r0, #0]
 80a3aac:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 80a3ab0:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 80a3ab4:	69dc      	ldr	r4, [r3, #28]
 80a3ab6:	4629      	mov	r1, r5
 80a3ab8:	4643      	mov	r3, r8
 80a3aba:	46a4      	mov	ip, r4
 80a3abc:	b001      	add	sp, #4
 80a3abe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3ac2:	4760      	bx	ip

080a3ac4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80a3ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3ac8:	4607      	mov	r7, r0
 80a3aca:	460c      	mov	r4, r1
 80a3acc:	4615      	mov	r5, r2
 80a3ace:	461e      	mov	r6, r3
 80a3ad0:	f7ff ff6b 	bl	80a39aa <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80a3ad4:	b948      	cbnz	r0, 80a3aea <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 80a3ad6:	68b8      	ldr	r0, [r7, #8]
 80a3ad8:	462a      	mov	r2, r5
 80a3ada:	6803      	ldr	r3, [r0, #0]
 80a3adc:	4621      	mov	r1, r4
 80a3ade:	699f      	ldr	r7, [r3, #24]
 80a3ae0:	4633      	mov	r3, r6
 80a3ae2:	46bc      	mov	ip, r7
 80a3ae4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a3ae8:	4760      	bx	ip
 80a3aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a3aee <_ZNSt9type_infoD1Ev>:
 80a3aee:	4770      	bx	lr

080a3af0 <_ZNKSt9type_info14__is_pointer_pEv>:
 80a3af0:	2000      	movs	r0, #0
 80a3af2:	4770      	bx	lr

080a3af4 <_ZNKSt9type_infoeqERKS_>:
 80a3af4:	4281      	cmp	r1, r0
 80a3af6:	b508      	push	{r3, lr}
 80a3af8:	d00e      	beq.n	80a3b18 <_ZNKSt9type_infoeqERKS_+0x24>
 80a3afa:	6840      	ldr	r0, [r0, #4]
 80a3afc:	7803      	ldrb	r3, [r0, #0]
 80a3afe:	2b2a      	cmp	r3, #42	; 0x2a
 80a3b00:	d00c      	beq.n	80a3b1c <_ZNKSt9type_infoeqERKS_+0x28>
 80a3b02:	6849      	ldr	r1, [r1, #4]
 80a3b04:	780b      	ldrb	r3, [r1, #0]
 80a3b06:	2b2a      	cmp	r3, #42	; 0x2a
 80a3b08:	bf08      	it	eq
 80a3b0a:	3101      	addeq	r1, #1
 80a3b0c:	f000 fef5 	bl	80a48fa <strcmp>
 80a3b10:	fab0 f080 	clz	r0, r0
 80a3b14:	0940      	lsrs	r0, r0, #5
 80a3b16:	bd08      	pop	{r3, pc}
 80a3b18:	2001      	movs	r0, #1
 80a3b1a:	e7fc      	b.n	80a3b16 <_ZNKSt9type_infoeqERKS_+0x22>
 80a3b1c:	2000      	movs	r0, #0
 80a3b1e:	e7fa      	b.n	80a3b16 <_ZNKSt9type_infoeqERKS_+0x22>

080a3b20 <__aeabi_drsub>:
 80a3b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a3b24:	e002      	b.n	80a3b2c <__adddf3>
 80a3b26:	bf00      	nop

080a3b28 <__aeabi_dsub>:
 80a3b28:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a3b2c <__adddf3>:
 80a3b2c:	b530      	push	{r4, r5, lr}
 80a3b2e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a3b32:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a3b36:	ea94 0f05 	teq	r4, r5
 80a3b3a:	bf08      	it	eq
 80a3b3c:	ea90 0f02 	teqeq	r0, r2
 80a3b40:	bf1f      	itttt	ne
 80a3b42:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a3b46:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a3b4a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a3b4e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3b52:	f000 80e2 	beq.w	80a3d1a <__adddf3+0x1ee>
 80a3b56:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a3b5a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a3b5e:	bfb8      	it	lt
 80a3b60:	426d      	neglt	r5, r5
 80a3b62:	dd0c      	ble.n	80a3b7e <__adddf3+0x52>
 80a3b64:	442c      	add	r4, r5
 80a3b66:	ea80 0202 	eor.w	r2, r0, r2
 80a3b6a:	ea81 0303 	eor.w	r3, r1, r3
 80a3b6e:	ea82 0000 	eor.w	r0, r2, r0
 80a3b72:	ea83 0101 	eor.w	r1, r3, r1
 80a3b76:	ea80 0202 	eor.w	r2, r0, r2
 80a3b7a:	ea81 0303 	eor.w	r3, r1, r3
 80a3b7e:	2d36      	cmp	r5, #54	; 0x36
 80a3b80:	bf88      	it	hi
 80a3b82:	bd30      	pophi	{r4, r5, pc}
 80a3b84:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3b88:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3b8c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a3b90:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a3b94:	d002      	beq.n	80a3b9c <__adddf3+0x70>
 80a3b96:	4240      	negs	r0, r0
 80a3b98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3b9c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a3ba0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3ba4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a3ba8:	d002      	beq.n	80a3bb0 <__adddf3+0x84>
 80a3baa:	4252      	negs	r2, r2
 80a3bac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a3bb0:	ea94 0f05 	teq	r4, r5
 80a3bb4:	f000 80a7 	beq.w	80a3d06 <__adddf3+0x1da>
 80a3bb8:	f1a4 0401 	sub.w	r4, r4, #1
 80a3bbc:	f1d5 0e20 	rsbs	lr, r5, #32
 80a3bc0:	db0d      	blt.n	80a3bde <__adddf3+0xb2>
 80a3bc2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a3bc6:	fa22 f205 	lsr.w	r2, r2, r5
 80a3bca:	1880      	adds	r0, r0, r2
 80a3bcc:	f141 0100 	adc.w	r1, r1, #0
 80a3bd0:	fa03 f20e 	lsl.w	r2, r3, lr
 80a3bd4:	1880      	adds	r0, r0, r2
 80a3bd6:	fa43 f305 	asr.w	r3, r3, r5
 80a3bda:	4159      	adcs	r1, r3
 80a3bdc:	e00e      	b.n	80a3bfc <__adddf3+0xd0>
 80a3bde:	f1a5 0520 	sub.w	r5, r5, #32
 80a3be2:	f10e 0e20 	add.w	lr, lr, #32
 80a3be6:	2a01      	cmp	r2, #1
 80a3be8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a3bec:	bf28      	it	cs
 80a3bee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a3bf2:	fa43 f305 	asr.w	r3, r3, r5
 80a3bf6:	18c0      	adds	r0, r0, r3
 80a3bf8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a3bfc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3c00:	d507      	bpl.n	80a3c12 <__adddf3+0xe6>
 80a3c02:	f04f 0e00 	mov.w	lr, #0
 80a3c06:	f1dc 0c00 	rsbs	ip, ip, #0
 80a3c0a:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a3c0e:	eb6e 0101 	sbc.w	r1, lr, r1
 80a3c12:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a3c16:	d31b      	bcc.n	80a3c50 <__adddf3+0x124>
 80a3c18:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a3c1c:	d30c      	bcc.n	80a3c38 <__adddf3+0x10c>
 80a3c1e:	0849      	lsrs	r1, r1, #1
 80a3c20:	ea5f 0030 	movs.w	r0, r0, rrx
 80a3c24:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a3c28:	f104 0401 	add.w	r4, r4, #1
 80a3c2c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a3c30:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a3c34:	f080 809a 	bcs.w	80a3d6c <__adddf3+0x240>
 80a3c38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a3c3c:	bf08      	it	eq
 80a3c3e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3c42:	f150 0000 	adcs.w	r0, r0, #0
 80a3c46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3c4a:	ea41 0105 	orr.w	r1, r1, r5
 80a3c4e:	bd30      	pop	{r4, r5, pc}
 80a3c50:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a3c54:	4140      	adcs	r0, r0
 80a3c56:	eb41 0101 	adc.w	r1, r1, r1
 80a3c5a:	3c01      	subs	r4, #1
 80a3c5c:	bf28      	it	cs
 80a3c5e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a3c62:	d2e9      	bcs.n	80a3c38 <__adddf3+0x10c>
 80a3c64:	f091 0f00 	teq	r1, #0
 80a3c68:	bf04      	itt	eq
 80a3c6a:	4601      	moveq	r1, r0
 80a3c6c:	2000      	moveq	r0, #0
 80a3c6e:	fab1 f381 	clz	r3, r1
 80a3c72:	bf08      	it	eq
 80a3c74:	3320      	addeq	r3, #32
 80a3c76:	f1a3 030b 	sub.w	r3, r3, #11
 80a3c7a:	f1b3 0220 	subs.w	r2, r3, #32
 80a3c7e:	da0c      	bge.n	80a3c9a <__adddf3+0x16e>
 80a3c80:	320c      	adds	r2, #12
 80a3c82:	dd08      	ble.n	80a3c96 <__adddf3+0x16a>
 80a3c84:	f102 0c14 	add.w	ip, r2, #20
 80a3c88:	f1c2 020c 	rsb	r2, r2, #12
 80a3c8c:	fa01 f00c 	lsl.w	r0, r1, ip
 80a3c90:	fa21 f102 	lsr.w	r1, r1, r2
 80a3c94:	e00c      	b.n	80a3cb0 <__adddf3+0x184>
 80a3c96:	f102 0214 	add.w	r2, r2, #20
 80a3c9a:	bfd8      	it	le
 80a3c9c:	f1c2 0c20 	rsble	ip, r2, #32
 80a3ca0:	fa01 f102 	lsl.w	r1, r1, r2
 80a3ca4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a3ca8:	bfdc      	itt	le
 80a3caa:	ea41 010c 	orrle.w	r1, r1, ip
 80a3cae:	4090      	lslle	r0, r2
 80a3cb0:	1ae4      	subs	r4, r4, r3
 80a3cb2:	bfa2      	ittt	ge
 80a3cb4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a3cb8:	4329      	orrge	r1, r5
 80a3cba:	bd30      	popge	{r4, r5, pc}
 80a3cbc:	ea6f 0404 	mvn.w	r4, r4
 80a3cc0:	3c1f      	subs	r4, #31
 80a3cc2:	da1c      	bge.n	80a3cfe <__adddf3+0x1d2>
 80a3cc4:	340c      	adds	r4, #12
 80a3cc6:	dc0e      	bgt.n	80a3ce6 <__adddf3+0x1ba>
 80a3cc8:	f104 0414 	add.w	r4, r4, #20
 80a3ccc:	f1c4 0220 	rsb	r2, r4, #32
 80a3cd0:	fa20 f004 	lsr.w	r0, r0, r4
 80a3cd4:	fa01 f302 	lsl.w	r3, r1, r2
 80a3cd8:	ea40 0003 	orr.w	r0, r0, r3
 80a3cdc:	fa21 f304 	lsr.w	r3, r1, r4
 80a3ce0:	ea45 0103 	orr.w	r1, r5, r3
 80a3ce4:	bd30      	pop	{r4, r5, pc}
 80a3ce6:	f1c4 040c 	rsb	r4, r4, #12
 80a3cea:	f1c4 0220 	rsb	r2, r4, #32
 80a3cee:	fa20 f002 	lsr.w	r0, r0, r2
 80a3cf2:	fa01 f304 	lsl.w	r3, r1, r4
 80a3cf6:	ea40 0003 	orr.w	r0, r0, r3
 80a3cfa:	4629      	mov	r1, r5
 80a3cfc:	bd30      	pop	{r4, r5, pc}
 80a3cfe:	fa21 f004 	lsr.w	r0, r1, r4
 80a3d02:	4629      	mov	r1, r5
 80a3d04:	bd30      	pop	{r4, r5, pc}
 80a3d06:	f094 0f00 	teq	r4, #0
 80a3d0a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a3d0e:	bf06      	itte	eq
 80a3d10:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a3d14:	3401      	addeq	r4, #1
 80a3d16:	3d01      	subne	r5, #1
 80a3d18:	e74e      	b.n	80a3bb8 <__adddf3+0x8c>
 80a3d1a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a3d1e:	bf18      	it	ne
 80a3d20:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3d24:	d029      	beq.n	80a3d7a <__adddf3+0x24e>
 80a3d26:	ea94 0f05 	teq	r4, r5
 80a3d2a:	bf08      	it	eq
 80a3d2c:	ea90 0f02 	teqeq	r0, r2
 80a3d30:	d005      	beq.n	80a3d3e <__adddf3+0x212>
 80a3d32:	ea54 0c00 	orrs.w	ip, r4, r0
 80a3d36:	bf04      	itt	eq
 80a3d38:	4619      	moveq	r1, r3
 80a3d3a:	4610      	moveq	r0, r2
 80a3d3c:	bd30      	pop	{r4, r5, pc}
 80a3d3e:	ea91 0f03 	teq	r1, r3
 80a3d42:	bf1e      	ittt	ne
 80a3d44:	2100      	movne	r1, #0
 80a3d46:	2000      	movne	r0, #0
 80a3d48:	bd30      	popne	{r4, r5, pc}
 80a3d4a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a3d4e:	d105      	bne.n	80a3d5c <__adddf3+0x230>
 80a3d50:	0040      	lsls	r0, r0, #1
 80a3d52:	4149      	adcs	r1, r1
 80a3d54:	bf28      	it	cs
 80a3d56:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a3d5a:	bd30      	pop	{r4, r5, pc}
 80a3d5c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a3d60:	bf3c      	itt	cc
 80a3d62:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a3d66:	bd30      	popcc	{r4, r5, pc}
 80a3d68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3d6c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a3d70:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3d74:	f04f 0000 	mov.w	r0, #0
 80a3d78:	bd30      	pop	{r4, r5, pc}
 80a3d7a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a3d7e:	bf1a      	itte	ne
 80a3d80:	4619      	movne	r1, r3
 80a3d82:	4610      	movne	r0, r2
 80a3d84:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a3d88:	bf1c      	itt	ne
 80a3d8a:	460b      	movne	r3, r1
 80a3d8c:	4602      	movne	r2, r0
 80a3d8e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3d92:	bf06      	itte	eq
 80a3d94:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a3d98:	ea91 0f03 	teqeq	r1, r3
 80a3d9c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a3da0:	bd30      	pop	{r4, r5, pc}
 80a3da2:	bf00      	nop

080a3da4 <__aeabi_ui2d>:
 80a3da4:	f090 0f00 	teq	r0, #0
 80a3da8:	bf04      	itt	eq
 80a3daa:	2100      	moveq	r1, #0
 80a3dac:	4770      	bxeq	lr
 80a3dae:	b530      	push	{r4, r5, lr}
 80a3db0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3db4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3db8:	f04f 0500 	mov.w	r5, #0
 80a3dbc:	f04f 0100 	mov.w	r1, #0
 80a3dc0:	e750      	b.n	80a3c64 <__adddf3+0x138>
 80a3dc2:	bf00      	nop

080a3dc4 <__aeabi_i2d>:
 80a3dc4:	f090 0f00 	teq	r0, #0
 80a3dc8:	bf04      	itt	eq
 80a3dca:	2100      	moveq	r1, #0
 80a3dcc:	4770      	bxeq	lr
 80a3dce:	b530      	push	{r4, r5, lr}
 80a3dd0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3dd4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3dd8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a3ddc:	bf48      	it	mi
 80a3dde:	4240      	negmi	r0, r0
 80a3de0:	f04f 0100 	mov.w	r1, #0
 80a3de4:	e73e      	b.n	80a3c64 <__adddf3+0x138>
 80a3de6:	bf00      	nop

080a3de8 <__aeabi_f2d>:
 80a3de8:	0042      	lsls	r2, r0, #1
 80a3dea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a3dee:	ea4f 0131 	mov.w	r1, r1, rrx
 80a3df2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a3df6:	bf1f      	itttt	ne
 80a3df8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a3dfc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a3e00:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a3e04:	4770      	bxne	lr
 80a3e06:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a3e0a:	bf08      	it	eq
 80a3e0c:	4770      	bxeq	lr
 80a3e0e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a3e12:	bf04      	itt	eq
 80a3e14:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a3e18:	4770      	bxeq	lr
 80a3e1a:	b530      	push	{r4, r5, lr}
 80a3e1c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a3e20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3e24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3e28:	e71c      	b.n	80a3c64 <__adddf3+0x138>
 80a3e2a:	bf00      	nop

080a3e2c <__aeabi_ul2d>:
 80a3e2c:	ea50 0201 	orrs.w	r2, r0, r1
 80a3e30:	bf08      	it	eq
 80a3e32:	4770      	bxeq	lr
 80a3e34:	b530      	push	{r4, r5, lr}
 80a3e36:	f04f 0500 	mov.w	r5, #0
 80a3e3a:	e00a      	b.n	80a3e52 <__aeabi_l2d+0x16>

080a3e3c <__aeabi_l2d>:
 80a3e3c:	ea50 0201 	orrs.w	r2, r0, r1
 80a3e40:	bf08      	it	eq
 80a3e42:	4770      	bxeq	lr
 80a3e44:	b530      	push	{r4, r5, lr}
 80a3e46:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a3e4a:	d502      	bpl.n	80a3e52 <__aeabi_l2d+0x16>
 80a3e4c:	4240      	negs	r0, r0
 80a3e4e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3e52:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3e56:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3e5a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a3e5e:	f43f aed8 	beq.w	80a3c12 <__adddf3+0xe6>
 80a3e62:	f04f 0203 	mov.w	r2, #3
 80a3e66:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a3e6a:	bf18      	it	ne
 80a3e6c:	3203      	addne	r2, #3
 80a3e6e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a3e72:	bf18      	it	ne
 80a3e74:	3203      	addne	r2, #3
 80a3e76:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a3e7a:	f1c2 0320 	rsb	r3, r2, #32
 80a3e7e:	fa00 fc03 	lsl.w	ip, r0, r3
 80a3e82:	fa20 f002 	lsr.w	r0, r0, r2
 80a3e86:	fa01 fe03 	lsl.w	lr, r1, r3
 80a3e8a:	ea40 000e 	orr.w	r0, r0, lr
 80a3e8e:	fa21 f102 	lsr.w	r1, r1, r2
 80a3e92:	4414      	add	r4, r2
 80a3e94:	e6bd      	b.n	80a3c12 <__adddf3+0xe6>
 80a3e96:	bf00      	nop

080a3e98 <__aeabi_dmul>:
 80a3e98:	b570      	push	{r4, r5, r6, lr}
 80a3e9a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3e9e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a3ea2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a3ea6:	bf1d      	ittte	ne
 80a3ea8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3eac:	ea94 0f0c 	teqne	r4, ip
 80a3eb0:	ea95 0f0c 	teqne	r5, ip
 80a3eb4:	f000 f8de 	bleq	80a4074 <__aeabi_dmul+0x1dc>
 80a3eb8:	442c      	add	r4, r5
 80a3eba:	ea81 0603 	eor.w	r6, r1, r3
 80a3ebe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a3ec2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a3ec6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a3eca:	bf18      	it	ne
 80a3ecc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a3ed0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3ed4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a3ed8:	d038      	beq.n	80a3f4c <__aeabi_dmul+0xb4>
 80a3eda:	fba0 ce02 	umull	ip, lr, r0, r2
 80a3ede:	f04f 0500 	mov.w	r5, #0
 80a3ee2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a3ee6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a3eea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a3eee:	f04f 0600 	mov.w	r6, #0
 80a3ef2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a3ef6:	f09c 0f00 	teq	ip, #0
 80a3efa:	bf18      	it	ne
 80a3efc:	f04e 0e01 	orrne.w	lr, lr, #1
 80a3f00:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a3f04:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a3f08:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a3f0c:	d204      	bcs.n	80a3f18 <__aeabi_dmul+0x80>
 80a3f0e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a3f12:	416d      	adcs	r5, r5
 80a3f14:	eb46 0606 	adc.w	r6, r6, r6
 80a3f18:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a3f1c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a3f20:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a3f24:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a3f28:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a3f2c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3f30:	bf88      	it	hi
 80a3f32:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a3f36:	d81e      	bhi.n	80a3f76 <__aeabi_dmul+0xde>
 80a3f38:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a3f3c:	bf08      	it	eq
 80a3f3e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a3f42:	f150 0000 	adcs.w	r0, r0, #0
 80a3f46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3f4a:	bd70      	pop	{r4, r5, r6, pc}
 80a3f4c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a3f50:	ea46 0101 	orr.w	r1, r6, r1
 80a3f54:	ea40 0002 	orr.w	r0, r0, r2
 80a3f58:	ea81 0103 	eor.w	r1, r1, r3
 80a3f5c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a3f60:	bfc2      	ittt	gt
 80a3f62:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a3f66:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a3f6a:	bd70      	popgt	{r4, r5, r6, pc}
 80a3f6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3f70:	f04f 0e00 	mov.w	lr, #0
 80a3f74:	3c01      	subs	r4, #1
 80a3f76:	f300 80ab 	bgt.w	80a40d0 <__aeabi_dmul+0x238>
 80a3f7a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a3f7e:	bfde      	ittt	le
 80a3f80:	2000      	movle	r0, #0
 80a3f82:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a3f86:	bd70      	pople	{r4, r5, r6, pc}
 80a3f88:	f1c4 0400 	rsb	r4, r4, #0
 80a3f8c:	3c20      	subs	r4, #32
 80a3f8e:	da35      	bge.n	80a3ffc <__aeabi_dmul+0x164>
 80a3f90:	340c      	adds	r4, #12
 80a3f92:	dc1b      	bgt.n	80a3fcc <__aeabi_dmul+0x134>
 80a3f94:	f104 0414 	add.w	r4, r4, #20
 80a3f98:	f1c4 0520 	rsb	r5, r4, #32
 80a3f9c:	fa00 f305 	lsl.w	r3, r0, r5
 80a3fa0:	fa20 f004 	lsr.w	r0, r0, r4
 80a3fa4:	fa01 f205 	lsl.w	r2, r1, r5
 80a3fa8:	ea40 0002 	orr.w	r0, r0, r2
 80a3fac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a3fb0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3fb4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a3fb8:	fa21 f604 	lsr.w	r6, r1, r4
 80a3fbc:	eb42 0106 	adc.w	r1, r2, r6
 80a3fc0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3fc4:	bf08      	it	eq
 80a3fc6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3fca:	bd70      	pop	{r4, r5, r6, pc}
 80a3fcc:	f1c4 040c 	rsb	r4, r4, #12
 80a3fd0:	f1c4 0520 	rsb	r5, r4, #32
 80a3fd4:	fa00 f304 	lsl.w	r3, r0, r4
 80a3fd8:	fa20 f005 	lsr.w	r0, r0, r5
 80a3fdc:	fa01 f204 	lsl.w	r2, r1, r4
 80a3fe0:	ea40 0002 	orr.w	r0, r0, r2
 80a3fe4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3fe8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a3fec:	f141 0100 	adc.w	r1, r1, #0
 80a3ff0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3ff4:	bf08      	it	eq
 80a3ff6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3ffa:	bd70      	pop	{r4, r5, r6, pc}
 80a3ffc:	f1c4 0520 	rsb	r5, r4, #32
 80a4000:	fa00 f205 	lsl.w	r2, r0, r5
 80a4004:	ea4e 0e02 	orr.w	lr, lr, r2
 80a4008:	fa20 f304 	lsr.w	r3, r0, r4
 80a400c:	fa01 f205 	lsl.w	r2, r1, r5
 80a4010:	ea43 0302 	orr.w	r3, r3, r2
 80a4014:	fa21 f004 	lsr.w	r0, r1, r4
 80a4018:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a401c:	fa21 f204 	lsr.w	r2, r1, r4
 80a4020:	ea20 0002 	bic.w	r0, r0, r2
 80a4024:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a4028:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a402c:	bf08      	it	eq
 80a402e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4032:	bd70      	pop	{r4, r5, r6, pc}
 80a4034:	f094 0f00 	teq	r4, #0
 80a4038:	d10f      	bne.n	80a405a <__aeabi_dmul+0x1c2>
 80a403a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a403e:	0040      	lsls	r0, r0, #1
 80a4040:	eb41 0101 	adc.w	r1, r1, r1
 80a4044:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4048:	bf08      	it	eq
 80a404a:	3c01      	subeq	r4, #1
 80a404c:	d0f7      	beq.n	80a403e <__aeabi_dmul+0x1a6>
 80a404e:	ea41 0106 	orr.w	r1, r1, r6
 80a4052:	f095 0f00 	teq	r5, #0
 80a4056:	bf18      	it	ne
 80a4058:	4770      	bxne	lr
 80a405a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a405e:	0052      	lsls	r2, r2, #1
 80a4060:	eb43 0303 	adc.w	r3, r3, r3
 80a4064:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a4068:	bf08      	it	eq
 80a406a:	3d01      	subeq	r5, #1
 80a406c:	d0f7      	beq.n	80a405e <__aeabi_dmul+0x1c6>
 80a406e:	ea43 0306 	orr.w	r3, r3, r6
 80a4072:	4770      	bx	lr
 80a4074:	ea94 0f0c 	teq	r4, ip
 80a4078:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a407c:	bf18      	it	ne
 80a407e:	ea95 0f0c 	teqne	r5, ip
 80a4082:	d00c      	beq.n	80a409e <__aeabi_dmul+0x206>
 80a4084:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4088:	bf18      	it	ne
 80a408a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a408e:	d1d1      	bne.n	80a4034 <__aeabi_dmul+0x19c>
 80a4090:	ea81 0103 	eor.w	r1, r1, r3
 80a4094:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4098:	f04f 0000 	mov.w	r0, #0
 80a409c:	bd70      	pop	{r4, r5, r6, pc}
 80a409e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a40a2:	bf06      	itte	eq
 80a40a4:	4610      	moveq	r0, r2
 80a40a6:	4619      	moveq	r1, r3
 80a40a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a40ac:	d019      	beq.n	80a40e2 <__aeabi_dmul+0x24a>
 80a40ae:	ea94 0f0c 	teq	r4, ip
 80a40b2:	d102      	bne.n	80a40ba <__aeabi_dmul+0x222>
 80a40b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a40b8:	d113      	bne.n	80a40e2 <__aeabi_dmul+0x24a>
 80a40ba:	ea95 0f0c 	teq	r5, ip
 80a40be:	d105      	bne.n	80a40cc <__aeabi_dmul+0x234>
 80a40c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a40c4:	bf1c      	itt	ne
 80a40c6:	4610      	movne	r0, r2
 80a40c8:	4619      	movne	r1, r3
 80a40ca:	d10a      	bne.n	80a40e2 <__aeabi_dmul+0x24a>
 80a40cc:	ea81 0103 	eor.w	r1, r1, r3
 80a40d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a40d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a40d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a40dc:	f04f 0000 	mov.w	r0, #0
 80a40e0:	bd70      	pop	{r4, r5, r6, pc}
 80a40e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a40e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a40ea:	bd70      	pop	{r4, r5, r6, pc}

080a40ec <__aeabi_ddiv>:
 80a40ec:	b570      	push	{r4, r5, r6, lr}
 80a40ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a40f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a40f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a40fa:	bf1d      	ittte	ne
 80a40fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a4100:	ea94 0f0c 	teqne	r4, ip
 80a4104:	ea95 0f0c 	teqne	r5, ip
 80a4108:	f000 f8a7 	bleq	80a425a <__aeabi_ddiv+0x16e>
 80a410c:	eba4 0405 	sub.w	r4, r4, r5
 80a4110:	ea81 0e03 	eor.w	lr, r1, r3
 80a4114:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a4118:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a411c:	f000 8088 	beq.w	80a4230 <__aeabi_ddiv+0x144>
 80a4120:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a4124:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a4128:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a412c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a4130:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a4134:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a4138:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a413c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a4140:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a4144:	429d      	cmp	r5, r3
 80a4146:	bf08      	it	eq
 80a4148:	4296      	cmpeq	r6, r2
 80a414a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a414e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a4152:	d202      	bcs.n	80a415a <__aeabi_ddiv+0x6e>
 80a4154:	085b      	lsrs	r3, r3, #1
 80a4156:	ea4f 0232 	mov.w	r2, r2, rrx
 80a415a:	1ab6      	subs	r6, r6, r2
 80a415c:	eb65 0503 	sbc.w	r5, r5, r3
 80a4160:	085b      	lsrs	r3, r3, #1
 80a4162:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4166:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a416a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a416e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4172:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4176:	bf22      	ittt	cs
 80a4178:	1ab6      	subcs	r6, r6, r2
 80a417a:	4675      	movcs	r5, lr
 80a417c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a4180:	085b      	lsrs	r3, r3, #1
 80a4182:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4186:	ebb6 0e02 	subs.w	lr, r6, r2
 80a418a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a418e:	bf22      	ittt	cs
 80a4190:	1ab6      	subcs	r6, r6, r2
 80a4192:	4675      	movcs	r5, lr
 80a4194:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a4198:	085b      	lsrs	r3, r3, #1
 80a419a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a419e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a41a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a41a6:	bf22      	ittt	cs
 80a41a8:	1ab6      	subcs	r6, r6, r2
 80a41aa:	4675      	movcs	r5, lr
 80a41ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a41b0:	085b      	lsrs	r3, r3, #1
 80a41b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a41b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a41ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a41be:	bf22      	ittt	cs
 80a41c0:	1ab6      	subcs	r6, r6, r2
 80a41c2:	4675      	movcs	r5, lr
 80a41c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a41c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80a41cc:	d018      	beq.n	80a4200 <__aeabi_ddiv+0x114>
 80a41ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a41d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a41d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a41da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a41de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a41e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a41e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a41ea:	d1c0      	bne.n	80a416e <__aeabi_ddiv+0x82>
 80a41ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a41f0:	d10b      	bne.n	80a420a <__aeabi_ddiv+0x11e>
 80a41f2:	ea41 0100 	orr.w	r1, r1, r0
 80a41f6:	f04f 0000 	mov.w	r0, #0
 80a41fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a41fe:	e7b6      	b.n	80a416e <__aeabi_ddiv+0x82>
 80a4200:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4204:	bf04      	itt	eq
 80a4206:	4301      	orreq	r1, r0
 80a4208:	2000      	moveq	r0, #0
 80a420a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a420e:	bf88      	it	hi
 80a4210:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a4214:	f63f aeaf 	bhi.w	80a3f76 <__aeabi_dmul+0xde>
 80a4218:	ebb5 0c03 	subs.w	ip, r5, r3
 80a421c:	bf04      	itt	eq
 80a421e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a4222:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a4226:	f150 0000 	adcs.w	r0, r0, #0
 80a422a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a422e:	bd70      	pop	{r4, r5, r6, pc}
 80a4230:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a4234:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a4238:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a423c:	bfc2      	ittt	gt
 80a423e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a4242:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a4246:	bd70      	popgt	{r4, r5, r6, pc}
 80a4248:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a424c:	f04f 0e00 	mov.w	lr, #0
 80a4250:	3c01      	subs	r4, #1
 80a4252:	e690      	b.n	80a3f76 <__aeabi_dmul+0xde>
 80a4254:	ea45 0e06 	orr.w	lr, r5, r6
 80a4258:	e68d      	b.n	80a3f76 <__aeabi_dmul+0xde>
 80a425a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a425e:	ea94 0f0c 	teq	r4, ip
 80a4262:	bf08      	it	eq
 80a4264:	ea95 0f0c 	teqeq	r5, ip
 80a4268:	f43f af3b 	beq.w	80a40e2 <__aeabi_dmul+0x24a>
 80a426c:	ea94 0f0c 	teq	r4, ip
 80a4270:	d10a      	bne.n	80a4288 <__aeabi_ddiv+0x19c>
 80a4272:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a4276:	f47f af34 	bne.w	80a40e2 <__aeabi_dmul+0x24a>
 80a427a:	ea95 0f0c 	teq	r5, ip
 80a427e:	f47f af25 	bne.w	80a40cc <__aeabi_dmul+0x234>
 80a4282:	4610      	mov	r0, r2
 80a4284:	4619      	mov	r1, r3
 80a4286:	e72c      	b.n	80a40e2 <__aeabi_dmul+0x24a>
 80a4288:	ea95 0f0c 	teq	r5, ip
 80a428c:	d106      	bne.n	80a429c <__aeabi_ddiv+0x1b0>
 80a428e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a4292:	f43f aefd 	beq.w	80a4090 <__aeabi_dmul+0x1f8>
 80a4296:	4610      	mov	r0, r2
 80a4298:	4619      	mov	r1, r3
 80a429a:	e722      	b.n	80a40e2 <__aeabi_dmul+0x24a>
 80a429c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a42a0:	bf18      	it	ne
 80a42a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a42a6:	f47f aec5 	bne.w	80a4034 <__aeabi_dmul+0x19c>
 80a42aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a42ae:	f47f af0d 	bne.w	80a40cc <__aeabi_dmul+0x234>
 80a42b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a42b6:	f47f aeeb 	bne.w	80a4090 <__aeabi_dmul+0x1f8>
 80a42ba:	e712      	b.n	80a40e2 <__aeabi_dmul+0x24a>

080a42bc <__aeabi_d2f>:
 80a42bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a42c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a42c4:	bf24      	itt	cs
 80a42c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a42ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a42ce:	d90d      	bls.n	80a42ec <__aeabi_d2f+0x30>
 80a42d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a42d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a42d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a42dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a42e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a42e4:	bf08      	it	eq
 80a42e6:	f020 0001 	biceq.w	r0, r0, #1
 80a42ea:	4770      	bx	lr
 80a42ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a42f0:	d121      	bne.n	80a4336 <__aeabi_d2f+0x7a>
 80a42f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a42f6:	bfbc      	itt	lt
 80a42f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a42fc:	4770      	bxlt	lr
 80a42fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4302:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a4306:	f1c2 0218 	rsb	r2, r2, #24
 80a430a:	f1c2 0c20 	rsb	ip, r2, #32
 80a430e:	fa10 f30c 	lsls.w	r3, r0, ip
 80a4312:	fa20 f002 	lsr.w	r0, r0, r2
 80a4316:	bf18      	it	ne
 80a4318:	f040 0001 	orrne.w	r0, r0, #1
 80a431c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a4320:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a4324:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a4328:	ea40 000c 	orr.w	r0, r0, ip
 80a432c:	fa23 f302 	lsr.w	r3, r3, r2
 80a4330:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a4334:	e7cc      	b.n	80a42d0 <__aeabi_d2f+0x14>
 80a4336:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a433a:	d107      	bne.n	80a434c <__aeabi_d2f+0x90>
 80a433c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a4340:	bf1e      	ittt	ne
 80a4342:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a4346:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a434a:	4770      	bxne	lr
 80a434c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a4350:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4354:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4358:	4770      	bx	lr
 80a435a:	bf00      	nop

080a435c <__aeabi_frsub>:
 80a435c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a4360:	e002      	b.n	80a4368 <__addsf3>
 80a4362:	bf00      	nop

080a4364 <__aeabi_fsub>:
 80a4364:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a4368 <__addsf3>:
 80a4368:	0042      	lsls	r2, r0, #1
 80a436a:	bf1f      	itttt	ne
 80a436c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a4370:	ea92 0f03 	teqne	r2, r3
 80a4374:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a4378:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a437c:	d06a      	beq.n	80a4454 <__addsf3+0xec>
 80a437e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a4382:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a4386:	bfc1      	itttt	gt
 80a4388:	18d2      	addgt	r2, r2, r3
 80a438a:	4041      	eorgt	r1, r0
 80a438c:	4048      	eorgt	r0, r1
 80a438e:	4041      	eorgt	r1, r0
 80a4390:	bfb8      	it	lt
 80a4392:	425b      	neglt	r3, r3
 80a4394:	2b19      	cmp	r3, #25
 80a4396:	bf88      	it	hi
 80a4398:	4770      	bxhi	lr
 80a439a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a439e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a43a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a43a6:	bf18      	it	ne
 80a43a8:	4240      	negne	r0, r0
 80a43aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a43ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a43b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a43b6:	bf18      	it	ne
 80a43b8:	4249      	negne	r1, r1
 80a43ba:	ea92 0f03 	teq	r2, r3
 80a43be:	d03f      	beq.n	80a4440 <__addsf3+0xd8>
 80a43c0:	f1a2 0201 	sub.w	r2, r2, #1
 80a43c4:	fa41 fc03 	asr.w	ip, r1, r3
 80a43c8:	eb10 000c 	adds.w	r0, r0, ip
 80a43cc:	f1c3 0320 	rsb	r3, r3, #32
 80a43d0:	fa01 f103 	lsl.w	r1, r1, r3
 80a43d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a43d8:	d502      	bpl.n	80a43e0 <__addsf3+0x78>
 80a43da:	4249      	negs	r1, r1
 80a43dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a43e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a43e4:	d313      	bcc.n	80a440e <__addsf3+0xa6>
 80a43e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a43ea:	d306      	bcc.n	80a43fa <__addsf3+0x92>
 80a43ec:	0840      	lsrs	r0, r0, #1
 80a43ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80a43f2:	f102 0201 	add.w	r2, r2, #1
 80a43f6:	2afe      	cmp	r2, #254	; 0xfe
 80a43f8:	d251      	bcs.n	80a449e <__addsf3+0x136>
 80a43fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a43fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4402:	bf08      	it	eq
 80a4404:	f020 0001 	biceq.w	r0, r0, #1
 80a4408:	ea40 0003 	orr.w	r0, r0, r3
 80a440c:	4770      	bx	lr
 80a440e:	0049      	lsls	r1, r1, #1
 80a4410:	eb40 0000 	adc.w	r0, r0, r0
 80a4414:	3a01      	subs	r2, #1
 80a4416:	bf28      	it	cs
 80a4418:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80a441c:	d2ed      	bcs.n	80a43fa <__addsf3+0x92>
 80a441e:	fab0 fc80 	clz	ip, r0
 80a4422:	f1ac 0c08 	sub.w	ip, ip, #8
 80a4426:	ebb2 020c 	subs.w	r2, r2, ip
 80a442a:	fa00 f00c 	lsl.w	r0, r0, ip
 80a442e:	bfaa      	itet	ge
 80a4430:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a4434:	4252      	neglt	r2, r2
 80a4436:	4318      	orrge	r0, r3
 80a4438:	bfbc      	itt	lt
 80a443a:	40d0      	lsrlt	r0, r2
 80a443c:	4318      	orrlt	r0, r3
 80a443e:	4770      	bx	lr
 80a4440:	f092 0f00 	teq	r2, #0
 80a4444:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a4448:	bf06      	itte	eq
 80a444a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a444e:	3201      	addeq	r2, #1
 80a4450:	3b01      	subne	r3, #1
 80a4452:	e7b5      	b.n	80a43c0 <__addsf3+0x58>
 80a4454:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a4458:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a445c:	bf18      	it	ne
 80a445e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4462:	d021      	beq.n	80a44a8 <__addsf3+0x140>
 80a4464:	ea92 0f03 	teq	r2, r3
 80a4468:	d004      	beq.n	80a4474 <__addsf3+0x10c>
 80a446a:	f092 0f00 	teq	r2, #0
 80a446e:	bf08      	it	eq
 80a4470:	4608      	moveq	r0, r1
 80a4472:	4770      	bx	lr
 80a4474:	ea90 0f01 	teq	r0, r1
 80a4478:	bf1c      	itt	ne
 80a447a:	2000      	movne	r0, #0
 80a447c:	4770      	bxne	lr
 80a447e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a4482:	d104      	bne.n	80a448e <__addsf3+0x126>
 80a4484:	0040      	lsls	r0, r0, #1
 80a4486:	bf28      	it	cs
 80a4488:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a448c:	4770      	bx	lr
 80a448e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a4492:	bf3c      	itt	cc
 80a4494:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a4498:	4770      	bxcc	lr
 80a449a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a449e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a44a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a44a6:	4770      	bx	lr
 80a44a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a44ac:	bf16      	itet	ne
 80a44ae:	4608      	movne	r0, r1
 80a44b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a44b4:	4601      	movne	r1, r0
 80a44b6:	0242      	lsls	r2, r0, #9
 80a44b8:	bf06      	itte	eq
 80a44ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a44be:	ea90 0f01 	teqeq	r0, r1
 80a44c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a44c6:	4770      	bx	lr

080a44c8 <__aeabi_ui2f>:
 80a44c8:	f04f 0300 	mov.w	r3, #0
 80a44cc:	e004      	b.n	80a44d8 <__aeabi_i2f+0x8>
 80a44ce:	bf00      	nop

080a44d0 <__aeabi_i2f>:
 80a44d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a44d4:	bf48      	it	mi
 80a44d6:	4240      	negmi	r0, r0
 80a44d8:	ea5f 0c00 	movs.w	ip, r0
 80a44dc:	bf08      	it	eq
 80a44de:	4770      	bxeq	lr
 80a44e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a44e4:	4601      	mov	r1, r0
 80a44e6:	f04f 0000 	mov.w	r0, #0
 80a44ea:	e01c      	b.n	80a4526 <__aeabi_l2f+0x2a>

080a44ec <__aeabi_ul2f>:
 80a44ec:	ea50 0201 	orrs.w	r2, r0, r1
 80a44f0:	bf08      	it	eq
 80a44f2:	4770      	bxeq	lr
 80a44f4:	f04f 0300 	mov.w	r3, #0
 80a44f8:	e00a      	b.n	80a4510 <__aeabi_l2f+0x14>
 80a44fa:	bf00      	nop

080a44fc <__aeabi_l2f>:
 80a44fc:	ea50 0201 	orrs.w	r2, r0, r1
 80a4500:	bf08      	it	eq
 80a4502:	4770      	bxeq	lr
 80a4504:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a4508:	d502      	bpl.n	80a4510 <__aeabi_l2f+0x14>
 80a450a:	4240      	negs	r0, r0
 80a450c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4510:	ea5f 0c01 	movs.w	ip, r1
 80a4514:	bf02      	ittt	eq
 80a4516:	4684      	moveq	ip, r0
 80a4518:	4601      	moveq	r1, r0
 80a451a:	2000      	moveq	r0, #0
 80a451c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a4520:	bf08      	it	eq
 80a4522:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a4526:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a452a:	fabc f28c 	clz	r2, ip
 80a452e:	3a08      	subs	r2, #8
 80a4530:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a4534:	db10      	blt.n	80a4558 <__aeabi_l2f+0x5c>
 80a4536:	fa01 fc02 	lsl.w	ip, r1, r2
 80a453a:	4463      	add	r3, ip
 80a453c:	fa00 fc02 	lsl.w	ip, r0, r2
 80a4540:	f1c2 0220 	rsb	r2, r2, #32
 80a4544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a4548:	fa20 f202 	lsr.w	r2, r0, r2
 80a454c:	eb43 0002 	adc.w	r0, r3, r2
 80a4550:	bf08      	it	eq
 80a4552:	f020 0001 	biceq.w	r0, r0, #1
 80a4556:	4770      	bx	lr
 80a4558:	f102 0220 	add.w	r2, r2, #32
 80a455c:	fa01 fc02 	lsl.w	ip, r1, r2
 80a4560:	f1c2 0220 	rsb	r2, r2, #32
 80a4564:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a4568:	fa21 f202 	lsr.w	r2, r1, r2
 80a456c:	eb43 0002 	adc.w	r0, r3, r2
 80a4570:	bf08      	it	eq
 80a4572:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a4576:	4770      	bx	lr

080a4578 <__aeabi_fmul>:
 80a4578:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a457c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a4580:	bf1e      	ittt	ne
 80a4582:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a4586:	ea92 0f0c 	teqne	r2, ip
 80a458a:	ea93 0f0c 	teqne	r3, ip
 80a458e:	d06f      	beq.n	80a4670 <__aeabi_fmul+0xf8>
 80a4590:	441a      	add	r2, r3
 80a4592:	ea80 0c01 	eor.w	ip, r0, r1
 80a4596:	0240      	lsls	r0, r0, #9
 80a4598:	bf18      	it	ne
 80a459a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a459e:	d01e      	beq.n	80a45de <__aeabi_fmul+0x66>
 80a45a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a45a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a45a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a45ac:	fba0 3101 	umull	r3, r1, r0, r1
 80a45b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a45b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a45b8:	bf3e      	ittt	cc
 80a45ba:	0049      	lslcc	r1, r1, #1
 80a45bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a45c0:	005b      	lslcc	r3, r3, #1
 80a45c2:	ea40 0001 	orr.w	r0, r0, r1
 80a45c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a45ca:	2afd      	cmp	r2, #253	; 0xfd
 80a45cc:	d81d      	bhi.n	80a460a <__aeabi_fmul+0x92>
 80a45ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a45d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a45d6:	bf08      	it	eq
 80a45d8:	f020 0001 	biceq.w	r0, r0, #1
 80a45dc:	4770      	bx	lr
 80a45de:	f090 0f00 	teq	r0, #0
 80a45e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a45e6:	bf08      	it	eq
 80a45e8:	0249      	lsleq	r1, r1, #9
 80a45ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a45ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a45f2:	3a7f      	subs	r2, #127	; 0x7f
 80a45f4:	bfc2      	ittt	gt
 80a45f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a45fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a45fe:	4770      	bxgt	lr
 80a4600:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4604:	f04f 0300 	mov.w	r3, #0
 80a4608:	3a01      	subs	r2, #1
 80a460a:	dc5d      	bgt.n	80a46c8 <__aeabi_fmul+0x150>
 80a460c:	f112 0f19 	cmn.w	r2, #25
 80a4610:	bfdc      	itt	le
 80a4612:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a4616:	4770      	bxle	lr
 80a4618:	f1c2 0200 	rsb	r2, r2, #0
 80a461c:	0041      	lsls	r1, r0, #1
 80a461e:	fa21 f102 	lsr.w	r1, r1, r2
 80a4622:	f1c2 0220 	rsb	r2, r2, #32
 80a4626:	fa00 fc02 	lsl.w	ip, r0, r2
 80a462a:	ea5f 0031 	movs.w	r0, r1, rrx
 80a462e:	f140 0000 	adc.w	r0, r0, #0
 80a4632:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a4636:	bf08      	it	eq
 80a4638:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a463c:	4770      	bx	lr
 80a463e:	f092 0f00 	teq	r2, #0
 80a4642:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a4646:	bf02      	ittt	eq
 80a4648:	0040      	lsleq	r0, r0, #1
 80a464a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a464e:	3a01      	subeq	r2, #1
 80a4650:	d0f9      	beq.n	80a4646 <__aeabi_fmul+0xce>
 80a4652:	ea40 000c 	orr.w	r0, r0, ip
 80a4656:	f093 0f00 	teq	r3, #0
 80a465a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a465e:	bf02      	ittt	eq
 80a4660:	0049      	lsleq	r1, r1, #1
 80a4662:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a4666:	3b01      	subeq	r3, #1
 80a4668:	d0f9      	beq.n	80a465e <__aeabi_fmul+0xe6>
 80a466a:	ea41 010c 	orr.w	r1, r1, ip
 80a466e:	e78f      	b.n	80a4590 <__aeabi_fmul+0x18>
 80a4670:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a4674:	ea92 0f0c 	teq	r2, ip
 80a4678:	bf18      	it	ne
 80a467a:	ea93 0f0c 	teqne	r3, ip
 80a467e:	d00a      	beq.n	80a4696 <__aeabi_fmul+0x11e>
 80a4680:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a4684:	bf18      	it	ne
 80a4686:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a468a:	d1d8      	bne.n	80a463e <__aeabi_fmul+0xc6>
 80a468c:	ea80 0001 	eor.w	r0, r0, r1
 80a4690:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a4694:	4770      	bx	lr
 80a4696:	f090 0f00 	teq	r0, #0
 80a469a:	bf17      	itett	ne
 80a469c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a46a0:	4608      	moveq	r0, r1
 80a46a2:	f091 0f00 	teqne	r1, #0
 80a46a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a46aa:	d014      	beq.n	80a46d6 <__aeabi_fmul+0x15e>
 80a46ac:	ea92 0f0c 	teq	r2, ip
 80a46b0:	d101      	bne.n	80a46b6 <__aeabi_fmul+0x13e>
 80a46b2:	0242      	lsls	r2, r0, #9
 80a46b4:	d10f      	bne.n	80a46d6 <__aeabi_fmul+0x15e>
 80a46b6:	ea93 0f0c 	teq	r3, ip
 80a46ba:	d103      	bne.n	80a46c4 <__aeabi_fmul+0x14c>
 80a46bc:	024b      	lsls	r3, r1, #9
 80a46be:	bf18      	it	ne
 80a46c0:	4608      	movne	r0, r1
 80a46c2:	d108      	bne.n	80a46d6 <__aeabi_fmul+0x15e>
 80a46c4:	ea80 0001 	eor.w	r0, r0, r1
 80a46c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a46cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a46d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a46d4:	4770      	bx	lr
 80a46d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a46da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a46de:	4770      	bx	lr

080a46e0 <__aeabi_fdiv>:
 80a46e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a46e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a46e8:	bf1e      	ittt	ne
 80a46ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a46ee:	ea92 0f0c 	teqne	r2, ip
 80a46f2:	ea93 0f0c 	teqne	r3, ip
 80a46f6:	d069      	beq.n	80a47cc <__aeabi_fdiv+0xec>
 80a46f8:	eba2 0203 	sub.w	r2, r2, r3
 80a46fc:	ea80 0c01 	eor.w	ip, r0, r1
 80a4700:	0249      	lsls	r1, r1, #9
 80a4702:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a4706:	d037      	beq.n	80a4778 <__aeabi_fdiv+0x98>
 80a4708:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a470c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a4710:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a4714:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a4718:	428b      	cmp	r3, r1
 80a471a:	bf38      	it	cc
 80a471c:	005b      	lslcc	r3, r3, #1
 80a471e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a4722:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a4726:	428b      	cmp	r3, r1
 80a4728:	bf24      	itt	cs
 80a472a:	1a5b      	subcs	r3, r3, r1
 80a472c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a4730:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a4734:	bf24      	itt	cs
 80a4736:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a473a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a473e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a4742:	bf24      	itt	cs
 80a4744:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a4748:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a474c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a4750:	bf24      	itt	cs
 80a4752:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a4756:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a475a:	011b      	lsls	r3, r3, #4
 80a475c:	bf18      	it	ne
 80a475e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a4762:	d1e0      	bne.n	80a4726 <__aeabi_fdiv+0x46>
 80a4764:	2afd      	cmp	r2, #253	; 0xfd
 80a4766:	f63f af50 	bhi.w	80a460a <__aeabi_fmul+0x92>
 80a476a:	428b      	cmp	r3, r1
 80a476c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4770:	bf08      	it	eq
 80a4772:	f020 0001 	biceq.w	r0, r0, #1
 80a4776:	4770      	bx	lr
 80a4778:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a477c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a4780:	327f      	adds	r2, #127	; 0x7f
 80a4782:	bfc2      	ittt	gt
 80a4784:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a4788:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a478c:	4770      	bxgt	lr
 80a478e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4792:	f04f 0300 	mov.w	r3, #0
 80a4796:	3a01      	subs	r2, #1
 80a4798:	e737      	b.n	80a460a <__aeabi_fmul+0x92>
 80a479a:	f092 0f00 	teq	r2, #0
 80a479e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a47a2:	bf02      	ittt	eq
 80a47a4:	0040      	lsleq	r0, r0, #1
 80a47a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a47aa:	3a01      	subeq	r2, #1
 80a47ac:	d0f9      	beq.n	80a47a2 <__aeabi_fdiv+0xc2>
 80a47ae:	ea40 000c 	orr.w	r0, r0, ip
 80a47b2:	f093 0f00 	teq	r3, #0
 80a47b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a47ba:	bf02      	ittt	eq
 80a47bc:	0049      	lsleq	r1, r1, #1
 80a47be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a47c2:	3b01      	subeq	r3, #1
 80a47c4:	d0f9      	beq.n	80a47ba <__aeabi_fdiv+0xda>
 80a47c6:	ea41 010c 	orr.w	r1, r1, ip
 80a47ca:	e795      	b.n	80a46f8 <__aeabi_fdiv+0x18>
 80a47cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a47d0:	ea92 0f0c 	teq	r2, ip
 80a47d4:	d108      	bne.n	80a47e8 <__aeabi_fdiv+0x108>
 80a47d6:	0242      	lsls	r2, r0, #9
 80a47d8:	f47f af7d 	bne.w	80a46d6 <__aeabi_fmul+0x15e>
 80a47dc:	ea93 0f0c 	teq	r3, ip
 80a47e0:	f47f af70 	bne.w	80a46c4 <__aeabi_fmul+0x14c>
 80a47e4:	4608      	mov	r0, r1
 80a47e6:	e776      	b.n	80a46d6 <__aeabi_fmul+0x15e>
 80a47e8:	ea93 0f0c 	teq	r3, ip
 80a47ec:	d104      	bne.n	80a47f8 <__aeabi_fdiv+0x118>
 80a47ee:	024b      	lsls	r3, r1, #9
 80a47f0:	f43f af4c 	beq.w	80a468c <__aeabi_fmul+0x114>
 80a47f4:	4608      	mov	r0, r1
 80a47f6:	e76e      	b.n	80a46d6 <__aeabi_fmul+0x15e>
 80a47f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a47fc:	bf18      	it	ne
 80a47fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a4802:	d1ca      	bne.n	80a479a <__aeabi_fdiv+0xba>
 80a4804:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a4808:	f47f af5c 	bne.w	80a46c4 <__aeabi_fmul+0x14c>
 80a480c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a4810:	f47f af3c 	bne.w	80a468c <__aeabi_fmul+0x114>
 80a4814:	e75f      	b.n	80a46d6 <__aeabi_fmul+0x15e>
 80a4816:	bf00      	nop

080a4818 <atexit>:
 80a4818:	2300      	movs	r3, #0
 80a481a:	4601      	mov	r1, r0
 80a481c:	461a      	mov	r2, r3
 80a481e:	4618      	mov	r0, r3
 80a4820:	f000 b930 	b.w	80a4a84 <__register_exitproc>

080a4824 <memcpy>:
 80a4824:	440a      	add	r2, r1
 80a4826:	4291      	cmp	r1, r2
 80a4828:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a482c:	d100      	bne.n	80a4830 <memcpy+0xc>
 80a482e:	4770      	bx	lr
 80a4830:	b510      	push	{r4, lr}
 80a4832:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a4836:	4291      	cmp	r1, r2
 80a4838:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a483c:	d1f9      	bne.n	80a4832 <memcpy+0xe>
 80a483e:	bd10      	pop	{r4, pc}

080a4840 <memmove>:
 80a4840:	4288      	cmp	r0, r1
 80a4842:	b510      	push	{r4, lr}
 80a4844:	eb01 0402 	add.w	r4, r1, r2
 80a4848:	d902      	bls.n	80a4850 <memmove+0x10>
 80a484a:	4284      	cmp	r4, r0
 80a484c:	4623      	mov	r3, r4
 80a484e:	d807      	bhi.n	80a4860 <memmove+0x20>
 80a4850:	1e43      	subs	r3, r0, #1
 80a4852:	42a1      	cmp	r1, r4
 80a4854:	d008      	beq.n	80a4868 <memmove+0x28>
 80a4856:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a485a:	f803 2f01 	strb.w	r2, [r3, #1]!
 80a485e:	e7f8      	b.n	80a4852 <memmove+0x12>
 80a4860:	4601      	mov	r1, r0
 80a4862:	4402      	add	r2, r0
 80a4864:	428a      	cmp	r2, r1
 80a4866:	d100      	bne.n	80a486a <memmove+0x2a>
 80a4868:	bd10      	pop	{r4, pc}
 80a486a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80a486e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80a4872:	e7f7      	b.n	80a4864 <memmove+0x24>

080a4874 <memset>:
 80a4874:	4603      	mov	r3, r0
 80a4876:	4402      	add	r2, r0
 80a4878:	4293      	cmp	r3, r2
 80a487a:	d100      	bne.n	80a487e <memset+0xa>
 80a487c:	4770      	bx	lr
 80a487e:	f803 1b01 	strb.w	r1, [r3], #1
 80a4882:	e7f9      	b.n	80a4878 <memset+0x4>

080a4884 <srand>:
 80a4884:	b538      	push	{r3, r4, r5, lr}
 80a4886:	4b0d      	ldr	r3, [pc, #52]	; (80a48bc <srand+0x38>)
 80a4888:	4604      	mov	r4, r0
 80a488a:	681d      	ldr	r5, [r3, #0]
 80a488c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a488e:	b97b      	cbnz	r3, 80a48b0 <srand+0x2c>
 80a4890:	2018      	movs	r0, #24
 80a4892:	f7fc fde5 	bl	80a1460 <malloc>
 80a4896:	4a0a      	ldr	r2, [pc, #40]	; (80a48c0 <srand+0x3c>)
 80a4898:	4b0a      	ldr	r3, [pc, #40]	; (80a48c4 <srand+0x40>)
 80a489a:	63a8      	str	r0, [r5, #56]	; 0x38
 80a489c:	e9c0 2300 	strd	r2, r3, [r0]
 80a48a0:	4b09      	ldr	r3, [pc, #36]	; (80a48c8 <srand+0x44>)
 80a48a2:	2201      	movs	r2, #1
 80a48a4:	6083      	str	r3, [r0, #8]
 80a48a6:	230b      	movs	r3, #11
 80a48a8:	8183      	strh	r3, [r0, #12]
 80a48aa:	2300      	movs	r3, #0
 80a48ac:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a48b0:	2200      	movs	r2, #0
 80a48b2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a48b4:	611c      	str	r4, [r3, #16]
 80a48b6:	615a      	str	r2, [r3, #20]
 80a48b8:	bd38      	pop	{r3, r4, r5, pc}
 80a48ba:	bf00      	nop
 80a48bc:	2000000c 	.word	0x2000000c
 80a48c0:	abcd330e 	.word	0xabcd330e
 80a48c4:	e66d1234 	.word	0xe66d1234
 80a48c8:	0005deec 	.word	0x0005deec

080a48cc <strchr>:
 80a48cc:	4603      	mov	r3, r0
 80a48ce:	b2c9      	uxtb	r1, r1
 80a48d0:	4618      	mov	r0, r3
 80a48d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a48d6:	b112      	cbz	r2, 80a48de <strchr+0x12>
 80a48d8:	428a      	cmp	r2, r1
 80a48da:	d1f9      	bne.n	80a48d0 <strchr+0x4>
 80a48dc:	4770      	bx	lr
 80a48de:	2900      	cmp	r1, #0
 80a48e0:	bf18      	it	ne
 80a48e2:	2000      	movne	r0, #0
 80a48e4:	4770      	bx	lr

080a48e6 <strchrnul>:
 80a48e6:	b510      	push	{r4, lr}
 80a48e8:	4604      	mov	r4, r0
 80a48ea:	f7ff ffef 	bl	80a48cc <strchr>
 80a48ee:	b918      	cbnz	r0, 80a48f8 <strchrnul+0x12>
 80a48f0:	4620      	mov	r0, r4
 80a48f2:	f000 f814 	bl	80a491e <strlen>
 80a48f6:	4420      	add	r0, r4
 80a48f8:	bd10      	pop	{r4, pc}

080a48fa <strcmp>:
 80a48fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a48fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a4902:	2a01      	cmp	r2, #1
 80a4904:	bf28      	it	cs
 80a4906:	429a      	cmpcs	r2, r3
 80a4908:	d0f7      	beq.n	80a48fa <strcmp>
 80a490a:	1ad0      	subs	r0, r2, r3
 80a490c:	4770      	bx	lr

080a490e <strcpy>:
 80a490e:	4603      	mov	r3, r0
 80a4910:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a4914:	f803 2b01 	strb.w	r2, [r3], #1
 80a4918:	2a00      	cmp	r2, #0
 80a491a:	d1f9      	bne.n	80a4910 <strcpy+0x2>
 80a491c:	4770      	bx	lr

080a491e <strlen>:
 80a491e:	4603      	mov	r3, r0
 80a4920:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a4924:	2a00      	cmp	r2, #0
 80a4926:	d1fb      	bne.n	80a4920 <strlen+0x2>
 80a4928:	1a18      	subs	r0, r3, r0
 80a492a:	3801      	subs	r0, #1
 80a492c:	4770      	bx	lr

080a492e <strncmp>:
 80a492e:	b510      	push	{r4, lr}
 80a4930:	b16a      	cbz	r2, 80a494e <strncmp+0x20>
 80a4932:	3901      	subs	r1, #1
 80a4934:	1884      	adds	r4, r0, r2
 80a4936:	f810 3b01 	ldrb.w	r3, [r0], #1
 80a493a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80a493e:	4293      	cmp	r3, r2
 80a4940:	d103      	bne.n	80a494a <strncmp+0x1c>
 80a4942:	42a0      	cmp	r0, r4
 80a4944:	d001      	beq.n	80a494a <strncmp+0x1c>
 80a4946:	2b00      	cmp	r3, #0
 80a4948:	d1f5      	bne.n	80a4936 <strncmp+0x8>
 80a494a:	1a98      	subs	r0, r3, r2
 80a494c:	bd10      	pop	{r4, pc}
 80a494e:	4610      	mov	r0, r2
 80a4950:	e7fc      	b.n	80a494c <strncmp+0x1e>

080a4952 <strrchr>:
 80a4952:	b538      	push	{r3, r4, r5, lr}
 80a4954:	4603      	mov	r3, r0
 80a4956:	460c      	mov	r4, r1
 80a4958:	b969      	cbnz	r1, 80a4976 <strrchr+0x24>
 80a495a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a495e:	f7ff bfb5 	b.w	80a48cc <strchr>
 80a4962:	4605      	mov	r5, r0
 80a4964:	1c43      	adds	r3, r0, #1
 80a4966:	4621      	mov	r1, r4
 80a4968:	4618      	mov	r0, r3
 80a496a:	f7ff ffaf 	bl	80a48cc <strchr>
 80a496e:	2800      	cmp	r0, #0
 80a4970:	d1f7      	bne.n	80a4962 <strrchr+0x10>
 80a4972:	4628      	mov	r0, r5
 80a4974:	bd38      	pop	{r3, r4, r5, pc}
 80a4976:	2500      	movs	r5, #0
 80a4978:	e7f5      	b.n	80a4966 <strrchr+0x14>
	...

080a497c <_strtol_l.isra.0>:
 80a497c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a4980:	468c      	mov	ip, r1
 80a4982:	4686      	mov	lr, r0
 80a4984:	4e39      	ldr	r6, [pc, #228]	; (80a4a6c <_strtol_l.isra.0+0xf0>)
 80a4986:	4660      	mov	r0, ip
 80a4988:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a498c:	5da5      	ldrb	r5, [r4, r6]
 80a498e:	f015 0508 	ands.w	r5, r5, #8
 80a4992:	d1f8      	bne.n	80a4986 <_strtol_l.isra.0+0xa>
 80a4994:	2c2d      	cmp	r4, #45	; 0x2d
 80a4996:	d133      	bne.n	80a4a00 <_strtol_l.isra.0+0x84>
 80a4998:	f04f 0801 	mov.w	r8, #1
 80a499c:	f89c 4000 	ldrb.w	r4, [ip]
 80a49a0:	f100 0c02 	add.w	ip, r0, #2
 80a49a4:	2b00      	cmp	r3, #0
 80a49a6:	d05c      	beq.n	80a4a62 <_strtol_l.isra.0+0xe6>
 80a49a8:	2b10      	cmp	r3, #16
 80a49aa:	d10c      	bne.n	80a49c6 <_strtol_l.isra.0+0x4a>
 80a49ac:	2c30      	cmp	r4, #48	; 0x30
 80a49ae:	d10a      	bne.n	80a49c6 <_strtol_l.isra.0+0x4a>
 80a49b0:	f89c 0000 	ldrb.w	r0, [ip]
 80a49b4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a49b8:	2858      	cmp	r0, #88	; 0x58
 80a49ba:	d14d      	bne.n	80a4a58 <_strtol_l.isra.0+0xdc>
 80a49bc:	2310      	movs	r3, #16
 80a49be:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80a49c2:	f10c 0c02 	add.w	ip, ip, #2
 80a49c6:	2600      	movs	r6, #0
 80a49c8:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80a49cc:	3f01      	subs	r7, #1
 80a49ce:	fbb7 f9f3 	udiv	r9, r7, r3
 80a49d2:	4630      	mov	r0, r6
 80a49d4:	fb03 7a19 	mls	sl, r3, r9, r7
 80a49d8:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 80a49dc:	2d09      	cmp	r5, #9
 80a49de:	d818      	bhi.n	80a4a12 <_strtol_l.isra.0+0x96>
 80a49e0:	462c      	mov	r4, r5
 80a49e2:	42a3      	cmp	r3, r4
 80a49e4:	dd24      	ble.n	80a4a30 <_strtol_l.isra.0+0xb4>
 80a49e6:	1c75      	adds	r5, r6, #1
 80a49e8:	d007      	beq.n	80a49fa <_strtol_l.isra.0+0x7e>
 80a49ea:	4581      	cmp	r9, r0
 80a49ec:	d31d      	bcc.n	80a4a2a <_strtol_l.isra.0+0xae>
 80a49ee:	d101      	bne.n	80a49f4 <_strtol_l.isra.0+0x78>
 80a49f0:	45a2      	cmp	sl, r4
 80a49f2:	db1a      	blt.n	80a4a2a <_strtol_l.isra.0+0xae>
 80a49f4:	2601      	movs	r6, #1
 80a49f6:	fb00 4003 	mla	r0, r0, r3, r4
 80a49fa:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a49fe:	e7eb      	b.n	80a49d8 <_strtol_l.isra.0+0x5c>
 80a4a00:	2c2b      	cmp	r4, #43	; 0x2b
 80a4a02:	bf08      	it	eq
 80a4a04:	f89c 4000 	ldrbeq.w	r4, [ip]
 80a4a08:	46a8      	mov	r8, r5
 80a4a0a:	bf08      	it	eq
 80a4a0c:	f100 0c02 	addeq.w	ip, r0, #2
 80a4a10:	e7c8      	b.n	80a49a4 <_strtol_l.isra.0+0x28>
 80a4a12:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 80a4a16:	2d19      	cmp	r5, #25
 80a4a18:	d801      	bhi.n	80a4a1e <_strtol_l.isra.0+0xa2>
 80a4a1a:	3c37      	subs	r4, #55	; 0x37
 80a4a1c:	e7e1      	b.n	80a49e2 <_strtol_l.isra.0+0x66>
 80a4a1e:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 80a4a22:	2d19      	cmp	r5, #25
 80a4a24:	d804      	bhi.n	80a4a30 <_strtol_l.isra.0+0xb4>
 80a4a26:	3c57      	subs	r4, #87	; 0x57
 80a4a28:	e7db      	b.n	80a49e2 <_strtol_l.isra.0+0x66>
 80a4a2a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80a4a2e:	e7e4      	b.n	80a49fa <_strtol_l.isra.0+0x7e>
 80a4a30:	1c73      	adds	r3, r6, #1
 80a4a32:	d106      	bne.n	80a4a42 <_strtol_l.isra.0+0xc6>
 80a4a34:	2322      	movs	r3, #34	; 0x22
 80a4a36:	4638      	mov	r0, r7
 80a4a38:	f8ce 3000 	str.w	r3, [lr]
 80a4a3c:	b942      	cbnz	r2, 80a4a50 <_strtol_l.isra.0+0xd4>
 80a4a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a4a42:	f1b8 0f00 	cmp.w	r8, #0
 80a4a46:	d000      	beq.n	80a4a4a <_strtol_l.isra.0+0xce>
 80a4a48:	4240      	negs	r0, r0
 80a4a4a:	2a00      	cmp	r2, #0
 80a4a4c:	d0f7      	beq.n	80a4a3e <_strtol_l.isra.0+0xc2>
 80a4a4e:	b10e      	cbz	r6, 80a4a54 <_strtol_l.isra.0+0xd8>
 80a4a50:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80a4a54:	6011      	str	r1, [r2, #0]
 80a4a56:	e7f2      	b.n	80a4a3e <_strtol_l.isra.0+0xc2>
 80a4a58:	2430      	movs	r4, #48	; 0x30
 80a4a5a:	2b00      	cmp	r3, #0
 80a4a5c:	d1b3      	bne.n	80a49c6 <_strtol_l.isra.0+0x4a>
 80a4a5e:	2308      	movs	r3, #8
 80a4a60:	e7b1      	b.n	80a49c6 <_strtol_l.isra.0+0x4a>
 80a4a62:	2c30      	cmp	r4, #48	; 0x30
 80a4a64:	d0a4      	beq.n	80a49b0 <_strtol_l.isra.0+0x34>
 80a4a66:	230a      	movs	r3, #10
 80a4a68:	e7ad      	b.n	80a49c6 <_strtol_l.isra.0+0x4a>
 80a4a6a:	bf00      	nop
 80a4a6c:	080a5072 	.word	0x080a5072

080a4a70 <strtol>:
 80a4a70:	4613      	mov	r3, r2
 80a4a72:	460a      	mov	r2, r1
 80a4a74:	4601      	mov	r1, r0
 80a4a76:	4802      	ldr	r0, [pc, #8]	; (80a4a80 <strtol+0x10>)
 80a4a78:	6800      	ldr	r0, [r0, #0]
 80a4a7a:	f7ff bf7f 	b.w	80a497c <_strtol_l.isra.0>
 80a4a7e:	bf00      	nop
 80a4a80:	2000000c 	.word	0x2000000c

080a4a84 <__register_exitproc>:
 80a4a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a4a88:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80a4b48 <__register_exitproc+0xc4>
 80a4a8c:	4606      	mov	r6, r0
 80a4a8e:	f8d8 0000 	ldr.w	r0, [r8]
 80a4a92:	461f      	mov	r7, r3
 80a4a94:	460d      	mov	r5, r1
 80a4a96:	4691      	mov	r9, r2
 80a4a98:	f000 f858 	bl	80a4b4c <__retarget_lock_acquire_recursive>
 80a4a9c:	4b26      	ldr	r3, [pc, #152]	; (80a4b38 <__register_exitproc+0xb4>)
 80a4a9e:	681c      	ldr	r4, [r3, #0]
 80a4aa0:	b934      	cbnz	r4, 80a4ab0 <__register_exitproc+0x2c>
 80a4aa2:	4c26      	ldr	r4, [pc, #152]	; (80a4b3c <__register_exitproc+0xb8>)
 80a4aa4:	601c      	str	r4, [r3, #0]
 80a4aa6:	4b26      	ldr	r3, [pc, #152]	; (80a4b40 <__register_exitproc+0xbc>)
 80a4aa8:	b113      	cbz	r3, 80a4ab0 <__register_exitproc+0x2c>
 80a4aaa:	681b      	ldr	r3, [r3, #0]
 80a4aac:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a4ab0:	6863      	ldr	r3, [r4, #4]
 80a4ab2:	2b1f      	cmp	r3, #31
 80a4ab4:	dd07      	ble.n	80a4ac6 <__register_exitproc+0x42>
 80a4ab6:	f8d8 0000 	ldr.w	r0, [r8]
 80a4aba:	f000 f849 	bl	80a4b50 <__retarget_lock_release_recursive>
 80a4abe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a4ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a4ac6:	b35e      	cbz	r6, 80a4b20 <__register_exitproc+0x9c>
 80a4ac8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a4acc:	b988      	cbnz	r0, 80a4af2 <__register_exitproc+0x6e>
 80a4ace:	4b1d      	ldr	r3, [pc, #116]	; (80a4b44 <__register_exitproc+0xc0>)
 80a4ad0:	b923      	cbnz	r3, 80a4adc <__register_exitproc+0x58>
 80a4ad2:	f8d8 0000 	ldr.w	r0, [r8]
 80a4ad6:	f000 f83a 	bl	80a4b4e <__retarget_lock_release>
 80a4ada:	e7f0      	b.n	80a4abe <__register_exitproc+0x3a>
 80a4adc:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a4ae0:	f7fc fcbe 	bl	80a1460 <malloc>
 80a4ae4:	2800      	cmp	r0, #0
 80a4ae6:	d0f4      	beq.n	80a4ad2 <__register_exitproc+0x4e>
 80a4ae8:	2300      	movs	r3, #0
 80a4aea:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a4aee:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a4af2:	2201      	movs	r2, #1
 80a4af4:	6863      	ldr	r3, [r4, #4]
 80a4af6:	2e02      	cmp	r6, #2
 80a4af8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a4afc:	fa02 f203 	lsl.w	r2, r2, r3
 80a4b00:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a4b04:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a4b08:	ea43 0302 	orr.w	r3, r3, r2
 80a4b0c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a4b10:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a4b14:	bf02      	ittt	eq
 80a4b16:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a4b1a:	431a      	orreq	r2, r3
 80a4b1c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80a4b20:	6863      	ldr	r3, [r4, #4]
 80a4b22:	f8d8 0000 	ldr.w	r0, [r8]
 80a4b26:	1c5a      	adds	r2, r3, #1
 80a4b28:	3302      	adds	r3, #2
 80a4b2a:	6062      	str	r2, [r4, #4]
 80a4b2c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a4b30:	f000 f80e 	bl	80a4b50 <__retarget_lock_release_recursive>
 80a4b34:	2000      	movs	r0, #0
 80a4b36:	e7c4      	b.n	80a4ac2 <__register_exitproc+0x3e>
 80a4b38:	20000718 	.word	0x20000718
 80a4b3c:	2000068c 	.word	0x2000068c
 80a4b40:	00000000 	.word	0x00000000
 80a4b44:	080a1461 	.word	0x080a1461
 80a4b48:	20000070 	.word	0x20000070

080a4b4c <__retarget_lock_acquire_recursive>:
 80a4b4c:	4770      	bx	lr

080a4b4e <__retarget_lock_release>:
 80a4b4e:	4770      	bx	lr

080a4b50 <__retarget_lock_release_recursive>:
 80a4b50:	4770      	bx	lr

080a4b52 <link_code_end>:
	...

080a4b54 <dynalib_user>:
 80a4b54:	0021 080a 0061 080a 0089 080a 008d 080a     !...a...........
 80a4b64:	0000 0000 654d 7373 6761 2065 6552 6563     ....Message Rece
 80a4b74:	7669 6465 4200 6675 6566 2072 7566 6c6c     ived.Buffer full
 80a4b84:	7400 6d65 6570 6172 7574 6572 6800 6d75     .temperature.hum
 80a4b94:	6469 7469 0079 7270 7365 7573 6572 6500     idity.pressure.e
 80a4ba4:	766e 7269 6e6f 656d 746e 772f 6165 6874     nvironment/weath
 80a4bb4:	7265 732d 6174 6974 6e6f 5000 6275 696c     er-station.Publi
 80a4bc4:	6873 6465 4e00 746f 7020 6275 696c 6873     shed.Not publish
 80a4bd4:	6465 6800 6d6f 2d65 7561 6f74 616d 6974     ed.home-automati
 80a4be4:	6e6f 702e 7265 796b 616c 2e62 6f63 006d     on.perkylab.com.

080a4bf4 <_ZTVN5spark10LogHandlerE>:
	...
 80a4c04:	00ad 080a 00d1 080a                         ........

080a4c0c <_ZTVN5spark16SerialLogHandlerE>:
	...
 80a4c14:	00dd 080a 0111 080a 27c9 080a 00d3 080a     .........'......
 80a4c24:	0400 514d 5454 0004 4d06 4951 6473 0370     ..MQTT...MQIsdp.
 80a4c34:	504d 334c 3131 4135 2032 6f46 6e75 0064     MPL3115A2 Found.
 80a4c44:	6953 3037 3132 4620 756f 646e 4800 5554     Si7021 Found.HTU
 80a4c54:	3132 2044 6f46 6e75 0064 504d 334c 3131     21D Found.MPL311
 80a4c64:	4135 2032 4f4e 2054 6f46 6e75 0064 6f4e     5A2 NOT Found.No
 80a4c74:	5420 6d65 2f70 7548 696d 6964 7974 4420      Temp/Humidity D
 80a4c84:	7665 6369 2065 6544 6574 7463 6465 4e00     evice Detected.N
 80a4c94:	206f 6544 6976 6563 2073 6544 6574 7463     o Devices Detect
 80a4ca4:	6465 0000                                   ed..

080a4ca8 <_ZTV7TwoWire>:
	...
 80a4cb0:	14f1 080a 153b 080a 1513 080a 14f3 080a     ....;...........
 80a4cc0:	151b 080a 1523 080a 152b 080a 1533 080a     ....#...+...3...

080a4cd0 <_ZTV9IPAddress>:
	...
 80a4cd8:	15fd 080a 15ed 080a 15ef 080a 6425 2500     ............%d.%
 80a4ce8:	0075 6725 7500 3025 7834 0000               u.%g.u%04x..

080a4cf4 <_ZTVN5spark16JSONBufferWriterE>:
	...
 80a4cfc:	170b 080a 170d 080a 171b 080a 1741 080a     ............A...
 80a4d0c:	6162 6475 5300 7265 6169 006c 5355 5342     baud.Serial.USBS
 80a4d1c:	7265 6169 316c 4a00 4f53 534e 7274 6165     erial1.JSONStrea
 80a4d2c:	4c6d 676f 6148 646e 656c 0072 7061 0070     mLogHandler.app.
 80a4d3c:	3025 3031 2075 5d00 0020 202c 2800 3a29     %010u .] ., .():
 80a4d4c:	0020 5b20 6300 646f 2065 203d 2500 0069      . [.code = .%i.
 80a4d5c:	6564 6174 6c69 2073 203d 0d00 000a 0063     details = ....c.
 80a4d6c:	0066 6e6c 6600 006e 0074 6f63 6564 6400     f.ln.fn.t.code.d
 80a4d7c:	7465 6961 006c 0000                         etail...

080a4d84 <_ZTVN5spark16JSONStreamWriterE>:
	...
 80a4d8c:	1b5d 080a 1b83 080a 1b41 080a 1775 080a     ].......A...u...

080a4d9c <_ZTVN5spark16StreamLogHandlerE>:
	...
 80a4da4:	1fe9 080a 2001 080a 27c9 080a 00d3 080a     ..... ...'......

080a4db4 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 80a4dbc:	2015 080a 2029 080a 2971 080a 1b49 080a     . ..) ..q)..I...

080a4dcc <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 80a4dd4:	1b5b 080a 1b91 080a 2705 080a 1b4b 080a     [........'..K...

080a4de4 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 80a4dec:	1b59 080a 1b9f 080a 1f11 080a 1bbd 080a     Y...............

080a4dfc <_ZTVN5spark12NetworkClassE>:
	...
 80a4e04:	2ae5 080a 2aef 080a 2af9 080a 2b03 080a     .*...*...*...+..
 80a4e14:	2b0d 080a 2b19 080a 2b25 080a 2b2d 080a     .+...+..%+..-+..
 80a4e24:	2b35 080a 2b41 080a 2b49 080a 2b53 080a     5+..A+..I+..S+..
 80a4e34:	2b5d 080a 6977 6972 676e 5400 5043 6c43     ]+..wiring.TCPCl
 80a4e44:	6569 746e 7320 636f 656b 3d74 7825 0000     ient socket=%x..

080a4e54 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a4e5c:	2ec9 080a 2ef1 080a 3313 080a 2eff 080a     .........3......
 80a4e6c:	2ecd 080a                                   ....

080a4e70 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

080a4e78 <_ZTV9TCPClient>:
	...
 80a4e80:	2f05 080a 2f39 080a 2e85 080a 2e9f 080a     ./..9/..........
 80a4e90:	3115 080a 2f9b 080a 2f6d 080a 2ec7 080a     .1.../..m/......
 80a4ea0:	3035 080a 3319 080a 2fcf 080a 3189 080a     50...3.../...1..
 80a4eb0:	3237 080a 31ef 080a 2eaf 080a 31fd 080a     72...1.......1..
 80a4ec0:	2f4d 080a 5925 252d 2d6d 6425 2554 3a48     M/..%Y-%m-%dT%H:
 80a4ed0:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

080a4ee0 <_ZTV11USARTSerial>:
	...
 80a4ee8:	3399 080a 3403 080a 33df 080a 2bd9 080a     .3...4...3...+..
 80a4ef8:	33af 080a 33cb 080a 33bd 080a 33d9 080a     .3...3...3...3..
 80a4f08:	339b 080a 33a1 080a                         .3...3..

080a4f10 <_ZTV9USBSerial>:
	...
 80a4f18:	349f 080a 3505 080a 34dd 080a 2bd9 080a     .4...5...4...+..
 80a4f28:	34cf 080a 34a1 080a 34b1 080a 34ff 080a     .4...4...4...4..
 80a4f38:	34c1 080a 3499 080a                         .4...4..

080a4f40 <_ZTVN5spark9WiFiClassE>:
	...
 80a4f48:	36d7 080a 36cd 080a 36c3 080a 3635 080a     .6...6...6..56..
 80a4f58:	36b7 080a 36ab 080a 2b25 080a 2b2d 080a     .6...6..%+..-+..
 80a4f68:	369f 080a 3697 080a 368d 080a 3683 080a     .6...6...6...6..
 80a4f78:	363f 080a                                   ?6..

080a4f7c <_ZSt7nothrow>:
	...

080a4f7d <_ZTSSt19_Sp_make_shared_tag>:
 80a4f7d:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
 80a4f8d:	6572 5f64 6174 0067 0000                     red_tag....

080a4f98 <_ZTISt19_Sp_make_shared_tag>:
 80a4f98:	4fd8 080a 4f7d 080a                         .O..}O..

080a4fa0 <_ZTIN10__cxxabiv117__class_type_infoE>:
 80a4fa0:	5038 080a 4fac 080a 505c 080a               8P...O..\P..

080a4fac <_ZTSN10__cxxabiv117__class_type_infoE>:
 80a4fac:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
 80a4fbc:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
 80a4fcc:	0045 0000                                   E...

080a4fd0 <_ZTVN10__cxxabiv117__class_type_infoE>:
 80a4fd0:	0000 0000 4fa0 080a 3945 080a 3959 080a     .....O..E9..Y9..
 80a4fe0:	3af1 080a 3af1 080a 39c3 080a 3905 080a     .:...:...9...9..
 80a4ff0:	39ab 080a 396d 080a 3939 080a               .9..m9..99..

080a4ffc <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 80a4ffc:	5038 080a 5008 080a 4fa0 080a               8P...P...O..

080a5008 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 80a5008:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
 80a5018:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
 80a5028:	666e 456f 0000 0000                         nfoE....

080a5030 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 80a5030:	0000 0000 4ffc 080a 39ed 080a 3a01 080a     .....O...9...:..
 80a5040:	3af1 080a 3af1 080a 39c3 080a 3905 080a     .:...:...9...9..
 80a5050:	3ac5 080a 3a51 080a 3a15 080a               .:..Q:...:..

080a505c <_ZTISt9type_info>:
 80a505c:	4fd8 080a 5064 080a                         .O..dP..

080a5064 <_ZTSSt9type_info>:
 80a5064:	7453 7439 7079 5f65 6e69 6f66                St9type_info.

080a5071 <_ctype_>:
 80a5071:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a5081:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a5091:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a50a1:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a50b1:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a50c1:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a50d1:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a50e1:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a50f1:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080a5172 <link_const_variable_data_end>:
	...

080a5174 <link_constructors_location>:
 80a5174:	080a03f5 	.word	0x080a03f5
 80a5178:	080a27b9 	.word	0x080a27b9
 80a517c:	080a2bc5 	.word	0x080a2bc5
 80a5180:	080a2cf5 	.word	0x080a2cf5
 80a5184:	080a2e61 	.word	0x080a2e61
 80a5188:	080a3385 	.word	0x080a3385
 80a518c:	080a36e1 	.word	0x080a36e1
 80a5190:	080a38d1 	.word	0x080a38d1

080a5194 <link_constructors_end>:
	...
